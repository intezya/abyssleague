// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/auth/change_password": {
            "post": {
                "description": "Changes the password for an existing user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Change user password",
                "parameters": [
                    {
                        "description": "Password change details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.PasswordChangeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password successfully changed",
                        "schema": {
                            "$ref": "#/definitions/domainservice.AuthenticationResult"
                        }
                    },
                    "400": {
                        "description": "Bad request - validation error",
                        "schema": {
                            "$ref": "#/definitions/base.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/base.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found - user does not exist",
                        "schema": {
                            "$ref": "#/definitions/base.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/base.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/login": {
            "post": {
                "description": "Authenticates a user with username and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Authenticate user",
                "parameters": [
                    {
                        "description": "User login credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.AuthenticationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully authenticated",
                        "schema": {
                            "$ref": "#/definitions/domainservice.AuthenticationResult"
                        }
                    },
                    "400": {
                        "description": "Bad request - validation error",
                        "schema": {
                            "$ref": "#/definitions/base.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/base.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/base.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/register": {
            "post": {
                "description": "Creates a new user account with the provided credentials",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.AuthenticationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User successfully registered",
                        "schema": {
                            "$ref": "#/definitions/domainservice.AuthenticationResult"
                        }
                    },
                    "409": {
                        "description": "Conflict - user with this username already exists",
                        "schema": {
                            "$ref": "#/definitions/examples.UsernameConflictResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable entity - validation error",
                        "schema": {
                            "$ref": "#/definitions/base.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/base.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "base.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "detail": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                }
            }
        },
        "domainservice.AuthenticationResult": {
            "type": "object",
            "properties": {
                "online_count": {
                    "type": "integer"
                },
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                },
                "user": {
                    "$ref": "#/definitions/dto.UserFullDTO"
                }
            }
        },
        "dto.InventoryItemDTO": {
            "type": "object",
            "properties": {
                "collection": {
                    "type": "string"
                },
                "game_item_id": {
                    "description": "Edges",
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "obtained_at": {
                    "type": "string"
                },
                "rarity": {
                    "type": "integer"
                },
                "type": {
                    "type": "integer"
                }
            }
        },
        "dto.UserDTO": {
            "type": "object",
            "properties": {
                "avatar_url": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "genshin_uid": {
                    "type": "string"
                },
                "hoyolab_login": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "invites_enabled": {
                    "type": "boolean"
                },
                "login_streak": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "dto.UserFullDTO": {
            "type": "object",
            "properties": {
                "avatar_url": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "current_item": {
                    "$ref": "#/definitions/dto.InventoryItemDTO"
                },
                "email": {
                    "type": "string"
                },
                "friends": {
                    "description": "Statistics []*Statistic ` + "`" + `json:\"statistics\"` + "`" + `",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.UserDTO"
                    }
                },
                "genshin_uid": {
                    "type": "string"
                },
                "hoyolab_login": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "invites_enabled": {
                    "type": "boolean"
                },
                "items": {
                    "description": "SentFriendRequests []*FriendRequest ` + "`" + `json:\"sent_friend_requests\"` + "`" + `\nReceivedFriendRequests []*FriendRequest ` + "`" + `json:\"received_friend_requests\"` + "`" + `",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.InventoryItemDTO"
                    }
                },
                "login_streak": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "examples.UsernameConflictResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 409
                },
                "detail": {
                    "type": "string"
                },
                "message": {
                    "type": "string",
                    "example": "user already exists"
                },
                "path": {
                    "type": "string"
                }
            }
        },
        "request.AuthenticationRequest": {
            "type": "object",
            "required": [
                "hwid",
                "password",
                "username"
            ],
            "properties": {
                "hwid": {
                    "type": "string",
                    "example": "QXV0aGVudGljQU1ENjA3NDA0"
                },
                "password": {
                    "type": "string",
                    "example": "STr0ngP@55w0rD!_"
                },
                "username": {
                    "type": "string",
                    "example": "my_legendary_username"
                }
            }
        },
        "request.PasswordChangeRequest": {
            "type": "object",
            "required": [
                "new_password",
                "old_password",
                "username"
            ],
            "properties": {
                "new_password": {
                    "type": "string",
                    "example": "QXV0aGVudGljQU1ENjA3NDA0"
                },
                "old_password": {
                    "type": "string",
                    "example": "STr0ngP@55w0rD!_"
                },
                "username": {
                    "type": "string",
                    "example": "my_legendary_username"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{"http", "https"},
	Title:            "AbyssCore API",
	Description:      "API of AbyssCore server",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
