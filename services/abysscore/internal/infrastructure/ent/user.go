// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/intezya/abyssleague/services/abysscore/internal/infrastructure/ent/inventoryitem"
	"github.com/intezya/abyssleague/services/abysscore/internal/infrastructure/ent/match"
	"github.com/intezya/abyssleague/services/abysscore/internal/infrastructure/ent/schema/access_level"
	"github.com/intezya/abyssleague/services/abysscore/internal/infrastructure/ent/user"
	"github.com/intezya/abyssleague/services/abysscore/internal/infrastructure/ent/userbalance"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// LowerUsername holds the value of the "lower_username" field.
	LowerUsername string `json:"lower_username,omitempty"`
	// Email holds the value of the "email" field.
	Email *string `json:"email,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"-"`
	// HardwareID holds the value of the "hardware_id" field.
	HardwareID *string `json:"-"`
	// AccessLevel holds the value of the "access_level" field.
	AccessLevel access_level.AccessLevel `json:"access_level,omitempty"`
	// GenshinUID holds the value of the "genshin_uid" field.
	GenshinUID *string `json:"genshin_uid,omitempty"`
	// HoyolabLogin holds the value of the "hoyolab_login" field.
	HoyolabLogin *string `json:"hoyolab_login,omitempty"`
	// CurrentMatchID holds the value of the "current_match_id" field.
	CurrentMatchID *int `json:"current_match_id,omitempty"`
	// CurrentItemInProfileID holds the value of the "current_item_in_profile_id" field.
	CurrentItemInProfileID *int `json:"current_item_in_profile_id,omitempty"`
	// AvatarURL holds the value of the "avatar_url" field.
	AvatarURL *string `json:"avatar_url,omitempty"`
	// InvitesEnabled holds the value of the "invites_enabled" field.
	InvitesEnabled bool `json:"invites_enabled,omitempty"`
	// LoginAt holds the value of the "login_at" field.
	LoginAt time.Time `json:"login_at,omitempty"`
	// LoginStreak holds the value of the "login_streak" field.
	LoginStreak int `json:"login_streak,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// SearchBlockedUntil holds the value of the "search_blocked_until" field.
	SearchBlockedUntil *time.Time `json:"search_blocked_until,omitempty"`
	// SearchBlockReason holds the value of the "search_block_reason" field.
	SearchBlockReason *string `json:"search_block_reason,omitempty"`
	// SearchBlockedLevel holds the value of the "search_blocked_level" field.
	SearchBlockedLevel int `json:"search_blocked_level,omitempty"`
	// AccountBlockedUntil holds the value of the "account_blocked_until" field.
	AccountBlockedUntil *time.Time `json:"account_blocked_until,omitempty"`
	// AccountBlockReason holds the value of the "account_block_reason" field.
	AccountBlockReason *string `json:"account_block_reason,omitempty"`
	// AccountBlockedLevel holds the value of the "account_blocked_level" field.
	AccountBlockedLevel int `json:"account_blocked_level,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Statistics holds the value of the statistics edge.
	Statistics []*Statistic `json:"statistics,omitempty"`
	// Friends holds the value of the friends edge.
	Friends []*User `json:"friends,omitempty"`
	// SentFriendRequests holds the value of the sent_friend_requests edge.
	SentFriendRequests []*FriendRequest `json:"sent_friend_requests,omitempty"`
	// ReceivedFriendRequests holds the value of the received_friend_requests edge.
	ReceivedFriendRequests []*FriendRequest `json:"received_friend_requests,omitempty"`
	// Items holds the value of the items edge.
	Items []*InventoryItem `json:"items,omitempty"`
	// CurrentItem holds the value of the current_item edge.
	CurrentItem *InventoryItem `json:"current_item,omitempty"`
	// CurrentMatch holds the value of the current_match edge.
	CurrentMatch *Match `json:"current_match,omitempty"`
	// Balance holds the value of the balance edge.
	Balance *UserBalance `json:"balance,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [8]bool
}

// StatisticsOrErr returns the Statistics value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) StatisticsOrErr() ([]*Statistic, error) {
	if e.loadedTypes[0] {
		return e.Statistics, nil
	}
	return nil, &NotLoadedError{edge: "statistics"}
}

// FriendsOrErr returns the Friends value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) FriendsOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.Friends, nil
	}
	return nil, &NotLoadedError{edge: "friends"}
}

// SentFriendRequestsOrErr returns the SentFriendRequests value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) SentFriendRequestsOrErr() ([]*FriendRequest, error) {
	if e.loadedTypes[2] {
		return e.SentFriendRequests, nil
	}
	return nil, &NotLoadedError{edge: "sent_friend_requests"}
}

// ReceivedFriendRequestsOrErr returns the ReceivedFriendRequests value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ReceivedFriendRequestsOrErr() ([]*FriendRequest, error) {
	if e.loadedTypes[3] {
		return e.ReceivedFriendRequests, nil
	}
	return nil, &NotLoadedError{edge: "received_friend_requests"}
}

// ItemsOrErr returns the Items value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ItemsOrErr() ([]*InventoryItem, error) {
	if e.loadedTypes[4] {
		return e.Items, nil
	}
	return nil, &NotLoadedError{edge: "items"}
}

// CurrentItemOrErr returns the CurrentItem value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) CurrentItemOrErr() (*InventoryItem, error) {
	if e.CurrentItem != nil {
		return e.CurrentItem, nil
	} else if e.loadedTypes[5] {
		return nil, &NotFoundError{label: inventoryitem.Label}
	}
	return nil, &NotLoadedError{edge: "current_item"}
}

// CurrentMatchOrErr returns the CurrentMatch value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) CurrentMatchOrErr() (*Match, error) {
	if e.CurrentMatch != nil {
		return e.CurrentMatch, nil
	} else if e.loadedTypes[6] {
		return nil, &NotFoundError{label: match.Label}
	}
	return nil, &NotLoadedError{edge: "current_match"}
}

// BalanceOrErr returns the Balance value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) BalanceOrErr() (*UserBalance, error) {
	if e.Balance != nil {
		return e.Balance, nil
	} else if e.loadedTypes[7] {
		return nil, &NotFoundError{label: userbalance.Label}
	}
	return nil, &NotLoadedError{edge: "balance"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldAccessLevel:
			values[i] = new(access_level.AccessLevel)
		case user.FieldInvitesEnabled:
			values[i] = new(sql.NullBool)
		case user.FieldID, user.FieldCurrentMatchID, user.FieldCurrentItemInProfileID, user.FieldLoginStreak, user.FieldSearchBlockedLevel, user.FieldAccountBlockedLevel:
			values[i] = new(sql.NullInt64)
		case user.FieldUsername, user.FieldLowerUsername, user.FieldEmail, user.FieldPassword, user.FieldHardwareID, user.FieldGenshinUID, user.FieldHoyolabLogin, user.FieldAvatarURL, user.FieldSearchBlockReason, user.FieldAccountBlockReason:
			values[i] = new(sql.NullString)
		case user.FieldLoginAt, user.FieldCreatedAt, user.FieldSearchBlockedUntil, user.FieldAccountBlockedUntil:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case user.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				u.Username = value.String
			}
		case user.FieldLowerUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lower_username", values[i])
			} else if value.Valid {
				u.LowerUsername = value.String
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = new(string)
				*u.Email = value.String
			}
		case user.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				u.Password = value.String
			}
		case user.FieldHardwareID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hardware_id", values[i])
			} else if value.Valid {
				u.HardwareID = new(string)
				*u.HardwareID = value.String
			}
		case user.FieldAccessLevel:
			if value, ok := values[i].(*access_level.AccessLevel); !ok {
				return fmt.Errorf("unexpected type %T for field access_level", values[i])
			} else if value != nil {
				u.AccessLevel = *value
			}
		case user.FieldGenshinUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field genshin_uid", values[i])
			} else if value.Valid {
				u.GenshinUID = new(string)
				*u.GenshinUID = value.String
			}
		case user.FieldHoyolabLogin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hoyolab_login", values[i])
			} else if value.Valid {
				u.HoyolabLogin = new(string)
				*u.HoyolabLogin = value.String
			}
		case user.FieldCurrentMatchID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field current_match_id", values[i])
			} else if value.Valid {
				u.CurrentMatchID = new(int)
				*u.CurrentMatchID = int(value.Int64)
			}
		case user.FieldCurrentItemInProfileID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field current_item_in_profile_id", values[i])
			} else if value.Valid {
				u.CurrentItemInProfileID = new(int)
				*u.CurrentItemInProfileID = int(value.Int64)
			}
		case user.FieldAvatarURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar_url", values[i])
			} else if value.Valid {
				u.AvatarURL = new(string)
				*u.AvatarURL = value.String
			}
		case user.FieldInvitesEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field invites_enabled", values[i])
			} else if value.Valid {
				u.InvitesEnabled = value.Bool
			}
		case user.FieldLoginAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field login_at", values[i])
			} else if value.Valid {
				u.LoginAt = value.Time
			}
		case user.FieldLoginStreak:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field login_streak", values[i])
			} else if value.Valid {
				u.LoginStreak = int(value.Int64)
			}
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		case user.FieldSearchBlockedUntil:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field search_blocked_until", values[i])
			} else if value.Valid {
				u.SearchBlockedUntil = new(time.Time)
				*u.SearchBlockedUntil = value.Time
			}
		case user.FieldSearchBlockReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field search_block_reason", values[i])
			} else if value.Valid {
				u.SearchBlockReason = new(string)
				*u.SearchBlockReason = value.String
			}
		case user.FieldSearchBlockedLevel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field search_blocked_level", values[i])
			} else if value.Valid {
				u.SearchBlockedLevel = int(value.Int64)
			}
		case user.FieldAccountBlockedUntil:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field account_blocked_until", values[i])
			} else if value.Valid {
				u.AccountBlockedUntil = new(time.Time)
				*u.AccountBlockedUntil = value.Time
			}
		case user.FieldAccountBlockReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field account_block_reason", values[i])
			} else if value.Valid {
				u.AccountBlockReason = new(string)
				*u.AccountBlockReason = value.String
			}
		case user.FieldAccountBlockedLevel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field account_blocked_level", values[i])
			} else if value.Valid {
				u.AccountBlockedLevel = int(value.Int64)
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryStatistics queries the "statistics" edge of the User entity.
func (u *User) QueryStatistics() *StatisticQuery {
	return NewUserClient(u.config).QueryStatistics(u)
}

// QueryFriends queries the "friends" edge of the User entity.
func (u *User) QueryFriends() *UserQuery {
	return NewUserClient(u.config).QueryFriends(u)
}

// QuerySentFriendRequests queries the "sent_friend_requests" edge of the User entity.
func (u *User) QuerySentFriendRequests() *FriendRequestQuery {
	return NewUserClient(u.config).QuerySentFriendRequests(u)
}

// QueryReceivedFriendRequests queries the "received_friend_requests" edge of the User entity.
func (u *User) QueryReceivedFriendRequests() *FriendRequestQuery {
	return NewUserClient(u.config).QueryReceivedFriendRequests(u)
}

// QueryItems queries the "items" edge of the User entity.
func (u *User) QueryItems() *InventoryItemQuery {
	return NewUserClient(u.config).QueryItems(u)
}

// QueryCurrentItem queries the "current_item" edge of the User entity.
func (u *User) QueryCurrentItem() *InventoryItemQuery {
	return NewUserClient(u.config).QueryCurrentItem(u)
}

// QueryCurrentMatch queries the "current_match" edge of the User entity.
func (u *User) QueryCurrentMatch() *MatchQuery {
	return NewUserClient(u.config).QueryCurrentMatch(u)
}

// QueryBalance queries the "balance" edge of the User entity.
func (u *User) QueryBalance() *UserBalanceQuery {
	return NewUserClient(u.config).QueryBalance(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("username=")
	builder.WriteString(u.Username)
	builder.WriteString(", ")
	builder.WriteString("lower_username=")
	builder.WriteString(u.LowerUsername)
	builder.WriteString(", ")
	if v := u.Email; v != nil {
		builder.WriteString("email=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("password=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("hardware_id=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("access_level=")
	builder.WriteString(fmt.Sprintf("%v", u.AccessLevel))
	builder.WriteString(", ")
	if v := u.GenshinUID; v != nil {
		builder.WriteString("genshin_uid=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := u.HoyolabLogin; v != nil {
		builder.WriteString("hoyolab_login=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := u.CurrentMatchID; v != nil {
		builder.WriteString("current_match_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := u.CurrentItemInProfileID; v != nil {
		builder.WriteString("current_item_in_profile_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := u.AvatarURL; v != nil {
		builder.WriteString("avatar_url=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("invites_enabled=")
	builder.WriteString(fmt.Sprintf("%v", u.InvitesEnabled))
	builder.WriteString(", ")
	builder.WriteString("login_at=")
	builder.WriteString(u.LoginAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("login_streak=")
	builder.WriteString(fmt.Sprintf("%v", u.LoginStreak))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := u.SearchBlockedUntil; v != nil {
		builder.WriteString("search_blocked_until=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := u.SearchBlockReason; v != nil {
		builder.WriteString("search_block_reason=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("search_blocked_level=")
	builder.WriteString(fmt.Sprintf("%v", u.SearchBlockedLevel))
	builder.WriteString(", ")
	if v := u.AccountBlockedUntil; v != nil {
		builder.WriteString("account_blocked_until=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := u.AccountBlockReason; v != nil {
		builder.WriteString("account_block_reason=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("account_blocked_level=")
	builder.WriteString(fmt.Sprintf("%v", u.AccountBlockedLevel))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User
