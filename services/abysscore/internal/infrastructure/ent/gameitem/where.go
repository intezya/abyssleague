// Code generated by ent, DO NOT EDIT.

package gameitem

import (
	"github.com/intezya/abyssleague/services/abysscore/internal/infrastructure/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.GameItem {
	return predicate.GameItem(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.GameItem {
	return predicate.GameItem(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.GameItem {
	return predicate.GameItem(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.GameItem {
	return predicate.GameItem(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.GameItem {
	return predicate.GameItem(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.GameItem {
	return predicate.GameItem(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.GameItem {
	return predicate.GameItem(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.GameItem {
	return predicate.GameItem(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.GameItem {
	return predicate.GameItem(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.GameItem {
	return predicate.GameItem(sql.FieldEQ(FieldName, v))
}

// Collection applies equality check predicate on the "collection" field. It's identical to CollectionEQ.
func Collection(v string) predicate.GameItem {
	return predicate.GameItem(sql.FieldEQ(FieldCollection, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v int) predicate.GameItem {
	return predicate.GameItem(sql.FieldEQ(FieldType, v))
}

// Rarity applies equality check predicate on the "rarity" field. It's identical to RarityEQ.
func Rarity(v int) predicate.GameItem {
	return predicate.GameItem(sql.FieldEQ(FieldRarity, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.GameItem {
	return predicate.GameItem(sql.FieldEQ(FieldCreatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.GameItem {
	return predicate.GameItem(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.GameItem {
	return predicate.GameItem(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.GameItem {
	return predicate.GameItem(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.GameItem {
	return predicate.GameItem(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.GameItem {
	return predicate.GameItem(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.GameItem {
	return predicate.GameItem(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.GameItem {
	return predicate.GameItem(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.GameItem {
	return predicate.GameItem(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.GameItem {
	return predicate.GameItem(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.GameItem {
	return predicate.GameItem(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.GameItem {
	return predicate.GameItem(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.GameItem {
	return predicate.GameItem(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.GameItem {
	return predicate.GameItem(sql.FieldContainsFold(FieldName, v))
}

// CollectionEQ applies the EQ predicate on the "collection" field.
func CollectionEQ(v string) predicate.GameItem {
	return predicate.GameItem(sql.FieldEQ(FieldCollection, v))
}

// CollectionNEQ applies the NEQ predicate on the "collection" field.
func CollectionNEQ(v string) predicate.GameItem {
	return predicate.GameItem(sql.FieldNEQ(FieldCollection, v))
}

// CollectionIn applies the In predicate on the "collection" field.
func CollectionIn(vs ...string) predicate.GameItem {
	return predicate.GameItem(sql.FieldIn(FieldCollection, vs...))
}

// CollectionNotIn applies the NotIn predicate on the "collection" field.
func CollectionNotIn(vs ...string) predicate.GameItem {
	return predicate.GameItem(sql.FieldNotIn(FieldCollection, vs...))
}

// CollectionGT applies the GT predicate on the "collection" field.
func CollectionGT(v string) predicate.GameItem {
	return predicate.GameItem(sql.FieldGT(FieldCollection, v))
}

// CollectionGTE applies the GTE predicate on the "collection" field.
func CollectionGTE(v string) predicate.GameItem {
	return predicate.GameItem(sql.FieldGTE(FieldCollection, v))
}

// CollectionLT applies the LT predicate on the "collection" field.
func CollectionLT(v string) predicate.GameItem {
	return predicate.GameItem(sql.FieldLT(FieldCollection, v))
}

// CollectionLTE applies the LTE predicate on the "collection" field.
func CollectionLTE(v string) predicate.GameItem {
	return predicate.GameItem(sql.FieldLTE(FieldCollection, v))
}

// CollectionContains applies the Contains predicate on the "collection" field.
func CollectionContains(v string) predicate.GameItem {
	return predicate.GameItem(sql.FieldContains(FieldCollection, v))
}

// CollectionHasPrefix applies the HasPrefix predicate on the "collection" field.
func CollectionHasPrefix(v string) predicate.GameItem {
	return predicate.GameItem(sql.FieldHasPrefix(FieldCollection, v))
}

// CollectionHasSuffix applies the HasSuffix predicate on the "collection" field.
func CollectionHasSuffix(v string) predicate.GameItem {
	return predicate.GameItem(sql.FieldHasSuffix(FieldCollection, v))
}

// CollectionEqualFold applies the EqualFold predicate on the "collection" field.
func CollectionEqualFold(v string) predicate.GameItem {
	return predicate.GameItem(sql.FieldEqualFold(FieldCollection, v))
}

// CollectionContainsFold applies the ContainsFold predicate on the "collection" field.
func CollectionContainsFold(v string) predicate.GameItem {
	return predicate.GameItem(sql.FieldContainsFold(FieldCollection, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v int) predicate.GameItem {
	return predicate.GameItem(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v int) predicate.GameItem {
	return predicate.GameItem(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...int) predicate.GameItem {
	return predicate.GameItem(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...int) predicate.GameItem {
	return predicate.GameItem(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v int) predicate.GameItem {
	return predicate.GameItem(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v int) predicate.GameItem {
	return predicate.GameItem(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v int) predicate.GameItem {
	return predicate.GameItem(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v int) predicate.GameItem {
	return predicate.GameItem(sql.FieldLTE(FieldType, v))
}

// RarityEQ applies the EQ predicate on the "rarity" field.
func RarityEQ(v int) predicate.GameItem {
	return predicate.GameItem(sql.FieldEQ(FieldRarity, v))
}

// RarityNEQ applies the NEQ predicate on the "rarity" field.
func RarityNEQ(v int) predicate.GameItem {
	return predicate.GameItem(sql.FieldNEQ(FieldRarity, v))
}

// RarityIn applies the In predicate on the "rarity" field.
func RarityIn(vs ...int) predicate.GameItem {
	return predicate.GameItem(sql.FieldIn(FieldRarity, vs...))
}

// RarityNotIn applies the NotIn predicate on the "rarity" field.
func RarityNotIn(vs ...int) predicate.GameItem {
	return predicate.GameItem(sql.FieldNotIn(FieldRarity, vs...))
}

// RarityGT applies the GT predicate on the "rarity" field.
func RarityGT(v int) predicate.GameItem {
	return predicate.GameItem(sql.FieldGT(FieldRarity, v))
}

// RarityGTE applies the GTE predicate on the "rarity" field.
func RarityGTE(v int) predicate.GameItem {
	return predicate.GameItem(sql.FieldGTE(FieldRarity, v))
}

// RarityLT applies the LT predicate on the "rarity" field.
func RarityLT(v int) predicate.GameItem {
	return predicate.GameItem(sql.FieldLT(FieldRarity, v))
}

// RarityLTE applies the LTE predicate on the "rarity" field.
func RarityLTE(v int) predicate.GameItem {
	return predicate.GameItem(sql.FieldLTE(FieldRarity, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.GameItem {
	return predicate.GameItem(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.GameItem {
	return predicate.GameItem(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.GameItem {
	return predicate.GameItem(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.GameItem {
	return predicate.GameItem(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.GameItem {
	return predicate.GameItem(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.GameItem {
	return predicate.GameItem(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.GameItem {
	return predicate.GameItem(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.GameItem {
	return predicate.GameItem(sql.FieldLTE(FieldCreatedAt, v))
}

// HasInventoryItems applies the HasEdge predicate on the "inventory_items" edge.
func HasInventoryItems() predicate.GameItem {
	return predicate.GameItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, InventoryItemsTable, InventoryItemsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInventoryItemsWith applies the HasEdge predicate on the "inventory_items" edge with a given conditions (other predicates).
func HasInventoryItemsWith(preds ...predicate.InventoryItem) predicate.GameItem {
	return predicate.GameItem(func(s *sql.Selector) {
		step := newInventoryItemsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GameItem) predicate.GameItem {
	return predicate.GameItem(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GameItem) predicate.GameItem {
	return predicate.GameItem(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GameItem) predicate.GameItem {
	return predicate.GameItem(sql.NotPredicates(p))
}
