// Code generated by ent, DO NOT EDIT.

package gameitem

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the gameitem type in the database.
	Label = "game_item"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCollection holds the string denoting the collection field in the database.
	FieldCollection = "collection"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldRarity holds the string denoting the rarity field in the database.
	FieldRarity = "rarity"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeInventoryItems holds the string denoting the inventory_items edge name in mutations.
	EdgeInventoryItems = "inventory_items"
	// Table holds the table name of the gameitem in the database.
	Table = "game_items"
	// InventoryItemsTable is the table that holds the inventory_items relation/edge.
	InventoryItemsTable = "inventory_items"
	// InventoryItemsInverseTable is the table name for the InventoryItem entity.
	// It exists in this package in order to avoid circular dependency with the "inventoryitem" package.
	InventoryItemsInverseTable = "inventory_items"
	// InventoryItemsColumn is the table column denoting the inventory_items relation/edge.
	InventoryItemsColumn = "item_id"
)

// Columns holds all SQL columns for gameitem fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldCollection,
	FieldType,
	FieldRarity,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// CollectionValidator is a validator for the "collection" field. It is called by the builders before save.
	CollectionValidator func(string) error
	// TypeValidator is a validator for the "type" field. It is called by the builders before save.
	TypeValidator func(int) error
	// RarityValidator is a validator for the "rarity" field. It is called by the builders before save.
	RarityValidator func(int) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the GameItem queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByCollection orders the results by the collection field.
func ByCollection(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCollection, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByRarity orders the results by the rarity field.
func ByRarity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRarity, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByInventoryItemsCount orders the results by inventory_items count.
func ByInventoryItemsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newInventoryItemsStep(), opts...)
	}
}

// ByInventoryItems orders the results by inventory_items terms.
func ByInventoryItems(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInventoryItemsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newInventoryItemsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InventoryItemsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, InventoryItemsTable, InventoryItemsColumn),
	)
}
