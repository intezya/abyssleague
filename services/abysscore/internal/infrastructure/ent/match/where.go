// Code generated by ent, DO NOT EDIT.

package match

import (
	"abysscore/internal/infrastructure/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Match {
	return predicate.Match(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Match {
	return predicate.Match(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Match {
	return predicate.Match(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Match {
	return predicate.Match(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Match {
	return predicate.Match(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Match {
	return predicate.Match(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Match {
	return predicate.Match(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Match {
	return predicate.Match(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Match {
	return predicate.Match(sql.FieldLTE(FieldID, id))
}

// Player1ID applies equality check predicate on the "player1_id" field. It's identical to Player1IDEQ.
func Player1ID(v int) predicate.Match {
	return predicate.Match(sql.FieldEQ(FieldPlayer1ID, v))
}

// Player2ID applies equality check predicate on the "player2_id" field. It's identical to Player2IDEQ.
func Player2ID(v int) predicate.Match {
	return predicate.Match(sql.FieldEQ(FieldPlayer2ID, v))
}

// Player1PenaltyTime applies equality check predicate on the "player1_penalty_time" field. It's identical to Player1PenaltyTimeEQ.
func Player1PenaltyTime(v int) predicate.Match {
	return predicate.Match(sql.FieldEQ(FieldPlayer1PenaltyTime, v))
}

// Player2PenaltyTime applies equality check predicate on the "player2_penalty_time" field. It's identical to Player2PenaltyTimeEQ.
func Player2PenaltyTime(v int) predicate.Match {
	return predicate.Match(sql.FieldEQ(FieldPlayer2PenaltyTime, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Match {
	return predicate.Match(sql.FieldEQ(FieldCreatedAt, v))
}

// ChangedToCurrentStatusAt applies equality check predicate on the "changed_to_current_status_at" field. It's identical to ChangedToCurrentStatusAtEQ.
func ChangedToCurrentStatusAt(v time.Time) predicate.Match {
	return predicate.Match(sql.FieldEQ(FieldChangedToCurrentStatusAt, v))
}

// Player1IDEQ applies the EQ predicate on the "player1_id" field.
func Player1IDEQ(v int) predicate.Match {
	return predicate.Match(sql.FieldEQ(FieldPlayer1ID, v))
}

// Player1IDNEQ applies the NEQ predicate on the "player1_id" field.
func Player1IDNEQ(v int) predicate.Match {
	return predicate.Match(sql.FieldNEQ(FieldPlayer1ID, v))
}

// Player1IDIn applies the In predicate on the "player1_id" field.
func Player1IDIn(vs ...int) predicate.Match {
	return predicate.Match(sql.FieldIn(FieldPlayer1ID, vs...))
}

// Player1IDNotIn applies the NotIn predicate on the "player1_id" field.
func Player1IDNotIn(vs ...int) predicate.Match {
	return predicate.Match(sql.FieldNotIn(FieldPlayer1ID, vs...))
}

// Player2IDEQ applies the EQ predicate on the "player2_id" field.
func Player2IDEQ(v int) predicate.Match {
	return predicate.Match(sql.FieldEQ(FieldPlayer2ID, v))
}

// Player2IDNEQ applies the NEQ predicate on the "player2_id" field.
func Player2IDNEQ(v int) predicate.Match {
	return predicate.Match(sql.FieldNEQ(FieldPlayer2ID, v))
}

// Player2IDIn applies the In predicate on the "player2_id" field.
func Player2IDIn(vs ...int) predicate.Match {
	return predicate.Match(sql.FieldIn(FieldPlayer2ID, vs...))
}

// Player2IDNotIn applies the NotIn predicate on the "player2_id" field.
func Player2IDNotIn(vs ...int) predicate.Match {
	return predicate.Match(sql.FieldNotIn(FieldPlayer2ID, vs...))
}

// Player1PenaltyTimeEQ applies the EQ predicate on the "player1_penalty_time" field.
func Player1PenaltyTimeEQ(v int) predicate.Match {
	return predicate.Match(sql.FieldEQ(FieldPlayer1PenaltyTime, v))
}

// Player1PenaltyTimeNEQ applies the NEQ predicate on the "player1_penalty_time" field.
func Player1PenaltyTimeNEQ(v int) predicate.Match {
	return predicate.Match(sql.FieldNEQ(FieldPlayer1PenaltyTime, v))
}

// Player1PenaltyTimeIn applies the In predicate on the "player1_penalty_time" field.
func Player1PenaltyTimeIn(vs ...int) predicate.Match {
	return predicate.Match(sql.FieldIn(FieldPlayer1PenaltyTime, vs...))
}

// Player1PenaltyTimeNotIn applies the NotIn predicate on the "player1_penalty_time" field.
func Player1PenaltyTimeNotIn(vs ...int) predicate.Match {
	return predicate.Match(sql.FieldNotIn(FieldPlayer1PenaltyTime, vs...))
}

// Player1PenaltyTimeGT applies the GT predicate on the "player1_penalty_time" field.
func Player1PenaltyTimeGT(v int) predicate.Match {
	return predicate.Match(sql.FieldGT(FieldPlayer1PenaltyTime, v))
}

// Player1PenaltyTimeGTE applies the GTE predicate on the "player1_penalty_time" field.
func Player1PenaltyTimeGTE(v int) predicate.Match {
	return predicate.Match(sql.FieldGTE(FieldPlayer1PenaltyTime, v))
}

// Player1PenaltyTimeLT applies the LT predicate on the "player1_penalty_time" field.
func Player1PenaltyTimeLT(v int) predicate.Match {
	return predicate.Match(sql.FieldLT(FieldPlayer1PenaltyTime, v))
}

// Player1PenaltyTimeLTE applies the LTE predicate on the "player1_penalty_time" field.
func Player1PenaltyTimeLTE(v int) predicate.Match {
	return predicate.Match(sql.FieldLTE(FieldPlayer1PenaltyTime, v))
}

// Player2PenaltyTimeEQ applies the EQ predicate on the "player2_penalty_time" field.
func Player2PenaltyTimeEQ(v int) predicate.Match {
	return predicate.Match(sql.FieldEQ(FieldPlayer2PenaltyTime, v))
}

// Player2PenaltyTimeNEQ applies the NEQ predicate on the "player2_penalty_time" field.
func Player2PenaltyTimeNEQ(v int) predicate.Match {
	return predicate.Match(sql.FieldNEQ(FieldPlayer2PenaltyTime, v))
}

// Player2PenaltyTimeIn applies the In predicate on the "player2_penalty_time" field.
func Player2PenaltyTimeIn(vs ...int) predicate.Match {
	return predicate.Match(sql.FieldIn(FieldPlayer2PenaltyTime, vs...))
}

// Player2PenaltyTimeNotIn applies the NotIn predicate on the "player2_penalty_time" field.
func Player2PenaltyTimeNotIn(vs ...int) predicate.Match {
	return predicate.Match(sql.FieldNotIn(FieldPlayer2PenaltyTime, vs...))
}

// Player2PenaltyTimeGT applies the GT predicate on the "player2_penalty_time" field.
func Player2PenaltyTimeGT(v int) predicate.Match {
	return predicate.Match(sql.FieldGT(FieldPlayer2PenaltyTime, v))
}

// Player2PenaltyTimeGTE applies the GTE predicate on the "player2_penalty_time" field.
func Player2PenaltyTimeGTE(v int) predicate.Match {
	return predicate.Match(sql.FieldGTE(FieldPlayer2PenaltyTime, v))
}

// Player2PenaltyTimeLT applies the LT predicate on the "player2_penalty_time" field.
func Player2PenaltyTimeLT(v int) predicate.Match {
	return predicate.Match(sql.FieldLT(FieldPlayer2PenaltyTime, v))
}

// Player2PenaltyTimeLTE applies the LTE predicate on the "player2_penalty_time" field.
func Player2PenaltyTimeLTE(v int) predicate.Match {
	return predicate.Match(sql.FieldLTE(FieldPlayer2PenaltyTime, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Match {
	return predicate.Match(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Match {
	return predicate.Match(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Match {
	return predicate.Match(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Match {
	return predicate.Match(sql.FieldNotIn(FieldStatus, vs...))
}

// ResultEQ applies the EQ predicate on the "result" field.
func ResultEQ(v Result) predicate.Match {
	return predicate.Match(sql.FieldEQ(FieldResult, v))
}

// ResultNEQ applies the NEQ predicate on the "result" field.
func ResultNEQ(v Result) predicate.Match {
	return predicate.Match(sql.FieldNEQ(FieldResult, v))
}

// ResultIn applies the In predicate on the "result" field.
func ResultIn(vs ...Result) predicate.Match {
	return predicate.Match(sql.FieldIn(FieldResult, vs...))
}

// ResultNotIn applies the NotIn predicate on the "result" field.
func ResultNotIn(vs ...Result) predicate.Match {
	return predicate.Match(sql.FieldNotIn(FieldResult, vs...))
}

// ResultIsNil applies the IsNil predicate on the "result" field.
func ResultIsNil() predicate.Match {
	return predicate.Match(sql.FieldIsNull(FieldResult))
}

// ResultNotNil applies the NotNil predicate on the "result" field.
func ResultNotNil() predicate.Match {
	return predicate.Match(sql.FieldNotNull(FieldResult))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Match {
	return predicate.Match(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Match {
	return predicate.Match(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Match {
	return predicate.Match(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Match {
	return predicate.Match(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Match {
	return predicate.Match(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Match {
	return predicate.Match(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Match {
	return predicate.Match(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Match {
	return predicate.Match(sql.FieldLTE(FieldCreatedAt, v))
}

// ChangedToCurrentStatusAtEQ applies the EQ predicate on the "changed_to_current_status_at" field.
func ChangedToCurrentStatusAtEQ(v time.Time) predicate.Match {
	return predicate.Match(sql.FieldEQ(FieldChangedToCurrentStatusAt, v))
}

// ChangedToCurrentStatusAtNEQ applies the NEQ predicate on the "changed_to_current_status_at" field.
func ChangedToCurrentStatusAtNEQ(v time.Time) predicate.Match {
	return predicate.Match(sql.FieldNEQ(FieldChangedToCurrentStatusAt, v))
}

// ChangedToCurrentStatusAtIn applies the In predicate on the "changed_to_current_status_at" field.
func ChangedToCurrentStatusAtIn(vs ...time.Time) predicate.Match {
	return predicate.Match(sql.FieldIn(FieldChangedToCurrentStatusAt, vs...))
}

// ChangedToCurrentStatusAtNotIn applies the NotIn predicate on the "changed_to_current_status_at" field.
func ChangedToCurrentStatusAtNotIn(vs ...time.Time) predicate.Match {
	return predicate.Match(sql.FieldNotIn(FieldChangedToCurrentStatusAt, vs...))
}

// ChangedToCurrentStatusAtGT applies the GT predicate on the "changed_to_current_status_at" field.
func ChangedToCurrentStatusAtGT(v time.Time) predicate.Match {
	return predicate.Match(sql.FieldGT(FieldChangedToCurrentStatusAt, v))
}

// ChangedToCurrentStatusAtGTE applies the GTE predicate on the "changed_to_current_status_at" field.
func ChangedToCurrentStatusAtGTE(v time.Time) predicate.Match {
	return predicate.Match(sql.FieldGTE(FieldChangedToCurrentStatusAt, v))
}

// ChangedToCurrentStatusAtLT applies the LT predicate on the "changed_to_current_status_at" field.
func ChangedToCurrentStatusAtLT(v time.Time) predicate.Match {
	return predicate.Match(sql.FieldLT(FieldChangedToCurrentStatusAt, v))
}

// ChangedToCurrentStatusAtLTE applies the LTE predicate on the "changed_to_current_status_at" field.
func ChangedToCurrentStatusAtLTE(v time.Time) predicate.Match {
	return predicate.Match(sql.FieldLTE(FieldChangedToCurrentStatusAt, v))
}

// HasPlayer1 applies the HasEdge predicate on the "player1" edge.
func HasPlayer1() predicate.Match {
	return predicate.Match(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, Player1Table, Player1Column),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlayer1With applies the HasEdge predicate on the "player1" edge with a given conditions (other predicates).
func HasPlayer1With(preds ...predicate.User) predicate.Match {
	return predicate.Match(func(s *sql.Selector) {
		step := newPlayer1Step()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPlayer2 applies the HasEdge predicate on the "player2" edge.
func HasPlayer2() predicate.Match {
	return predicate.Match(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, Player2Table, Player2Column),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlayer2With applies the HasEdge predicate on the "player2" edge with a given conditions (other predicates).
func HasPlayer2With(preds ...predicate.User) predicate.Match {
	return predicate.Match(func(s *sql.Selector) {
		step := newPlayer2Step()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasResults applies the HasEdge predicate on the "results" edge.
func HasResults() predicate.Match {
	return predicate.Match(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ResultsTable, ResultsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasResultsWith applies the HasEdge predicate on the "results" edge with a given conditions (other predicates).
func HasResultsWith(preds ...predicate.PlayerMatchResult) predicate.Match {
	return predicate.Match(func(s *sql.Selector) {
		step := newResultsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Match) predicate.Match {
	return predicate.Match(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Match) predicate.Match {
	return predicate.Match(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Match) predicate.Match {
	return predicate.Match(sql.NotPredicates(p))
}
