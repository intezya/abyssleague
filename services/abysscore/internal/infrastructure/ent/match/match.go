// Code generated by ent, DO NOT EDIT.

package match

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the match type in the database.
	Label = "match"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPlayer1ID holds the string denoting the player1_id field in the database.
	FieldPlayer1ID = "player1_id"
	// FieldPlayer2ID holds the string denoting the player2_id field in the database.
	FieldPlayer2ID = "player2_id"
	// FieldPlayer1PenaltyTime holds the string denoting the player1_penalty_time field in the database.
	FieldPlayer1PenaltyTime = "player1_penalty_time"
	// FieldPlayer2PenaltyTime holds the string denoting the player2_penalty_time field in the database.
	FieldPlayer2PenaltyTime = "player2_penalty_time"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldResult holds the string denoting the result field in the database.
	FieldResult = "result"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldChangedToCurrentStatusAt holds the string denoting the changed_to_current_status_at field in the database.
	FieldChangedToCurrentStatusAt = "changed_to_current_status_at"
	// EdgePlayer1 holds the string denoting the player1 edge name in mutations.
	EdgePlayer1 = "player1"
	// EdgePlayer2 holds the string denoting the player2 edge name in mutations.
	EdgePlayer2 = "player2"
	// EdgeResults holds the string denoting the results edge name in mutations.
	EdgeResults = "results"
	// Table holds the table name of the match in the database.
	Table = "matches"
	// Player1Table is the table that holds the player1 relation/edge.
	Player1Table = "matches"
	// Player1InverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	Player1InverseTable = "users"
	// Player1Column is the table column denoting the player1 relation/edge.
	Player1Column = "player1_id"
	// Player2Table is the table that holds the player2 relation/edge.
	Player2Table = "matches"
	// Player2InverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	Player2InverseTable = "users"
	// Player2Column is the table column denoting the player2 relation/edge.
	Player2Column = "player2_id"
	// ResultsTable is the table that holds the results relation/edge.
	ResultsTable = "player_match_results"
	// ResultsInverseTable is the table name for the PlayerMatchResult entity.
	// It exists in this package in order to avoid circular dependency with the "playermatchresult" package.
	ResultsInverseTable = "player_match_results"
	// ResultsColumn is the table column denoting the results relation/edge.
	ResultsColumn = "match_id"
)

// Columns holds all SQL columns for match fields.
var Columns = []string{
	FieldID,
	FieldPlayer1ID,
	FieldPlayer2ID,
	FieldPlayer1PenaltyTime,
	FieldPlayer2PenaltyTime,
	FieldStatus,
	FieldResult,
	FieldCreatedAt,
	FieldChangedToCurrentStatusAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultPlayer1PenaltyTime holds the default value on creation for the "player1_penalty_time" field.
	DefaultPlayer1PenaltyTime int
	// Player1PenaltyTimeValidator is a validator for the "player1_penalty_time" field. It is called by the builders before save.
	Player1PenaltyTimeValidator func(int) error
	// DefaultPlayer2PenaltyTime holds the default value on creation for the "player2_penalty_time" field.
	DefaultPlayer2PenaltyTime int
	// Player2PenaltyTimeValidator is a validator for the "player2_penalty_time" field. It is called by the builders before save.
	Player2PenaltyTimeValidator func(int) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultChangedToCurrentStatusAt holds the default value on creation for the "changed_to_current_status_at" field.
	DefaultChangedToCurrentStatusAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// StatusCharactersReveal is the default value of the Status enum.
const DefaultStatus = StatusCharactersReveal

// Status values.
const (
	StatusCharactersReveal Status = "characters_reveal"
	StatusWaitingForReady  Status = "waiting_for_ready"
	StatusDrafting         Status = "drafting"
	StatusMatching         Status = "matching"
	StatusFinished         Status = "finished"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusCharactersReveal, StatusWaitingForReady, StatusDrafting, StatusMatching, StatusFinished:
		return nil
	default:
		return fmt.Errorf("match: invalid enum value for status field: %q", s)
	}
}

// Result defines the type for the "result" enum field.
type Result string

// Result values.
const (
	ResultPlayer1Win Result = "player1_win"
	ResultPlayer2Win Result = "player2_win"
	ResultDraw       Result = "draw"
)

func (r Result) String() string {
	return string(r)
}

// ResultValidator is a validator for the "result" field enum values. It is called by the builders before save.
func ResultValidator(r Result) error {
	switch r {
	case ResultPlayer1Win, ResultPlayer2Win, ResultDraw:
		return nil
	default:
		return fmt.Errorf("match: invalid enum value for result field: %q", r)
	}
}

// OrderOption defines the ordering options for the Match queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPlayer1ID orders the results by the player1_id field.
func ByPlayer1ID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlayer1ID, opts...).ToFunc()
}

// ByPlayer2ID orders the results by the player2_id field.
func ByPlayer2ID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlayer2ID, opts...).ToFunc()
}

// ByPlayer1PenaltyTime orders the results by the player1_penalty_time field.
func ByPlayer1PenaltyTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlayer1PenaltyTime, opts...).ToFunc()
}

// ByPlayer2PenaltyTime orders the results by the player2_penalty_time field.
func ByPlayer2PenaltyTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlayer2PenaltyTime, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByResult orders the results by the result field.
func ByResult(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResult, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByChangedToCurrentStatusAt orders the results by the changed_to_current_status_at field.
func ByChangedToCurrentStatusAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChangedToCurrentStatusAt, opts...).ToFunc()
}

// ByPlayer1Field orders the results by player1 field.
func ByPlayer1Field(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlayer1Step(), sql.OrderByField(field, opts...))
	}
}

// ByPlayer2Field orders the results by player2 field.
func ByPlayer2Field(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlayer2Step(), sql.OrderByField(field, opts...))
	}
}

// ByResultsCount orders the results by results count.
func ByResultsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newResultsStep(), opts...)
	}
}

// ByResults orders the results by results terms.
func ByResults(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newResultsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPlayer1Step() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Player1InverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, Player1Table, Player1Column),
	)
}
func newPlayer2Step() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Player2InverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, Player2Table, Player2Column),
	)
}
func newResultsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ResultsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ResultsTable, ResultsColumn),
	)
}
