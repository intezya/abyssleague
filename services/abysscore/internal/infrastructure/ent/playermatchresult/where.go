// Code generated by ent, DO NOT EDIT.

package playermatchresult

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/intezya/abyssleague/services/abysscore/internal/infrastructure/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PlayerMatchResult {
	return predicate.PlayerMatchResult(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PlayerMatchResult {
	return predicate.PlayerMatchResult(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PlayerMatchResult {
	return predicate.PlayerMatchResult(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PlayerMatchResult {
	return predicate.PlayerMatchResult(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PlayerMatchResult {
	return predicate.PlayerMatchResult(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PlayerMatchResult {
	return predicate.PlayerMatchResult(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PlayerMatchResult {
	return predicate.PlayerMatchResult(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PlayerMatchResult {
	return predicate.PlayerMatchResult(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PlayerMatchResult {
	return predicate.PlayerMatchResult(sql.FieldLTE(FieldID, id))
}

// MatchID applies equality check predicate on the "match_id" field. It's identical to MatchIDEQ.
func MatchID(v int) predicate.PlayerMatchResult {
	return predicate.PlayerMatchResult(sql.FieldEQ(FieldMatchID, v))
}

// PlayerID applies equality check predicate on the "player_id" field. It's identical to PlayerIDEQ.
func PlayerID(v int) predicate.PlayerMatchResult {
	return predicate.PlayerMatchResult(sql.FieldEQ(FieldPlayerID, v))
}

// Score applies equality check predicate on the "score" field. It's identical to ScoreEQ.
func Score(v int) predicate.PlayerMatchResult {
	return predicate.PlayerMatchResult(sql.FieldEQ(FieldScore, v))
}

// IsRetried applies equality check predicate on the "is_retried" field. It's identical to IsRetriedEQ.
func IsRetried(v bool) predicate.PlayerMatchResult {
	return predicate.PlayerMatchResult(sql.FieldEQ(FieldIsRetried, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PlayerMatchResult {
	return predicate.PlayerMatchResult(sql.FieldEQ(FieldCreatedAt, v))
}

// MatchIDEQ applies the EQ predicate on the "match_id" field.
func MatchIDEQ(v int) predicate.PlayerMatchResult {
	return predicate.PlayerMatchResult(sql.FieldEQ(FieldMatchID, v))
}

// MatchIDNEQ applies the NEQ predicate on the "match_id" field.
func MatchIDNEQ(v int) predicate.PlayerMatchResult {
	return predicate.PlayerMatchResult(sql.FieldNEQ(FieldMatchID, v))
}

// MatchIDIn applies the In predicate on the "match_id" field.
func MatchIDIn(vs ...int) predicate.PlayerMatchResult {
	return predicate.PlayerMatchResult(sql.FieldIn(FieldMatchID, vs...))
}

// MatchIDNotIn applies the NotIn predicate on the "match_id" field.
func MatchIDNotIn(vs ...int) predicate.PlayerMatchResult {
	return predicate.PlayerMatchResult(sql.FieldNotIn(FieldMatchID, vs...))
}

// PlayerIDEQ applies the EQ predicate on the "player_id" field.
func PlayerIDEQ(v int) predicate.PlayerMatchResult {
	return predicate.PlayerMatchResult(sql.FieldEQ(FieldPlayerID, v))
}

// PlayerIDNEQ applies the NEQ predicate on the "player_id" field.
func PlayerIDNEQ(v int) predicate.PlayerMatchResult {
	return predicate.PlayerMatchResult(sql.FieldNEQ(FieldPlayerID, v))
}

// PlayerIDIn applies the In predicate on the "player_id" field.
func PlayerIDIn(vs ...int) predicate.PlayerMatchResult {
	return predicate.PlayerMatchResult(sql.FieldIn(FieldPlayerID, vs...))
}

// PlayerIDNotIn applies the NotIn predicate on the "player_id" field.
func PlayerIDNotIn(vs ...int) predicate.PlayerMatchResult {
	return predicate.PlayerMatchResult(sql.FieldNotIn(FieldPlayerID, vs...))
}

// ScoreEQ applies the EQ predicate on the "score" field.
func ScoreEQ(v int) predicate.PlayerMatchResult {
	return predicate.PlayerMatchResult(sql.FieldEQ(FieldScore, v))
}

// ScoreNEQ applies the NEQ predicate on the "score" field.
func ScoreNEQ(v int) predicate.PlayerMatchResult {
	return predicate.PlayerMatchResult(sql.FieldNEQ(FieldScore, v))
}

// ScoreIn applies the In predicate on the "score" field.
func ScoreIn(vs ...int) predicate.PlayerMatchResult {
	return predicate.PlayerMatchResult(sql.FieldIn(FieldScore, vs...))
}

// ScoreNotIn applies the NotIn predicate on the "score" field.
func ScoreNotIn(vs ...int) predicate.PlayerMatchResult {
	return predicate.PlayerMatchResult(sql.FieldNotIn(FieldScore, vs...))
}

// ScoreGT applies the GT predicate on the "score" field.
func ScoreGT(v int) predicate.PlayerMatchResult {
	return predicate.PlayerMatchResult(sql.FieldGT(FieldScore, v))
}

// ScoreGTE applies the GTE predicate on the "score" field.
func ScoreGTE(v int) predicate.PlayerMatchResult {
	return predicate.PlayerMatchResult(sql.FieldGTE(FieldScore, v))
}

// ScoreLT applies the LT predicate on the "score" field.
func ScoreLT(v int) predicate.PlayerMatchResult {
	return predicate.PlayerMatchResult(sql.FieldLT(FieldScore, v))
}

// ScoreLTE applies the LTE predicate on the "score" field.
func ScoreLTE(v int) predicate.PlayerMatchResult {
	return predicate.PlayerMatchResult(sql.FieldLTE(FieldScore, v))
}

// IsRetriedEQ applies the EQ predicate on the "is_retried" field.
func IsRetriedEQ(v bool) predicate.PlayerMatchResult {
	return predicate.PlayerMatchResult(sql.FieldEQ(FieldIsRetried, v))
}

// IsRetriedNEQ applies the NEQ predicate on the "is_retried" field.
func IsRetriedNEQ(v bool) predicate.PlayerMatchResult {
	return predicate.PlayerMatchResult(sql.FieldNEQ(FieldIsRetried, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PlayerMatchResult {
	return predicate.PlayerMatchResult(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PlayerMatchResult {
	return predicate.PlayerMatchResult(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PlayerMatchResult {
	return predicate.PlayerMatchResult(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PlayerMatchResult {
	return predicate.PlayerMatchResult(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PlayerMatchResult {
	return predicate.PlayerMatchResult(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PlayerMatchResult {
	return predicate.PlayerMatchResult(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PlayerMatchResult {
	return predicate.PlayerMatchResult(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PlayerMatchResult {
	return predicate.PlayerMatchResult(sql.FieldLTE(FieldCreatedAt, v))
}

// HasMatch applies the HasEdge predicate on the "match" edge.
func HasMatch() predicate.PlayerMatchResult {
	return predicate.PlayerMatchResult(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MatchTable, MatchColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMatchWith applies the HasEdge predicate on the "match" edge with a given conditions (other predicates).
func HasMatchWith(preds ...predicate.Match) predicate.PlayerMatchResult {
	return predicate.PlayerMatchResult(func(s *sql.Selector) {
		step := newMatchStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.PlayerMatchResult {
	return predicate.PlayerMatchResult(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.PlayerMatchResult {
	return predicate.PlayerMatchResult(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PlayerMatchResult) predicate.PlayerMatchResult {
	return predicate.PlayerMatchResult(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PlayerMatchResult) predicate.PlayerMatchResult {
	return predicate.PlayerMatchResult(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PlayerMatchResult) predicate.PlayerMatchResult {
	return predicate.PlayerMatchResult(sql.NotPredicates(p))
}
