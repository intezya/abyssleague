// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"abysscore/internal/infrastructure/ent/migrate"

	"abysscore/internal/infrastructure/ent/friendrequest"
	"abysscore/internal/infrastructure/ent/gameitem"
	"abysscore/internal/infrastructure/ent/inventoryitem"
	"abysscore/internal/infrastructure/ent/match"
	"abysscore/internal/infrastructure/ent/matchresult"
	"abysscore/internal/infrastructure/ent/statistic"
	"abysscore/internal/infrastructure/ent/user"
	"abysscore/internal/infrastructure/ent/userbalance"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// FriendRequest is the client for interacting with the FriendRequest builders.
	FriendRequest *FriendRequestClient
	// GameItem is the client for interacting with the GameItem builders.
	GameItem *GameItemClient
	// InventoryItem is the client for interacting with the InventoryItem builders.
	InventoryItem *InventoryItemClient
	// Match is the client for interacting with the Match builders.
	Match *MatchClient
	// MatchResult is the client for interacting with the MatchResult builders.
	MatchResult *MatchResultClient
	// Statistic is the client for interacting with the Statistic builders.
	Statistic *StatisticClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserBalance is the client for interacting with the UserBalance builders.
	UserBalance *UserBalanceClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.FriendRequest = NewFriendRequestClient(c.config)
	c.GameItem = NewGameItemClient(c.config)
	c.InventoryItem = NewInventoryItemClient(c.config)
	c.Match = NewMatchClient(c.config)
	c.MatchResult = NewMatchResultClient(c.config)
	c.Statistic = NewStatisticClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserBalance = NewUserBalanceClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		FriendRequest: NewFriendRequestClient(cfg),
		GameItem:      NewGameItemClient(cfg),
		InventoryItem: NewInventoryItemClient(cfg),
		Match:         NewMatchClient(cfg),
		MatchResult:   NewMatchResultClient(cfg),
		Statistic:     NewStatisticClient(cfg),
		User:          NewUserClient(cfg),
		UserBalance:   NewUserBalanceClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		FriendRequest: NewFriendRequestClient(cfg),
		GameItem:      NewGameItemClient(cfg),
		InventoryItem: NewInventoryItemClient(cfg),
		Match:         NewMatchClient(cfg),
		MatchResult:   NewMatchResultClient(cfg),
		Statistic:     NewStatisticClient(cfg),
		User:          NewUserClient(cfg),
		UserBalance:   NewUserBalanceClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		FriendRequest.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.FriendRequest, c.GameItem, c.InventoryItem, c.Match, c.MatchResult,
		c.Statistic, c.User, c.UserBalance,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.FriendRequest, c.GameItem, c.InventoryItem, c.Match, c.MatchResult,
		c.Statistic, c.User, c.UserBalance,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *FriendRequestMutation:
		return c.FriendRequest.mutate(ctx, m)
	case *GameItemMutation:
		return c.GameItem.mutate(ctx, m)
	case *InventoryItemMutation:
		return c.InventoryItem.mutate(ctx, m)
	case *MatchMutation:
		return c.Match.mutate(ctx, m)
	case *MatchResultMutation:
		return c.MatchResult.mutate(ctx, m)
	case *StatisticMutation:
		return c.Statistic.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *UserBalanceMutation:
		return c.UserBalance.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// FriendRequestClient is a client for the FriendRequest schema.
type FriendRequestClient struct {
	config
}

// NewFriendRequestClient returns a client for the FriendRequest from the given config.
func NewFriendRequestClient(c config) *FriendRequestClient {
	return &FriendRequestClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `friendrequest.Hooks(f(g(h())))`.
func (c *FriendRequestClient) Use(hooks ...Hook) {
	c.hooks.FriendRequest = append(c.hooks.FriendRequest, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `friendrequest.Intercept(f(g(h())))`.
func (c *FriendRequestClient) Intercept(interceptors ...Interceptor) {
	c.inters.FriendRequest = append(c.inters.FriendRequest, interceptors...)
}

// Create returns a builder for creating a FriendRequest entity.
func (c *FriendRequestClient) Create() *FriendRequestCreate {
	mutation := newFriendRequestMutation(c.config, OpCreate)
	return &FriendRequestCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FriendRequest entities.
func (c *FriendRequestClient) CreateBulk(builders ...*FriendRequestCreate) *FriendRequestCreateBulk {
	return &FriendRequestCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FriendRequestClient) MapCreateBulk(slice any, setFunc func(*FriendRequestCreate, int)) *FriendRequestCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FriendRequestCreateBulk{err: fmt.Errorf("calling to FriendRequestClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FriendRequestCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FriendRequestCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FriendRequest.
func (c *FriendRequestClient) Update() *FriendRequestUpdate {
	mutation := newFriendRequestMutation(c.config, OpUpdate)
	return &FriendRequestUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FriendRequestClient) UpdateOne(fr *FriendRequest) *FriendRequestUpdateOne {
	mutation := newFriendRequestMutation(c.config, OpUpdateOne, withFriendRequest(fr))
	return &FriendRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FriendRequestClient) UpdateOneID(id int) *FriendRequestUpdateOne {
	mutation := newFriendRequestMutation(c.config, OpUpdateOne, withFriendRequestID(id))
	return &FriendRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FriendRequest.
func (c *FriendRequestClient) Delete() *FriendRequestDelete {
	mutation := newFriendRequestMutation(c.config, OpDelete)
	return &FriendRequestDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FriendRequestClient) DeleteOne(fr *FriendRequest) *FriendRequestDeleteOne {
	return c.DeleteOneID(fr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FriendRequestClient) DeleteOneID(id int) *FriendRequestDeleteOne {
	builder := c.Delete().Where(friendrequest.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FriendRequestDeleteOne{builder}
}

// Query returns a query builder for FriendRequest.
func (c *FriendRequestClient) Query() *FriendRequestQuery {
	return &FriendRequestQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFriendRequest},
		inters: c.Interceptors(),
	}
}

// Get returns a FriendRequest entity by its id.
func (c *FriendRequestClient) Get(ctx context.Context, id int) (*FriendRequest, error) {
	return c.Query().Where(friendrequest.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FriendRequestClient) GetX(ctx context.Context, id int) *FriendRequest {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFromUser queries the from_user edge of a FriendRequest.
func (c *FriendRequestClient) QueryFromUser(fr *FriendRequest) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(friendrequest.Table, friendrequest.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, friendrequest.FromUserTable, friendrequest.FromUserColumn),
		)
		fromV = sqlgraph.Neighbors(fr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryToUser queries the to_user edge of a FriendRequest.
func (c *FriendRequestClient) QueryToUser(fr *FriendRequest) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(friendrequest.Table, friendrequest.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, friendrequest.ToUserTable, friendrequest.ToUserColumn),
		)
		fromV = sqlgraph.Neighbors(fr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FriendRequestClient) Hooks() []Hook {
	return c.hooks.FriendRequest
}

// Interceptors returns the client interceptors.
func (c *FriendRequestClient) Interceptors() []Interceptor {
	return c.inters.FriendRequest
}

func (c *FriendRequestClient) mutate(ctx context.Context, m *FriendRequestMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FriendRequestCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FriendRequestUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FriendRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FriendRequestDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown FriendRequest mutation op: %q", m.Op())
	}
}

// GameItemClient is a client for the GameItem schema.
type GameItemClient struct {
	config
}

// NewGameItemClient returns a client for the GameItem from the given config.
func NewGameItemClient(c config) *GameItemClient {
	return &GameItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `gameitem.Hooks(f(g(h())))`.
func (c *GameItemClient) Use(hooks ...Hook) {
	c.hooks.GameItem = append(c.hooks.GameItem, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `gameitem.Intercept(f(g(h())))`.
func (c *GameItemClient) Intercept(interceptors ...Interceptor) {
	c.inters.GameItem = append(c.inters.GameItem, interceptors...)
}

// Create returns a builder for creating a GameItem entity.
func (c *GameItemClient) Create() *GameItemCreate {
	mutation := newGameItemMutation(c.config, OpCreate)
	return &GameItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GameItem entities.
func (c *GameItemClient) CreateBulk(builders ...*GameItemCreate) *GameItemCreateBulk {
	return &GameItemCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *GameItemClient) MapCreateBulk(slice any, setFunc func(*GameItemCreate, int)) *GameItemCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &GameItemCreateBulk{err: fmt.Errorf("calling to GameItemClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*GameItemCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &GameItemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GameItem.
func (c *GameItemClient) Update() *GameItemUpdate {
	mutation := newGameItemMutation(c.config, OpUpdate)
	return &GameItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GameItemClient) UpdateOne(gi *GameItem) *GameItemUpdateOne {
	mutation := newGameItemMutation(c.config, OpUpdateOne, withGameItem(gi))
	return &GameItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GameItemClient) UpdateOneID(id int) *GameItemUpdateOne {
	mutation := newGameItemMutation(c.config, OpUpdateOne, withGameItemID(id))
	return &GameItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GameItem.
func (c *GameItemClient) Delete() *GameItemDelete {
	mutation := newGameItemMutation(c.config, OpDelete)
	return &GameItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GameItemClient) DeleteOne(gi *GameItem) *GameItemDeleteOne {
	return c.DeleteOneID(gi.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GameItemClient) DeleteOneID(id int) *GameItemDeleteOne {
	builder := c.Delete().Where(gameitem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GameItemDeleteOne{builder}
}

// Query returns a query builder for GameItem.
func (c *GameItemClient) Query() *GameItemQuery {
	return &GameItemQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGameItem},
		inters: c.Interceptors(),
	}
}

// Get returns a GameItem entity by its id.
func (c *GameItemClient) Get(ctx context.Context, id int) (*GameItem, error) {
	return c.Query().Where(gameitem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GameItemClient) GetX(ctx context.Context, id int) *GameItem {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryInventoryItems queries the inventory_items edge of a GameItem.
func (c *GameItemClient) QueryInventoryItems(gi *GameItem) *InventoryItemQuery {
	query := (&InventoryItemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(gameitem.Table, gameitem.FieldID, id),
			sqlgraph.To(inventoryitem.Table, inventoryitem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, gameitem.InventoryItemsTable, gameitem.InventoryItemsColumn),
		)
		fromV = sqlgraph.Neighbors(gi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GameItemClient) Hooks() []Hook {
	return c.hooks.GameItem
}

// Interceptors returns the client interceptors.
func (c *GameItemClient) Interceptors() []Interceptor {
	return c.inters.GameItem
}

func (c *GameItemClient) mutate(ctx context.Context, m *GameItemMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GameItemCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GameItemUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GameItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GameItemDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown GameItem mutation op: %q", m.Op())
	}
}

// InventoryItemClient is a client for the InventoryItem schema.
type InventoryItemClient struct {
	config
}

// NewInventoryItemClient returns a client for the InventoryItem from the given config.
func NewInventoryItemClient(c config) *InventoryItemClient {
	return &InventoryItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `inventoryitem.Hooks(f(g(h())))`.
func (c *InventoryItemClient) Use(hooks ...Hook) {
	c.hooks.InventoryItem = append(c.hooks.InventoryItem, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `inventoryitem.Intercept(f(g(h())))`.
func (c *InventoryItemClient) Intercept(interceptors ...Interceptor) {
	c.inters.InventoryItem = append(c.inters.InventoryItem, interceptors...)
}

// Create returns a builder for creating a InventoryItem entity.
func (c *InventoryItemClient) Create() *InventoryItemCreate {
	mutation := newInventoryItemMutation(c.config, OpCreate)
	return &InventoryItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of InventoryItem entities.
func (c *InventoryItemClient) CreateBulk(builders ...*InventoryItemCreate) *InventoryItemCreateBulk {
	return &InventoryItemCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *InventoryItemClient) MapCreateBulk(slice any, setFunc func(*InventoryItemCreate, int)) *InventoryItemCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &InventoryItemCreateBulk{err: fmt.Errorf("calling to InventoryItemClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*InventoryItemCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &InventoryItemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for InventoryItem.
func (c *InventoryItemClient) Update() *InventoryItemUpdate {
	mutation := newInventoryItemMutation(c.config, OpUpdate)
	return &InventoryItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InventoryItemClient) UpdateOne(ii *InventoryItem) *InventoryItemUpdateOne {
	mutation := newInventoryItemMutation(c.config, OpUpdateOne, withInventoryItem(ii))
	return &InventoryItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InventoryItemClient) UpdateOneID(id int) *InventoryItemUpdateOne {
	mutation := newInventoryItemMutation(c.config, OpUpdateOne, withInventoryItemID(id))
	return &InventoryItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for InventoryItem.
func (c *InventoryItemClient) Delete() *InventoryItemDelete {
	mutation := newInventoryItemMutation(c.config, OpDelete)
	return &InventoryItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InventoryItemClient) DeleteOne(ii *InventoryItem) *InventoryItemDeleteOne {
	return c.DeleteOneID(ii.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *InventoryItemClient) DeleteOneID(id int) *InventoryItemDeleteOne {
	builder := c.Delete().Where(inventoryitem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InventoryItemDeleteOne{builder}
}

// Query returns a query builder for InventoryItem.
func (c *InventoryItemClient) Query() *InventoryItemQuery {
	return &InventoryItemQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeInventoryItem},
		inters: c.Interceptors(),
	}
}

// Get returns a InventoryItem entity by its id.
func (c *InventoryItemClient) Get(ctx context.Context, id int) (*InventoryItem, error) {
	return c.Query().Where(inventoryitem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InventoryItemClient) GetX(ctx context.Context, id int) *InventoryItem {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a InventoryItem.
func (c *InventoryItemClient) QueryUser(ii *InventoryItem) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ii.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(inventoryitem.Table, inventoryitem.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, inventoryitem.UserTable, inventoryitem.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ii.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryItem queries the item edge of a InventoryItem.
func (c *InventoryItemClient) QueryItem(ii *InventoryItem) *GameItemQuery {
	query := (&GameItemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ii.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(inventoryitem.Table, inventoryitem.FieldID, id),
			sqlgraph.To(gameitem.Table, gameitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, inventoryitem.ItemTable, inventoryitem.ItemColumn),
		)
		fromV = sqlgraph.Neighbors(ii.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InventoryItemClient) Hooks() []Hook {
	return c.hooks.InventoryItem
}

// Interceptors returns the client interceptors.
func (c *InventoryItemClient) Interceptors() []Interceptor {
	return c.inters.InventoryItem
}

func (c *InventoryItemClient) mutate(ctx context.Context, m *InventoryItemMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&InventoryItemCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&InventoryItemUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&InventoryItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&InventoryItemDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown InventoryItem mutation op: %q", m.Op())
	}
}

// MatchClient is a client for the Match schema.
type MatchClient struct {
	config
}

// NewMatchClient returns a client for the Match from the given config.
func NewMatchClient(c config) *MatchClient {
	return &MatchClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `match.Hooks(f(g(h())))`.
func (c *MatchClient) Use(hooks ...Hook) {
	c.hooks.Match = append(c.hooks.Match, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `match.Intercept(f(g(h())))`.
func (c *MatchClient) Intercept(interceptors ...Interceptor) {
	c.inters.Match = append(c.inters.Match, interceptors...)
}

// Create returns a builder for creating a Match entity.
func (c *MatchClient) Create() *MatchCreate {
	mutation := newMatchMutation(c.config, OpCreate)
	return &MatchCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Match entities.
func (c *MatchClient) CreateBulk(builders ...*MatchCreate) *MatchCreateBulk {
	return &MatchCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MatchClient) MapCreateBulk(slice any, setFunc func(*MatchCreate, int)) *MatchCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MatchCreateBulk{err: fmt.Errorf("calling to MatchClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MatchCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MatchCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Match.
func (c *MatchClient) Update() *MatchUpdate {
	mutation := newMatchMutation(c.config, OpUpdate)
	return &MatchUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MatchClient) UpdateOne(m *Match) *MatchUpdateOne {
	mutation := newMatchMutation(c.config, OpUpdateOne, withMatch(m))
	return &MatchUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MatchClient) UpdateOneID(id int) *MatchUpdateOne {
	mutation := newMatchMutation(c.config, OpUpdateOne, withMatchID(id))
	return &MatchUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Match.
func (c *MatchClient) Delete() *MatchDelete {
	mutation := newMatchMutation(c.config, OpDelete)
	return &MatchDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MatchClient) DeleteOne(m *Match) *MatchDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MatchClient) DeleteOneID(id int) *MatchDeleteOne {
	builder := c.Delete().Where(match.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MatchDeleteOne{builder}
}

// Query returns a query builder for Match.
func (c *MatchClient) Query() *MatchQuery {
	return &MatchQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMatch},
		inters: c.Interceptors(),
	}
}

// Get returns a Match entity by its id.
func (c *MatchClient) Get(ctx context.Context, id int) (*Match, error) {
	return c.Query().Where(match.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MatchClient) GetX(ctx context.Context, id int) *Match {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPlayer1 queries the player1 edge of a Match.
func (c *MatchClient) QueryPlayer1(m *Match) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(match.Table, match.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, match.Player1Table, match.Player1Column),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPlayer2 queries the player2 edge of a Match.
func (c *MatchClient) QueryPlayer2(m *Match) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(match.Table, match.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, match.Player2Table, match.Player2Column),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryResults queries the results edge of a Match.
func (c *MatchClient) QueryResults(m *Match) *MatchResultQuery {
	query := (&MatchResultClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(match.Table, match.FieldID, id),
			sqlgraph.To(matchresult.Table, matchresult.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, match.ResultsTable, match.ResultsColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MatchClient) Hooks() []Hook {
	return c.hooks.Match
}

// Interceptors returns the client interceptors.
func (c *MatchClient) Interceptors() []Interceptor {
	return c.inters.Match
}

func (c *MatchClient) mutate(ctx context.Context, m *MatchMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MatchCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MatchUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MatchUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MatchDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Match mutation op: %q", m.Op())
	}
}

// MatchResultClient is a client for the MatchResult schema.
type MatchResultClient struct {
	config
}

// NewMatchResultClient returns a client for the MatchResult from the given config.
func NewMatchResultClient(c config) *MatchResultClient {
	return &MatchResultClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `matchresult.Hooks(f(g(h())))`.
func (c *MatchResultClient) Use(hooks ...Hook) {
	c.hooks.MatchResult = append(c.hooks.MatchResult, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `matchresult.Intercept(f(g(h())))`.
func (c *MatchResultClient) Intercept(interceptors ...Interceptor) {
	c.inters.MatchResult = append(c.inters.MatchResult, interceptors...)
}

// Create returns a builder for creating a MatchResult entity.
func (c *MatchResultClient) Create() *MatchResultCreate {
	mutation := newMatchResultMutation(c.config, OpCreate)
	return &MatchResultCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MatchResult entities.
func (c *MatchResultClient) CreateBulk(builders ...*MatchResultCreate) *MatchResultCreateBulk {
	return &MatchResultCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MatchResultClient) MapCreateBulk(slice any, setFunc func(*MatchResultCreate, int)) *MatchResultCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MatchResultCreateBulk{err: fmt.Errorf("calling to MatchResultClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MatchResultCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MatchResultCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MatchResult.
func (c *MatchResultClient) Update() *MatchResultUpdate {
	mutation := newMatchResultMutation(c.config, OpUpdate)
	return &MatchResultUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MatchResultClient) UpdateOne(mr *MatchResult) *MatchResultUpdateOne {
	mutation := newMatchResultMutation(c.config, OpUpdateOne, withMatchResult(mr))
	return &MatchResultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MatchResultClient) UpdateOneID(id int) *MatchResultUpdateOne {
	mutation := newMatchResultMutation(c.config, OpUpdateOne, withMatchResultID(id))
	return &MatchResultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MatchResult.
func (c *MatchResultClient) Delete() *MatchResultDelete {
	mutation := newMatchResultMutation(c.config, OpDelete)
	return &MatchResultDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MatchResultClient) DeleteOne(mr *MatchResult) *MatchResultDeleteOne {
	return c.DeleteOneID(mr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MatchResultClient) DeleteOneID(id int) *MatchResultDeleteOne {
	builder := c.Delete().Where(matchresult.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MatchResultDeleteOne{builder}
}

// Query returns a query builder for MatchResult.
func (c *MatchResultClient) Query() *MatchResultQuery {
	return &MatchResultQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMatchResult},
		inters: c.Interceptors(),
	}
}

// Get returns a MatchResult entity by its id.
func (c *MatchResultClient) Get(ctx context.Context, id int) (*MatchResult, error) {
	return c.Query().Where(matchresult.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MatchResultClient) GetX(ctx context.Context, id int) *MatchResult {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMatch queries the match edge of a MatchResult.
func (c *MatchResultClient) QueryMatch(mr *MatchResult) *MatchQuery {
	query := (&MatchClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := mr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(matchresult.Table, matchresult.FieldID, id),
			sqlgraph.To(match.Table, match.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, matchresult.MatchTable, matchresult.MatchColumn),
		)
		fromV = sqlgraph.Neighbors(mr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a MatchResult.
func (c *MatchResultClient) QueryUser(mr *MatchResult) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := mr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(matchresult.Table, matchresult.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, matchresult.UserTable, matchresult.UserColumn),
		)
		fromV = sqlgraph.Neighbors(mr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MatchResultClient) Hooks() []Hook {
	return c.hooks.MatchResult
}

// Interceptors returns the client interceptors.
func (c *MatchResultClient) Interceptors() []Interceptor {
	return c.inters.MatchResult
}

func (c *MatchResultClient) mutate(ctx context.Context, m *MatchResultMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MatchResultCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MatchResultUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MatchResultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MatchResultDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown MatchResult mutation op: %q", m.Op())
	}
}

// StatisticClient is a client for the Statistic schema.
type StatisticClient struct {
	config
}

// NewStatisticClient returns a client for the Statistic from the given config.
func NewStatisticClient(c config) *StatisticClient {
	return &StatisticClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `statistic.Hooks(f(g(h())))`.
func (c *StatisticClient) Use(hooks ...Hook) {
	c.hooks.Statistic = append(c.hooks.Statistic, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `statistic.Intercept(f(g(h())))`.
func (c *StatisticClient) Intercept(interceptors ...Interceptor) {
	c.inters.Statistic = append(c.inters.Statistic, interceptors...)
}

// Create returns a builder for creating a Statistic entity.
func (c *StatisticClient) Create() *StatisticCreate {
	mutation := newStatisticMutation(c.config, OpCreate)
	return &StatisticCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Statistic entities.
func (c *StatisticClient) CreateBulk(builders ...*StatisticCreate) *StatisticCreateBulk {
	return &StatisticCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *StatisticClient) MapCreateBulk(slice any, setFunc func(*StatisticCreate, int)) *StatisticCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &StatisticCreateBulk{err: fmt.Errorf("calling to StatisticClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*StatisticCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &StatisticCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Statistic.
func (c *StatisticClient) Update() *StatisticUpdate {
	mutation := newStatisticMutation(c.config, OpUpdate)
	return &StatisticUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StatisticClient) UpdateOne(s *Statistic) *StatisticUpdateOne {
	mutation := newStatisticMutation(c.config, OpUpdateOne, withStatistic(s))
	return &StatisticUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StatisticClient) UpdateOneID(id int) *StatisticUpdateOne {
	mutation := newStatisticMutation(c.config, OpUpdateOne, withStatisticID(id))
	return &StatisticUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Statistic.
func (c *StatisticClient) Delete() *StatisticDelete {
	mutation := newStatisticMutation(c.config, OpDelete)
	return &StatisticDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StatisticClient) DeleteOne(s *Statistic) *StatisticDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *StatisticClient) DeleteOneID(id int) *StatisticDeleteOne {
	builder := c.Delete().Where(statistic.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StatisticDeleteOne{builder}
}

// Query returns a query builder for Statistic.
func (c *StatisticClient) Query() *StatisticQuery {
	return &StatisticQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeStatistic},
		inters: c.Interceptors(),
	}
}

// Get returns a Statistic entity by its id.
func (c *StatisticClient) Get(ctx context.Context, id int) (*Statistic, error) {
	return c.Query().Where(statistic.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StatisticClient) GetX(ctx context.Context, id int) *Statistic {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Statistic.
func (c *StatisticClient) QueryUser(s *Statistic) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statistic.Table, statistic.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, statistic.UserTable, statistic.UserColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StatisticClient) Hooks() []Hook {
	return c.hooks.Statistic
}

// Interceptors returns the client interceptors.
func (c *StatisticClient) Interceptors() []Interceptor {
	return c.inters.Statistic
}

func (c *StatisticClient) mutate(ctx context.Context, m *StatisticMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&StatisticCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&StatisticUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&StatisticUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&StatisticDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Statistic mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStatistics queries the statistics edge of a User.
func (c *UserClient) QueryStatistics(u *User) *StatisticQuery {
	query := (&StatisticClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(statistic.Table, statistic.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.StatisticsTable, user.StatisticsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFriends queries the friends edge of a User.
func (c *UserClient) QueryFriends(u *User) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.FriendsTable, user.FriendsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySentFriendRequests queries the sent_friend_requests edge of a User.
func (c *UserClient) QuerySentFriendRequests(u *User) *FriendRequestQuery {
	query := (&FriendRequestClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(friendrequest.Table, friendrequest.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.SentFriendRequestsTable, user.SentFriendRequestsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReceivedFriendRequests queries the received_friend_requests edge of a User.
func (c *UserClient) QueryReceivedFriendRequests(u *User) *FriendRequestQuery {
	query := (&FriendRequestClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(friendrequest.Table, friendrequest.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ReceivedFriendRequestsTable, user.ReceivedFriendRequestsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryItems queries the items edge of a User.
func (c *UserClient) QueryItems(u *User) *InventoryItemQuery {
	query := (&InventoryItemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(inventoryitem.Table, inventoryitem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ItemsTable, user.ItemsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCurrentItem queries the current_item edge of a User.
func (c *UserClient) QueryCurrentItem(u *User) *InventoryItemQuery {
	query := (&InventoryItemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(inventoryitem.Table, inventoryitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, user.CurrentItemTable, user.CurrentItemColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCurrentMatch queries the current_match edge of a User.
func (c *UserClient) QueryCurrentMatch(u *User) *MatchQuery {
	query := (&MatchClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(match.Table, match.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, user.CurrentMatchTable, user.CurrentMatchColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBalance queries the balance edge of a User.
func (c *UserClient) QueryBalance(u *User) *UserBalanceQuery {
	query := (&UserBalanceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(userbalance.Table, userbalance.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.BalanceTable, user.BalanceColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// UserBalanceClient is a client for the UserBalance schema.
type UserBalanceClient struct {
	config
}

// NewUserBalanceClient returns a client for the UserBalance from the given config.
func NewUserBalanceClient(c config) *UserBalanceClient {
	return &UserBalanceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userbalance.Hooks(f(g(h())))`.
func (c *UserBalanceClient) Use(hooks ...Hook) {
	c.hooks.UserBalance = append(c.hooks.UserBalance, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `userbalance.Intercept(f(g(h())))`.
func (c *UserBalanceClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserBalance = append(c.inters.UserBalance, interceptors...)
}

// Create returns a builder for creating a UserBalance entity.
func (c *UserBalanceClient) Create() *UserBalanceCreate {
	mutation := newUserBalanceMutation(c.config, OpCreate)
	return &UserBalanceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserBalance entities.
func (c *UserBalanceClient) CreateBulk(builders ...*UserBalanceCreate) *UserBalanceCreateBulk {
	return &UserBalanceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserBalanceClient) MapCreateBulk(slice any, setFunc func(*UserBalanceCreate, int)) *UserBalanceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserBalanceCreateBulk{err: fmt.Errorf("calling to UserBalanceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserBalanceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserBalanceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserBalance.
func (c *UserBalanceClient) Update() *UserBalanceUpdate {
	mutation := newUserBalanceMutation(c.config, OpUpdate)
	return &UserBalanceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserBalanceClient) UpdateOne(ub *UserBalance) *UserBalanceUpdateOne {
	mutation := newUserBalanceMutation(c.config, OpUpdateOne, withUserBalance(ub))
	return &UserBalanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserBalanceClient) UpdateOneID(id int) *UserBalanceUpdateOne {
	mutation := newUserBalanceMutation(c.config, OpUpdateOne, withUserBalanceID(id))
	return &UserBalanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserBalance.
func (c *UserBalanceClient) Delete() *UserBalanceDelete {
	mutation := newUserBalanceMutation(c.config, OpDelete)
	return &UserBalanceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserBalanceClient) DeleteOne(ub *UserBalance) *UserBalanceDeleteOne {
	return c.DeleteOneID(ub.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserBalanceClient) DeleteOneID(id int) *UserBalanceDeleteOne {
	builder := c.Delete().Where(userbalance.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserBalanceDeleteOne{builder}
}

// Query returns a query builder for UserBalance.
func (c *UserBalanceClient) Query() *UserBalanceQuery {
	return &UserBalanceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserBalance},
		inters: c.Interceptors(),
	}
}

// Get returns a UserBalance entity by its id.
func (c *UserBalanceClient) Get(ctx context.Context, id int) (*UserBalance, error) {
	return c.Query().Where(userbalance.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserBalanceClient) GetX(ctx context.Context, id int) *UserBalance {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a UserBalance.
func (c *UserBalanceClient) QueryUser(ub *UserBalance) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ub.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userbalance.Table, userbalance.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, userbalance.UserTable, userbalance.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ub.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserBalanceClient) Hooks() []Hook {
	return c.hooks.UserBalance
}

// Interceptors returns the client interceptors.
func (c *UserBalanceClient) Interceptors() []Interceptor {
	return c.inters.UserBalance
}

func (c *UserBalanceClient) mutate(ctx context.Context, m *UserBalanceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserBalanceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserBalanceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserBalanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserBalanceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserBalance mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		FriendRequest, GameItem, InventoryItem, Match, MatchResult, Statistic, User,
		UserBalance []ent.Hook
	}
	inters struct {
		FriendRequest, GameItem, InventoryItem, Match, MatchResult, Statistic, User,
		UserBalance []ent.Interceptor
	}
)
