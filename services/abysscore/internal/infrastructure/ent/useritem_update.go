// Code generated by ent, DO NOT EDIT.

package ent

import (
	"abysscore/internal/infrastructure/ent/predicate"
	"abysscore/internal/infrastructure/ent/useritem"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserItemUpdate is the builder for updating UserItem entities.
type UserItemUpdate struct {
	config
	hooks    []Hook
	mutation *UserItemMutation
}

// Where appends a list predicates to the UserItemUpdate builder.
func (uiu *UserItemUpdate) Where(ps ...predicate.UserItem) *UserItemUpdate {
	uiu.mutation.Where(ps...)
	return uiu
}

// SetReceivedFromID sets the "received_from_id" field.
func (uiu *UserItemUpdate) SetReceivedFromID(i int) *UserItemUpdate {
	uiu.mutation.ResetReceivedFromID()
	uiu.mutation.SetReceivedFromID(i)
	return uiu
}

// SetNillableReceivedFromID sets the "received_from_id" field if the given value is not nil.
func (uiu *UserItemUpdate) SetNillableReceivedFromID(i *int) *UserItemUpdate {
	if i != nil {
		uiu.SetReceivedFromID(*i)
	}
	return uiu
}

// AddReceivedFromID adds i to the "received_from_id" field.
func (uiu *UserItemUpdate) AddReceivedFromID(i int) *UserItemUpdate {
	uiu.mutation.AddReceivedFromID(i)
	return uiu
}

// SetObtainedAt sets the "obtained_at" field.
func (uiu *UserItemUpdate) SetObtainedAt(t time.Time) *UserItemUpdate {
	uiu.mutation.SetObtainedAt(t)
	return uiu
}

// SetNillableObtainedAt sets the "obtained_at" field if the given value is not nil.
func (uiu *UserItemUpdate) SetNillableObtainedAt(t *time.Time) *UserItemUpdate {
	if t != nil {
		uiu.SetObtainedAt(*t)
	}
	return uiu
}

// Mutation returns the UserItemMutation object of the builder.
func (uiu *UserItemUpdate) Mutation() *UserItemMutation {
	return uiu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uiu *UserItemUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uiu.sqlSave, uiu.mutation, uiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uiu *UserItemUpdate) SaveX(ctx context.Context) int {
	affected, err := uiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uiu *UserItemUpdate) Exec(ctx context.Context) error {
	_, err := uiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uiu *UserItemUpdate) ExecX(ctx context.Context) {
	if err := uiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uiu *UserItemUpdate) check() error {
	if v, ok := uiu.mutation.ReceivedFromID(); ok {
		if err := useritem.ReceivedFromIDValidator(v); err != nil {
			return &ValidationError{Name: "received_from_id", err: fmt.Errorf(`ent: validator failed for field "UserItem.received_from_id": %w`, err)}
		}
	}
	if uiu.mutation.UserCleared() && len(uiu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserItem.user"`)
	}
	if uiu.mutation.ItemCleared() && len(uiu.mutation.ItemIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserItem.item"`)
	}
	return nil
}

func (uiu *UserItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uiu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(useritem.Table, useritem.Columns, sqlgraph.NewFieldSpec(useritem.FieldID, field.TypeInt))
	if ps := uiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uiu.mutation.ReceivedFromID(); ok {
		_spec.SetField(useritem.FieldReceivedFromID, field.TypeInt, value)
	}
	if value, ok := uiu.mutation.AddedReceivedFromID(); ok {
		_spec.AddField(useritem.FieldReceivedFromID, field.TypeInt, value)
	}
	if value, ok := uiu.mutation.ObtainedAt(); ok {
		_spec.SetField(useritem.FieldObtainedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{useritem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uiu.mutation.done = true
	return n, nil
}

// UserItemUpdateOne is the builder for updating a single UserItem entity.
type UserItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserItemMutation
}

// SetReceivedFromID sets the "received_from_id" field.
func (uiuo *UserItemUpdateOne) SetReceivedFromID(i int) *UserItemUpdateOne {
	uiuo.mutation.ResetReceivedFromID()
	uiuo.mutation.SetReceivedFromID(i)
	return uiuo
}

// SetNillableReceivedFromID sets the "received_from_id" field if the given value is not nil.
func (uiuo *UserItemUpdateOne) SetNillableReceivedFromID(i *int) *UserItemUpdateOne {
	if i != nil {
		uiuo.SetReceivedFromID(*i)
	}
	return uiuo
}

// AddReceivedFromID adds i to the "received_from_id" field.
func (uiuo *UserItemUpdateOne) AddReceivedFromID(i int) *UserItemUpdateOne {
	uiuo.mutation.AddReceivedFromID(i)
	return uiuo
}

// SetObtainedAt sets the "obtained_at" field.
func (uiuo *UserItemUpdateOne) SetObtainedAt(t time.Time) *UserItemUpdateOne {
	uiuo.mutation.SetObtainedAt(t)
	return uiuo
}

// SetNillableObtainedAt sets the "obtained_at" field if the given value is not nil.
func (uiuo *UserItemUpdateOne) SetNillableObtainedAt(t *time.Time) *UserItemUpdateOne {
	if t != nil {
		uiuo.SetObtainedAt(*t)
	}
	return uiuo
}

// Mutation returns the UserItemMutation object of the builder.
func (uiuo *UserItemUpdateOne) Mutation() *UserItemMutation {
	return uiuo.mutation
}

// Where appends a list predicates to the UserItemUpdate builder.
func (uiuo *UserItemUpdateOne) Where(ps ...predicate.UserItem) *UserItemUpdateOne {
	uiuo.mutation.Where(ps...)
	return uiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uiuo *UserItemUpdateOne) Select(field string, fields ...string) *UserItemUpdateOne {
	uiuo.fields = append([]string{field}, fields...)
	return uiuo
}

// Save executes the query and returns the updated UserItem entity.
func (uiuo *UserItemUpdateOne) Save(ctx context.Context) (*UserItem, error) {
	return withHooks(ctx, uiuo.sqlSave, uiuo.mutation, uiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uiuo *UserItemUpdateOne) SaveX(ctx context.Context) *UserItem {
	node, err := uiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uiuo *UserItemUpdateOne) Exec(ctx context.Context) error {
	_, err := uiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uiuo *UserItemUpdateOne) ExecX(ctx context.Context) {
	if err := uiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uiuo *UserItemUpdateOne) check() error {
	if v, ok := uiuo.mutation.ReceivedFromID(); ok {
		if err := useritem.ReceivedFromIDValidator(v); err != nil {
			return &ValidationError{Name: "received_from_id", err: fmt.Errorf(`ent: validator failed for field "UserItem.received_from_id": %w`, err)}
		}
	}
	if uiuo.mutation.UserCleared() && len(uiuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserItem.user"`)
	}
	if uiuo.mutation.ItemCleared() && len(uiuo.mutation.ItemIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserItem.item"`)
	}
	return nil
}

func (uiuo *UserItemUpdateOne) sqlSave(ctx context.Context) (_node *UserItem, err error) {
	if err := uiuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(useritem.Table, useritem.Columns, sqlgraph.NewFieldSpec(useritem.FieldID, field.TypeInt))
	id, ok := uiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, useritem.FieldID)
		for _, f := range fields {
			if !useritem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != useritem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uiuo.mutation.ReceivedFromID(); ok {
		_spec.SetField(useritem.FieldReceivedFromID, field.TypeInt, value)
	}
	if value, ok := uiuo.mutation.AddedReceivedFromID(); ok {
		_spec.AddField(useritem.FieldReceivedFromID, field.TypeInt, value)
	}
	if value, ok := uiuo.mutation.ObtainedAt(); ok {
		_spec.SetField(useritem.FieldObtainedAt, field.TypeTime, value)
	}
	_node = &UserItem{config: uiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{useritem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uiuo.mutation.done = true
	return _node, nil
}
