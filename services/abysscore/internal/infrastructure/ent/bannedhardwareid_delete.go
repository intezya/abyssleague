// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/intezya/abyssleague/services/abysscore/internal/infrastructure/ent/bannedhardwareid"
	"github.com/intezya/abyssleague/services/abysscore/internal/infrastructure/ent/predicate"
)

// BannedHardwareIDDelete is the builder for deleting a BannedHardwareID entity.
type BannedHardwareIDDelete struct {
	config
	hooks    []Hook
	mutation *BannedHardwareIDMutation
}

// Where appends a list predicates to the BannedHardwareIDDelete builder.
func (bhid *BannedHardwareIDDelete) Where(ps ...predicate.BannedHardwareID) *BannedHardwareIDDelete {
	bhid.mutation.Where(ps...)
	return bhid
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (bhid *BannedHardwareIDDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, bhid.sqlExec, bhid.mutation, bhid.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (bhid *BannedHardwareIDDelete) ExecX(ctx context.Context) int {
	n, err := bhid.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (bhid *BannedHardwareIDDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(bannedhardwareid.Table, sqlgraph.NewFieldSpec(bannedhardwareid.FieldID, field.TypeInt))
	if ps := bhid.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, bhid.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	bhid.mutation.done = true
	return affected, err
}

// BannedHardwareIDDeleteOne is the builder for deleting a single BannedHardwareID entity.
type BannedHardwareIDDeleteOne struct {
	bhid *BannedHardwareIDDelete
}

// Where appends a list predicates to the BannedHardwareIDDelete builder.
func (bhido *BannedHardwareIDDeleteOne) Where(ps ...predicate.BannedHardwareID) *BannedHardwareIDDeleteOne {
	bhido.bhid.mutation.Where(ps...)
	return bhido
}

// Exec executes the deletion query.
func (bhido *BannedHardwareIDDeleteOne) Exec(ctx context.Context) error {
	n, err := bhido.bhid.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{bannedhardwareid.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (bhido *BannedHardwareIDDeleteOne) ExecX(ctx context.Context) {
	if err := bhido.Exec(ctx); err != nil {
		panic(err)
	}
}
