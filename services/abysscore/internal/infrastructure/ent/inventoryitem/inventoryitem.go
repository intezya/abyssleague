// Code generated by ent, DO NOT EDIT.

package inventoryitem

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the inventoryitem type in the database.
	Label = "inventory_item"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldItemID holds the string denoting the item_id field in the database.
	FieldItemID = "item_id"
	// FieldReceivedFromID holds the string denoting the received_from_id field in the database.
	FieldReceivedFromID = "received_from_id"
	// FieldObtainedAt holds the string denoting the obtained_at field in the database.
	FieldObtainedAt = "obtained_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeItem holds the string denoting the item edge name in mutations.
	EdgeItem = "item"
	// Table holds the table name of the inventoryitem in the database.
	Table = "inventory_items"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "inventory_items"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// ItemTable is the table that holds the item relation/edge.
	ItemTable = "inventory_items"
	// ItemInverseTable is the table name for the GameItem entity.
	// It exists in this package in order to avoid circular dependency with the "gameitem" package.
	ItemInverseTable = "game_items"
	// ItemColumn is the table column denoting the item relation/edge.
	ItemColumn = "item_id"
)

// Columns holds all SQL columns for inventoryitem fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldItemID,
	FieldReceivedFromID,
	FieldObtainedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultReceivedFromID holds the default value on creation for the "received_from_id" field.
	DefaultReceivedFromID int
	// ReceivedFromIDValidator is a validator for the "received_from_id" field. It is called by the builders before save.
	ReceivedFromIDValidator func(int) error
	// DefaultObtainedAt holds the default value on creation for the "obtained_at" field.
	DefaultObtainedAt func() time.Time
)

// OrderOption defines the ordering options for the InventoryItem queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByItemID orders the results by the item_id field.
func ByItemID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldItemID, opts...).ToFunc()
}

// ByReceivedFromID orders the results by the received_from_id field.
func ByReceivedFromID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReceivedFromID, opts...).ToFunc()
}

// ByObtainedAt orders the results by the obtained_at field.
func ByObtainedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldObtainedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByItemField orders the results by item field.
func ByItemField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newItemStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newItemStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ItemInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ItemTable, ItemColumn),
	)
}
