// Code generated by ent, DO NOT EDIT.

package ent

import (
	"abysscore/internal/infrastructure/ent/match"
	"abysscore/internal/infrastructure/ent/matchresult"
	"abysscore/internal/infrastructure/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MatchResultCreate is the builder for creating a MatchResult entity.
type MatchResultCreate struct {
	config
	mutation *MatchResultMutation
	hooks    []Hook
}

// SetMatchID sets the "match_id" field.
func (mrc *MatchResultCreate) SetMatchID(i int) *MatchResultCreate {
	mrc.mutation.SetMatchID(i)
	return mrc
}

// SetPlayerID sets the "player_id" field.
func (mrc *MatchResultCreate) SetPlayerID(i int) *MatchResultCreate {
	mrc.mutation.SetPlayerID(i)
	return mrc
}

// SetValue sets the "value" field.
func (mrc *MatchResultCreate) SetValue(i int) *MatchResultCreate {
	mrc.mutation.SetValue(i)
	return mrc
}

// SetIsRetry sets the "is_retry" field.
func (mrc *MatchResultCreate) SetIsRetry(b bool) *MatchResultCreate {
	mrc.mutation.SetIsRetry(b)
	return mrc
}

// SetNillableIsRetry sets the "is_retry" field if the given value is not nil.
func (mrc *MatchResultCreate) SetNillableIsRetry(b *bool) *MatchResultCreate {
	if b != nil {
		mrc.SetIsRetry(*b)
	}
	return mrc
}

// SetCreatedAt sets the "created_at" field.
func (mrc *MatchResultCreate) SetCreatedAt(t time.Time) *MatchResultCreate {
	mrc.mutation.SetCreatedAt(t)
	return mrc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mrc *MatchResultCreate) SetNillableCreatedAt(t *time.Time) *MatchResultCreate {
	if t != nil {
		mrc.SetCreatedAt(*t)
	}
	return mrc
}

// SetID sets the "id" field.
func (mrc *MatchResultCreate) SetID(i int) *MatchResultCreate {
	mrc.mutation.SetID(i)
	return mrc
}

// SetMatch sets the "match" edge to the Match entity.
func (mrc *MatchResultCreate) SetMatch(m *Match) *MatchResultCreate {
	return mrc.SetMatchID(m.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (mrc *MatchResultCreate) SetUserID(id int) *MatchResultCreate {
	mrc.mutation.SetUserID(id)
	return mrc
}

// SetUser sets the "user" edge to the User entity.
func (mrc *MatchResultCreate) SetUser(u *User) *MatchResultCreate {
	return mrc.SetUserID(u.ID)
}

// Mutation returns the MatchResultMutation object of the builder.
func (mrc *MatchResultCreate) Mutation() *MatchResultMutation {
	return mrc.mutation
}

// Save creates the MatchResult in the database.
func (mrc *MatchResultCreate) Save(ctx context.Context) (*MatchResult, error) {
	mrc.defaults()
	return withHooks(ctx, mrc.sqlSave, mrc.mutation, mrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mrc *MatchResultCreate) SaveX(ctx context.Context) *MatchResult {
	v, err := mrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mrc *MatchResultCreate) Exec(ctx context.Context) error {
	_, err := mrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mrc *MatchResultCreate) ExecX(ctx context.Context) {
	if err := mrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mrc *MatchResultCreate) defaults() {
	if _, ok := mrc.mutation.IsRetry(); !ok {
		v := matchresult.DefaultIsRetry
		mrc.mutation.SetIsRetry(v)
	}
	if _, ok := mrc.mutation.CreatedAt(); !ok {
		v := matchresult.DefaultCreatedAt()
		mrc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mrc *MatchResultCreate) check() error {
	if _, ok := mrc.mutation.MatchID(); !ok {
		return &ValidationError{Name: "match_id", err: errors.New(`ent: missing required field "MatchResult.match_id"`)}
	}
	if v, ok := mrc.mutation.MatchID(); ok {
		if err := matchresult.MatchIDValidator(v); err != nil {
			return &ValidationError{Name: "match_id", err: fmt.Errorf(`ent: validator failed for field "MatchResult.match_id": %w`, err)}
		}
	}
	if _, ok := mrc.mutation.PlayerID(); !ok {
		return &ValidationError{Name: "player_id", err: errors.New(`ent: missing required field "MatchResult.player_id"`)}
	}
	if v, ok := mrc.mutation.PlayerID(); ok {
		if err := matchresult.PlayerIDValidator(v); err != nil {
			return &ValidationError{Name: "player_id", err: fmt.Errorf(`ent: validator failed for field "MatchResult.player_id": %w`, err)}
		}
	}
	if _, ok := mrc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "MatchResult.value"`)}
	}
	if v, ok := mrc.mutation.Value(); ok {
		if err := matchresult.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "MatchResult.value": %w`, err)}
		}
	}
	if _, ok := mrc.mutation.IsRetry(); !ok {
		return &ValidationError{Name: "is_retry", err: errors.New(`ent: missing required field "MatchResult.is_retry"`)}
	}
	if _, ok := mrc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "MatchResult.created_at"`)}
	}
	if len(mrc.mutation.MatchIDs()) == 0 {
		return &ValidationError{Name: "match", err: errors.New(`ent: missing required edge "MatchResult.match"`)}
	}
	if len(mrc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "MatchResult.user"`)}
	}
	return nil
}

func (mrc *MatchResultCreate) sqlSave(ctx context.Context) (*MatchResult, error) {
	if err := mrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	mrc.mutation.id = &_node.ID
	mrc.mutation.done = true
	return _node, nil
}

func (mrc *MatchResultCreate) createSpec() (*MatchResult, *sqlgraph.CreateSpec) {
	var (
		_node = &MatchResult{config: mrc.config}
		_spec = sqlgraph.NewCreateSpec(matchresult.Table, sqlgraph.NewFieldSpec(matchresult.FieldID, field.TypeInt))
	)
	if id, ok := mrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mrc.mutation.Value(); ok {
		_spec.SetField(matchresult.FieldValue, field.TypeInt, value)
		_node.Value = value
	}
	if value, ok := mrc.mutation.IsRetry(); ok {
		_spec.SetField(matchresult.FieldIsRetry, field.TypeBool, value)
		_node.IsRetry = value
	}
	if value, ok := mrc.mutation.CreatedAt(); ok {
		_spec.SetField(matchresult.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := mrc.mutation.MatchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   matchresult.MatchTable,
			Columns: []string{matchresult.MatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(match.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MatchID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mrc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   matchresult.UserTable,
			Columns: []string{matchresult.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PlayerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MatchResultCreateBulk is the builder for creating many MatchResult entities in bulk.
type MatchResultCreateBulk struct {
	config
	err      error
	builders []*MatchResultCreate
}

// Save creates the MatchResult entities in the database.
func (mrcb *MatchResultCreateBulk) Save(ctx context.Context) ([]*MatchResult, error) {
	if mrcb.err != nil {
		return nil, mrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mrcb.builders))
	nodes := make([]*MatchResult, len(mrcb.builders))
	mutators := make([]Mutator, len(mrcb.builders))
	for i := range mrcb.builders {
		func(i int, root context.Context) {
			builder := mrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MatchResultMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mrcb *MatchResultCreateBulk) SaveX(ctx context.Context) []*MatchResult {
	v, err := mrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mrcb *MatchResultCreateBulk) Exec(ctx context.Context) error {
	_, err := mrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mrcb *MatchResultCreateBulk) ExecX(ctx context.Context) {
	if err := mrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
