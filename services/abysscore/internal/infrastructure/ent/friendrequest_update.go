// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/intezya/abyssleague/services/abysscore/internal/infrastructure/ent/friendrequest"
	"github.com/intezya/abyssleague/services/abysscore/internal/infrastructure/ent/predicate"
)

// FriendRequestUpdate is the builder for updating FriendRequest entities.
type FriendRequestUpdate struct {
	config
	hooks    []Hook
	mutation *FriendRequestMutation
}

// Where appends a list predicates to the FriendRequestUpdate builder.
func (fru *FriendRequestUpdate) Where(ps ...predicate.FriendRequest) *FriendRequestUpdate {
	fru.mutation.Where(ps...)
	return fru
}

// Mutation returns the FriendRequestMutation object of the builder.
func (fru *FriendRequestUpdate) Mutation() *FriendRequestMutation {
	return fru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fru *FriendRequestUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fru.sqlSave, fru.mutation, fru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fru *FriendRequestUpdate) SaveX(ctx context.Context) int {
	affected, err := fru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fru *FriendRequestUpdate) Exec(ctx context.Context) error {
	_, err := fru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fru *FriendRequestUpdate) ExecX(ctx context.Context) {
	if err := fru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fru *FriendRequestUpdate) check() error {
	if fru.mutation.FromUserCleared() && len(fru.mutation.FromUserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "FriendRequest.from_user"`)
	}
	if fru.mutation.ToUserCleared() && len(fru.mutation.ToUserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "FriendRequest.to_user"`)
	}
	return nil
}

func (fru *FriendRequestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(friendrequest.Table, friendrequest.Columns, sqlgraph.NewFieldSpec(friendrequest.FieldID, field.TypeInt))
	if ps := fru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{friendrequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fru.mutation.done = true
	return n, nil
}

// FriendRequestUpdateOne is the builder for updating a single FriendRequest entity.
type FriendRequestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FriendRequestMutation
}

// Mutation returns the FriendRequestMutation object of the builder.
func (fruo *FriendRequestUpdateOne) Mutation() *FriendRequestMutation {
	return fruo.mutation
}

// Where appends a list predicates to the FriendRequestUpdate builder.
func (fruo *FriendRequestUpdateOne) Where(ps ...predicate.FriendRequest) *FriendRequestUpdateOne {
	fruo.mutation.Where(ps...)
	return fruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fruo *FriendRequestUpdateOne) Select(field string, fields ...string) *FriendRequestUpdateOne {
	fruo.fields = append([]string{field}, fields...)
	return fruo
}

// Save executes the query and returns the updated FriendRequest entity.
func (fruo *FriendRequestUpdateOne) Save(ctx context.Context) (*FriendRequest, error) {
	return withHooks(ctx, fruo.sqlSave, fruo.mutation, fruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fruo *FriendRequestUpdateOne) SaveX(ctx context.Context) *FriendRequest {
	node, err := fruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fruo *FriendRequestUpdateOne) Exec(ctx context.Context) error {
	_, err := fruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fruo *FriendRequestUpdateOne) ExecX(ctx context.Context) {
	if err := fruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fruo *FriendRequestUpdateOne) check() error {
	if fruo.mutation.FromUserCleared() && len(fruo.mutation.FromUserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "FriendRequest.from_user"`)
	}
	if fruo.mutation.ToUserCleared() && len(fruo.mutation.ToUserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "FriendRequest.to_user"`)
	}
	return nil
}

func (fruo *FriendRequestUpdateOne) sqlSave(ctx context.Context) (_node *FriendRequest, err error) {
	if err := fruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(friendrequest.Table, friendrequest.Columns, sqlgraph.NewFieldSpec(friendrequest.FieldID, field.TypeInt))
	id, ok := fruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FriendRequest.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, friendrequest.FieldID)
		for _, f := range fields {
			if !friendrequest.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != friendrequest.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &FriendRequest{config: fruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{friendrequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fruo.mutation.done = true
	return _node, nil
}
