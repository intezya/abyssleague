// Code generated by ent, DO NOT EDIT.

package matchresult

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the matchresult type in the database.
	Label = "match_result"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldMatchID holds the string denoting the match_id field in the database.
	FieldMatchID = "match_id"
	// FieldPlayerID holds the string denoting the player_id field in the database.
	FieldPlayerID = "player_id"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// FieldIsRetry holds the string denoting the is_retry field in the database.
	FieldIsRetry = "is_retry"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeMatch holds the string denoting the match edge name in mutations.
	EdgeMatch = "match"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the matchresult in the database.
	Table = "match_results"
	// MatchTable is the table that holds the match relation/edge.
	MatchTable = "match_results"
	// MatchInverseTable is the table name for the Match entity.
	// It exists in this package in order to avoid circular dependency with the "match" package.
	MatchInverseTable = "matches"
	// MatchColumn is the table column denoting the match relation/edge.
	MatchColumn = "match_id"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "match_results"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "player_id"
)

// Columns holds all SQL columns for matchresult fields.
var Columns = []string{
	FieldID,
	FieldMatchID,
	FieldPlayerID,
	FieldValue,
	FieldIsRetry,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// MatchIDValidator is a validator for the "match_id" field. It is called by the builders before save.
	MatchIDValidator func(int) error
	// PlayerIDValidator is a validator for the "player_id" field. It is called by the builders before save.
	PlayerIDValidator func(int) error
	// ValueValidator is a validator for the "value" field. It is called by the builders before save.
	ValueValidator func(int) error
	// DefaultIsRetry holds the default value on creation for the "is_retry" field.
	DefaultIsRetry bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the MatchResult queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByMatchID orders the results by the match_id field.
func ByMatchID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMatchID, opts...).ToFunc()
}

// ByPlayerID orders the results by the player_id field.
func ByPlayerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlayerID, opts...).ToFunc()
}

// ByValue orders the results by the value field.
func ByValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValue, opts...).ToFunc()
}

// ByIsRetry orders the results by the is_retry field.
func ByIsRetry(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsRetry, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByMatchField orders the results by match field.
func ByMatchField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMatchStep(), sql.OrderByField(field, opts...))
	}
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newMatchStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MatchInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, MatchTable, MatchColumn),
	)
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
	)
}
