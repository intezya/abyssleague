// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/intezya/abyssleague/services/abysscore/internal/infrastructure/ent/match"
	"github.com/intezya/abyssleague/services/abysscore/internal/infrastructure/ent/playermatchresult"
	"github.com/intezya/abyssleague/services/abysscore/internal/infrastructure/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MatchUpdate is the builder for updating Match entities.
type MatchUpdate struct {
	config
	hooks    []Hook
	mutation *MatchMutation
}

// Where appends a list predicates to the MatchUpdate builder.
func (mu *MatchUpdate) Where(ps ...predicate.Match) *MatchUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetPlayer1PenaltyTime sets the "player1_penalty_time" field.
func (mu *MatchUpdate) SetPlayer1PenaltyTime(i int) *MatchUpdate {
	mu.mutation.ResetPlayer1PenaltyTime()
	mu.mutation.SetPlayer1PenaltyTime(i)
	return mu
}

// SetNillablePlayer1PenaltyTime sets the "player1_penalty_time" field if the given value is not nil.
func (mu *MatchUpdate) SetNillablePlayer1PenaltyTime(i *int) *MatchUpdate {
	if i != nil {
		mu.SetPlayer1PenaltyTime(*i)
	}
	return mu
}

// AddPlayer1PenaltyTime adds i to the "player1_penalty_time" field.
func (mu *MatchUpdate) AddPlayer1PenaltyTime(i int) *MatchUpdate {
	mu.mutation.AddPlayer1PenaltyTime(i)
	return mu
}

// SetPlayer2PenaltyTime sets the "player2_penalty_time" field.
func (mu *MatchUpdate) SetPlayer2PenaltyTime(i int) *MatchUpdate {
	mu.mutation.ResetPlayer2PenaltyTime()
	mu.mutation.SetPlayer2PenaltyTime(i)
	return mu
}

// SetNillablePlayer2PenaltyTime sets the "player2_penalty_time" field if the given value is not nil.
func (mu *MatchUpdate) SetNillablePlayer2PenaltyTime(i *int) *MatchUpdate {
	if i != nil {
		mu.SetPlayer2PenaltyTime(*i)
	}
	return mu
}

// AddPlayer2PenaltyTime adds i to the "player2_penalty_time" field.
func (mu *MatchUpdate) AddPlayer2PenaltyTime(i int) *MatchUpdate {
	mu.mutation.AddPlayer2PenaltyTime(i)
	return mu
}

// SetStatus sets the "status" field.
func (mu *MatchUpdate) SetStatus(m match.Status) *MatchUpdate {
	mu.mutation.SetStatus(m)
	return mu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mu *MatchUpdate) SetNillableStatus(m *match.Status) *MatchUpdate {
	if m != nil {
		mu.SetStatus(*m)
	}
	return mu
}

// SetResult sets the "result" field.
func (mu *MatchUpdate) SetResult(m match.Result) *MatchUpdate {
	mu.mutation.SetResult(m)
	return mu
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (mu *MatchUpdate) SetNillableResult(m *match.Result) *MatchUpdate {
	if m != nil {
		mu.SetResult(*m)
	}
	return mu
}

// ClearResult clears the value of the "result" field.
func (mu *MatchUpdate) ClearResult() *MatchUpdate {
	mu.mutation.ClearResult()
	return mu
}

// AddResultIDs adds the "results" edge to the PlayerMatchResult entity by IDs.
func (mu *MatchUpdate) AddResultIDs(ids ...int) *MatchUpdate {
	mu.mutation.AddResultIDs(ids...)
	return mu
}

// AddResults adds the "results" edges to the PlayerMatchResult entity.
func (mu *MatchUpdate) AddResults(p ...*PlayerMatchResult) *MatchUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return mu.AddResultIDs(ids...)
}

// Mutation returns the MatchMutation object of the builder.
func (mu *MatchUpdate) Mutation() *MatchMutation {
	return mu.mutation
}

// ClearResults clears all "results" edges to the PlayerMatchResult entity.
func (mu *MatchUpdate) ClearResults() *MatchUpdate {
	mu.mutation.ClearResults()
	return mu
}

// RemoveResultIDs removes the "results" edge to PlayerMatchResult entities by IDs.
func (mu *MatchUpdate) RemoveResultIDs(ids ...int) *MatchUpdate {
	mu.mutation.RemoveResultIDs(ids...)
	return mu
}

// RemoveResults removes "results" edges to PlayerMatchResult entities.
func (mu *MatchUpdate) RemoveResults(p ...*PlayerMatchResult) *MatchUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return mu.RemoveResultIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MatchUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MatchUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MatchUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MatchUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MatchUpdate) check() error {
	if v, ok := mu.mutation.Player1PenaltyTime(); ok {
		if err := match.Player1PenaltyTimeValidator(v); err != nil {
			return &ValidationError{Name: "player1_penalty_time", err: fmt.Errorf(`ent: validator failed for field "Match.player1_penalty_time": %w`, err)}
		}
	}
	if v, ok := mu.mutation.Player2PenaltyTime(); ok {
		if err := match.Player2PenaltyTimeValidator(v); err != nil {
			return &ValidationError{Name: "player2_penalty_time", err: fmt.Errorf(`ent: validator failed for field "Match.player2_penalty_time": %w`, err)}
		}
	}
	if v, ok := mu.mutation.Status(); ok {
		if err := match.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Match.status": %w`, err)}
		}
	}
	if v, ok := mu.mutation.Result(); ok {
		if err := match.ResultValidator(v); err != nil {
			return &ValidationError{Name: "result", err: fmt.Errorf(`ent: validator failed for field "Match.result": %w`, err)}
		}
	}
	if mu.mutation.Player1Cleared() && len(mu.mutation.Player1IDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Match.player1"`)
	}
	if mu.mutation.Player2Cleared() && len(mu.mutation.Player2IDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Match.player2"`)
	}
	return nil
}

func (mu *MatchUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(match.Table, match.Columns, sqlgraph.NewFieldSpec(match.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Player1PenaltyTime(); ok {
		_spec.SetField(match.FieldPlayer1PenaltyTime, field.TypeInt, value)
	}
	if value, ok := mu.mutation.AddedPlayer1PenaltyTime(); ok {
		_spec.AddField(match.FieldPlayer1PenaltyTime, field.TypeInt, value)
	}
	if value, ok := mu.mutation.Player2PenaltyTime(); ok {
		_spec.SetField(match.FieldPlayer2PenaltyTime, field.TypeInt, value)
	}
	if value, ok := mu.mutation.AddedPlayer2PenaltyTime(); ok {
		_spec.AddField(match.FieldPlayer2PenaltyTime, field.TypeInt, value)
	}
	if value, ok := mu.mutation.Status(); ok {
		_spec.SetField(match.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := mu.mutation.Result(); ok {
		_spec.SetField(match.FieldResult, field.TypeEnum, value)
	}
	if mu.mutation.ResultCleared() {
		_spec.ClearField(match.FieldResult, field.TypeEnum)
	}
	if mu.mutation.ResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   match.ResultsTable,
			Columns: []string{match.ResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playermatchresult.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedResultsIDs(); len(nodes) > 0 && !mu.mutation.ResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   match.ResultsTable,
			Columns: []string{match.ResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playermatchresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.ResultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   match.ResultsTable,
			Columns: []string{match.ResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playermatchresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{match.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MatchUpdateOne is the builder for updating a single Match entity.
type MatchUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MatchMutation
}

// SetPlayer1PenaltyTime sets the "player1_penalty_time" field.
func (muo *MatchUpdateOne) SetPlayer1PenaltyTime(i int) *MatchUpdateOne {
	muo.mutation.ResetPlayer1PenaltyTime()
	muo.mutation.SetPlayer1PenaltyTime(i)
	return muo
}

// SetNillablePlayer1PenaltyTime sets the "player1_penalty_time" field if the given value is not nil.
func (muo *MatchUpdateOne) SetNillablePlayer1PenaltyTime(i *int) *MatchUpdateOne {
	if i != nil {
		muo.SetPlayer1PenaltyTime(*i)
	}
	return muo
}

// AddPlayer1PenaltyTime adds i to the "player1_penalty_time" field.
func (muo *MatchUpdateOne) AddPlayer1PenaltyTime(i int) *MatchUpdateOne {
	muo.mutation.AddPlayer1PenaltyTime(i)
	return muo
}

// SetPlayer2PenaltyTime sets the "player2_penalty_time" field.
func (muo *MatchUpdateOne) SetPlayer2PenaltyTime(i int) *MatchUpdateOne {
	muo.mutation.ResetPlayer2PenaltyTime()
	muo.mutation.SetPlayer2PenaltyTime(i)
	return muo
}

// SetNillablePlayer2PenaltyTime sets the "player2_penalty_time" field if the given value is not nil.
func (muo *MatchUpdateOne) SetNillablePlayer2PenaltyTime(i *int) *MatchUpdateOne {
	if i != nil {
		muo.SetPlayer2PenaltyTime(*i)
	}
	return muo
}

// AddPlayer2PenaltyTime adds i to the "player2_penalty_time" field.
func (muo *MatchUpdateOne) AddPlayer2PenaltyTime(i int) *MatchUpdateOne {
	muo.mutation.AddPlayer2PenaltyTime(i)
	return muo
}

// SetStatus sets the "status" field.
func (muo *MatchUpdateOne) SetStatus(m match.Status) *MatchUpdateOne {
	muo.mutation.SetStatus(m)
	return muo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (muo *MatchUpdateOne) SetNillableStatus(m *match.Status) *MatchUpdateOne {
	if m != nil {
		muo.SetStatus(*m)
	}
	return muo
}

// SetResult sets the "result" field.
func (muo *MatchUpdateOne) SetResult(m match.Result) *MatchUpdateOne {
	muo.mutation.SetResult(m)
	return muo
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (muo *MatchUpdateOne) SetNillableResult(m *match.Result) *MatchUpdateOne {
	if m != nil {
		muo.SetResult(*m)
	}
	return muo
}

// ClearResult clears the value of the "result" field.
func (muo *MatchUpdateOne) ClearResult() *MatchUpdateOne {
	muo.mutation.ClearResult()
	return muo
}

// AddResultIDs adds the "results" edge to the PlayerMatchResult entity by IDs.
func (muo *MatchUpdateOne) AddResultIDs(ids ...int) *MatchUpdateOne {
	muo.mutation.AddResultIDs(ids...)
	return muo
}

// AddResults adds the "results" edges to the PlayerMatchResult entity.
func (muo *MatchUpdateOne) AddResults(p ...*PlayerMatchResult) *MatchUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return muo.AddResultIDs(ids...)
}

// Mutation returns the MatchMutation object of the builder.
func (muo *MatchUpdateOne) Mutation() *MatchMutation {
	return muo.mutation
}

// ClearResults clears all "results" edges to the PlayerMatchResult entity.
func (muo *MatchUpdateOne) ClearResults() *MatchUpdateOne {
	muo.mutation.ClearResults()
	return muo
}

// RemoveResultIDs removes the "results" edge to PlayerMatchResult entities by IDs.
func (muo *MatchUpdateOne) RemoveResultIDs(ids ...int) *MatchUpdateOne {
	muo.mutation.RemoveResultIDs(ids...)
	return muo
}

// RemoveResults removes "results" edges to PlayerMatchResult entities.
func (muo *MatchUpdateOne) RemoveResults(p ...*PlayerMatchResult) *MatchUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return muo.RemoveResultIDs(ids...)
}

// Where appends a list predicates to the MatchUpdate builder.
func (muo *MatchUpdateOne) Where(ps ...predicate.Match) *MatchUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MatchUpdateOne) Select(field string, fields ...string) *MatchUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Match entity.
func (muo *MatchUpdateOne) Save(ctx context.Context) (*Match, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MatchUpdateOne) SaveX(ctx context.Context) *Match {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MatchUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MatchUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MatchUpdateOne) check() error {
	if v, ok := muo.mutation.Player1PenaltyTime(); ok {
		if err := match.Player1PenaltyTimeValidator(v); err != nil {
			return &ValidationError{Name: "player1_penalty_time", err: fmt.Errorf(`ent: validator failed for field "Match.player1_penalty_time": %w`, err)}
		}
	}
	if v, ok := muo.mutation.Player2PenaltyTime(); ok {
		if err := match.Player2PenaltyTimeValidator(v); err != nil {
			return &ValidationError{Name: "player2_penalty_time", err: fmt.Errorf(`ent: validator failed for field "Match.player2_penalty_time": %w`, err)}
		}
	}
	if v, ok := muo.mutation.Status(); ok {
		if err := match.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Match.status": %w`, err)}
		}
	}
	if v, ok := muo.mutation.Result(); ok {
		if err := match.ResultValidator(v); err != nil {
			return &ValidationError{Name: "result", err: fmt.Errorf(`ent: validator failed for field "Match.result": %w`, err)}
		}
	}
	if muo.mutation.Player1Cleared() && len(muo.mutation.Player1IDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Match.player1"`)
	}
	if muo.mutation.Player2Cleared() && len(muo.mutation.Player2IDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Match.player2"`)
	}
	return nil
}

func (muo *MatchUpdateOne) sqlSave(ctx context.Context) (_node *Match, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(match.Table, match.Columns, sqlgraph.NewFieldSpec(match.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Match.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, match.FieldID)
		for _, f := range fields {
			if !match.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != match.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Player1PenaltyTime(); ok {
		_spec.SetField(match.FieldPlayer1PenaltyTime, field.TypeInt, value)
	}
	if value, ok := muo.mutation.AddedPlayer1PenaltyTime(); ok {
		_spec.AddField(match.FieldPlayer1PenaltyTime, field.TypeInt, value)
	}
	if value, ok := muo.mutation.Player2PenaltyTime(); ok {
		_spec.SetField(match.FieldPlayer2PenaltyTime, field.TypeInt, value)
	}
	if value, ok := muo.mutation.AddedPlayer2PenaltyTime(); ok {
		_spec.AddField(match.FieldPlayer2PenaltyTime, field.TypeInt, value)
	}
	if value, ok := muo.mutation.Status(); ok {
		_spec.SetField(match.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := muo.mutation.Result(); ok {
		_spec.SetField(match.FieldResult, field.TypeEnum, value)
	}
	if muo.mutation.ResultCleared() {
		_spec.ClearField(match.FieldResult, field.TypeEnum)
	}
	if muo.mutation.ResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   match.ResultsTable,
			Columns: []string{match.ResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playermatchresult.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedResultsIDs(); len(nodes) > 0 && !muo.mutation.ResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   match.ResultsTable,
			Columns: []string{match.ResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playermatchresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.ResultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   match.ResultsTable,
			Columns: []string{match.ResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playermatchresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Match{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{match.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
