// Code generated by ent, DO NOT EDIT.

package ent

import (
	"abysscore/internal/infrastructure/ent/matchresult"
	"abysscore/internal/infrastructure/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MatchResultUpdate is the builder for updating MatchResult entities.
type MatchResultUpdate struct {
	config
	hooks    []Hook
	mutation *MatchResultMutation
}

// Where appends a list predicates to the MatchResultUpdate builder.
func (mru *MatchResultUpdate) Where(ps ...predicate.MatchResult) *MatchResultUpdate {
	mru.mutation.Where(ps...)
	return mru
}

// SetValue sets the "value" field.
func (mru *MatchResultUpdate) SetValue(i int) *MatchResultUpdate {
	mru.mutation.ResetValue()
	mru.mutation.SetValue(i)
	return mru
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (mru *MatchResultUpdate) SetNillableValue(i *int) *MatchResultUpdate {
	if i != nil {
		mru.SetValue(*i)
	}
	return mru
}

// AddValue adds i to the "value" field.
func (mru *MatchResultUpdate) AddValue(i int) *MatchResultUpdate {
	mru.mutation.AddValue(i)
	return mru
}

// SetIsRetry sets the "is_retry" field.
func (mru *MatchResultUpdate) SetIsRetry(b bool) *MatchResultUpdate {
	mru.mutation.SetIsRetry(b)
	return mru
}

// SetNillableIsRetry sets the "is_retry" field if the given value is not nil.
func (mru *MatchResultUpdate) SetNillableIsRetry(b *bool) *MatchResultUpdate {
	if b != nil {
		mru.SetIsRetry(*b)
	}
	return mru
}

// Mutation returns the MatchResultMutation object of the builder.
func (mru *MatchResultUpdate) Mutation() *MatchResultMutation {
	return mru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mru *MatchResultUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mru.sqlSave, mru.mutation, mru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mru *MatchResultUpdate) SaveX(ctx context.Context) int {
	affected, err := mru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mru *MatchResultUpdate) Exec(ctx context.Context) error {
	_, err := mru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mru *MatchResultUpdate) ExecX(ctx context.Context) {
	if err := mru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mru *MatchResultUpdate) check() error {
	if v, ok := mru.mutation.Value(); ok {
		if err := matchresult.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "MatchResult.value": %w`, err)}
		}
	}
	if mru.mutation.MatchCleared() && len(mru.mutation.MatchIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MatchResult.match"`)
	}
	if mru.mutation.UserCleared() && len(mru.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MatchResult.user"`)
	}
	return nil
}

func (mru *MatchResultUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(matchresult.Table, matchresult.Columns, sqlgraph.NewFieldSpec(matchresult.FieldID, field.TypeInt))
	if ps := mru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mru.mutation.Value(); ok {
		_spec.SetField(matchresult.FieldValue, field.TypeInt, value)
	}
	if value, ok := mru.mutation.AddedValue(); ok {
		_spec.AddField(matchresult.FieldValue, field.TypeInt, value)
	}
	if value, ok := mru.mutation.IsRetry(); ok {
		_spec.SetField(matchresult.FieldIsRetry, field.TypeBool, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{matchresult.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mru.mutation.done = true
	return n, nil
}

// MatchResultUpdateOne is the builder for updating a single MatchResult entity.
type MatchResultUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MatchResultMutation
}

// SetValue sets the "value" field.
func (mruo *MatchResultUpdateOne) SetValue(i int) *MatchResultUpdateOne {
	mruo.mutation.ResetValue()
	mruo.mutation.SetValue(i)
	return mruo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (mruo *MatchResultUpdateOne) SetNillableValue(i *int) *MatchResultUpdateOne {
	if i != nil {
		mruo.SetValue(*i)
	}
	return mruo
}

// AddValue adds i to the "value" field.
func (mruo *MatchResultUpdateOne) AddValue(i int) *MatchResultUpdateOne {
	mruo.mutation.AddValue(i)
	return mruo
}

// SetIsRetry sets the "is_retry" field.
func (mruo *MatchResultUpdateOne) SetIsRetry(b bool) *MatchResultUpdateOne {
	mruo.mutation.SetIsRetry(b)
	return mruo
}

// SetNillableIsRetry sets the "is_retry" field if the given value is not nil.
func (mruo *MatchResultUpdateOne) SetNillableIsRetry(b *bool) *MatchResultUpdateOne {
	if b != nil {
		mruo.SetIsRetry(*b)
	}
	return mruo
}

// Mutation returns the MatchResultMutation object of the builder.
func (mruo *MatchResultUpdateOne) Mutation() *MatchResultMutation {
	return mruo.mutation
}

// Where appends a list predicates to the MatchResultUpdate builder.
func (mruo *MatchResultUpdateOne) Where(ps ...predicate.MatchResult) *MatchResultUpdateOne {
	mruo.mutation.Where(ps...)
	return mruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mruo *MatchResultUpdateOne) Select(field string, fields ...string) *MatchResultUpdateOne {
	mruo.fields = append([]string{field}, fields...)
	return mruo
}

// Save executes the query and returns the updated MatchResult entity.
func (mruo *MatchResultUpdateOne) Save(ctx context.Context) (*MatchResult, error) {
	return withHooks(ctx, mruo.sqlSave, mruo.mutation, mruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mruo *MatchResultUpdateOne) SaveX(ctx context.Context) *MatchResult {
	node, err := mruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mruo *MatchResultUpdateOne) Exec(ctx context.Context) error {
	_, err := mruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mruo *MatchResultUpdateOne) ExecX(ctx context.Context) {
	if err := mruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mruo *MatchResultUpdateOne) check() error {
	if v, ok := mruo.mutation.Value(); ok {
		if err := matchresult.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "MatchResult.value": %w`, err)}
		}
	}
	if mruo.mutation.MatchCleared() && len(mruo.mutation.MatchIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MatchResult.match"`)
	}
	if mruo.mutation.UserCleared() && len(mruo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MatchResult.user"`)
	}
	return nil
}

func (mruo *MatchResultUpdateOne) sqlSave(ctx context.Context) (_node *MatchResult, err error) {
	if err := mruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(matchresult.Table, matchresult.Columns, sqlgraph.NewFieldSpec(matchresult.FieldID, field.TypeInt))
	id, ok := mruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MatchResult.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, matchresult.FieldID)
		for _, f := range fields {
			if !matchresult.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != matchresult.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mruo.mutation.Value(); ok {
		_spec.SetField(matchresult.FieldValue, field.TypeInt, value)
	}
	if value, ok := mruo.mutation.AddedValue(); ok {
		_spec.AddField(matchresult.FieldValue, field.TypeInt, value)
	}
	if value, ok := mruo.mutation.IsRetry(); ok {
		_spec.SetField(matchresult.FieldIsRetry, field.TypeBool, value)
	}
	_node = &MatchResult{config: mruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{matchresult.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mruo.mutation.done = true
	return _node, nil
}
