// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/intezya/abyssleague/services/abysscore/internal/infrastructure/ent/match"
	"github.com/intezya/abyssleague/services/abysscore/internal/infrastructure/ent/playermatchresult"
	"github.com/intezya/abyssleague/services/abysscore/internal/infrastructure/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MatchCreate is the builder for creating a Match entity.
type MatchCreate struct {
	config
	mutation *MatchMutation
	hooks    []Hook
}

// SetPlayer1ID sets the "player1_id" field.
func (mc *MatchCreate) SetPlayer1ID(i int) *MatchCreate {
	mc.mutation.SetPlayer1ID(i)
	return mc
}

// SetPlayer2ID sets the "player2_id" field.
func (mc *MatchCreate) SetPlayer2ID(i int) *MatchCreate {
	mc.mutation.SetPlayer2ID(i)
	return mc
}

// SetPlayer1PenaltyTime sets the "player1_penalty_time" field.
func (mc *MatchCreate) SetPlayer1PenaltyTime(i int) *MatchCreate {
	mc.mutation.SetPlayer1PenaltyTime(i)
	return mc
}

// SetNillablePlayer1PenaltyTime sets the "player1_penalty_time" field if the given value is not nil.
func (mc *MatchCreate) SetNillablePlayer1PenaltyTime(i *int) *MatchCreate {
	if i != nil {
		mc.SetPlayer1PenaltyTime(*i)
	}
	return mc
}

// SetPlayer2PenaltyTime sets the "player2_penalty_time" field.
func (mc *MatchCreate) SetPlayer2PenaltyTime(i int) *MatchCreate {
	mc.mutation.SetPlayer2PenaltyTime(i)
	return mc
}

// SetNillablePlayer2PenaltyTime sets the "player2_penalty_time" field if the given value is not nil.
func (mc *MatchCreate) SetNillablePlayer2PenaltyTime(i *int) *MatchCreate {
	if i != nil {
		mc.SetPlayer2PenaltyTime(*i)
	}
	return mc
}

// SetStatus sets the "status" field.
func (mc *MatchCreate) SetStatus(m match.Status) *MatchCreate {
	mc.mutation.SetStatus(m)
	return mc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mc *MatchCreate) SetNillableStatus(m *match.Status) *MatchCreate {
	if m != nil {
		mc.SetStatus(*m)
	}
	return mc
}

// SetResult sets the "result" field.
func (mc *MatchCreate) SetResult(m match.Result) *MatchCreate {
	mc.mutation.SetResult(m)
	return mc
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (mc *MatchCreate) SetNillableResult(m *match.Result) *MatchCreate {
	if m != nil {
		mc.SetResult(*m)
	}
	return mc
}

// SetCreatedAt sets the "created_at" field.
func (mc *MatchCreate) SetCreatedAt(t time.Time) *MatchCreate {
	mc.mutation.SetCreatedAt(t)
	return mc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mc *MatchCreate) SetNillableCreatedAt(t *time.Time) *MatchCreate {
	if t != nil {
		mc.SetCreatedAt(*t)
	}
	return mc
}

// SetChangedToCurrentStatusAt sets the "changed_to_current_status_at" field.
func (mc *MatchCreate) SetChangedToCurrentStatusAt(t time.Time) *MatchCreate {
	mc.mutation.SetChangedToCurrentStatusAt(t)
	return mc
}

// SetNillableChangedToCurrentStatusAt sets the "changed_to_current_status_at" field if the given value is not nil.
func (mc *MatchCreate) SetNillableChangedToCurrentStatusAt(t *time.Time) *MatchCreate {
	if t != nil {
		mc.SetChangedToCurrentStatusAt(*t)
	}
	return mc
}

// SetID sets the "id" field.
func (mc *MatchCreate) SetID(i int) *MatchCreate {
	mc.mutation.SetID(i)
	return mc
}

// SetPlayer1 sets the "player1" edge to the User entity.
func (mc *MatchCreate) SetPlayer1(u *User) *MatchCreate {
	return mc.SetPlayer1ID(u.ID)
}

// SetPlayer2 sets the "player2" edge to the User entity.
func (mc *MatchCreate) SetPlayer2(u *User) *MatchCreate {
	return mc.SetPlayer2ID(u.ID)
}

// AddResultIDs adds the "results" edge to the PlayerMatchResult entity by IDs.
func (mc *MatchCreate) AddResultIDs(ids ...int) *MatchCreate {
	mc.mutation.AddResultIDs(ids...)
	return mc
}

// AddResults adds the "results" edges to the PlayerMatchResult entity.
func (mc *MatchCreate) AddResults(p ...*PlayerMatchResult) *MatchCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return mc.AddResultIDs(ids...)
}

// Mutation returns the MatchMutation object of the builder.
func (mc *MatchCreate) Mutation() *MatchMutation {
	return mc.mutation
}

// Save creates the Match in the database.
func (mc *MatchCreate) Save(ctx context.Context) (*Match, error) {
	mc.defaults()
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MatchCreate) SaveX(ctx context.Context) *Match {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MatchCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MatchCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MatchCreate) defaults() {
	if _, ok := mc.mutation.Player1PenaltyTime(); !ok {
		v := match.DefaultPlayer1PenaltyTime
		mc.mutation.SetPlayer1PenaltyTime(v)
	}
	if _, ok := mc.mutation.Player2PenaltyTime(); !ok {
		v := match.DefaultPlayer2PenaltyTime
		mc.mutation.SetPlayer2PenaltyTime(v)
	}
	if _, ok := mc.mutation.Status(); !ok {
		v := match.DefaultStatus
		mc.mutation.SetStatus(v)
	}
	if _, ok := mc.mutation.CreatedAt(); !ok {
		v := match.DefaultCreatedAt()
		mc.mutation.SetCreatedAt(v)
	}
	if _, ok := mc.mutation.ChangedToCurrentStatusAt(); !ok {
		v := match.DefaultChangedToCurrentStatusAt()
		mc.mutation.SetChangedToCurrentStatusAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MatchCreate) check() error {
	if _, ok := mc.mutation.Player1ID(); !ok {
		return &ValidationError{Name: "player1_id", err: errors.New(`ent: missing required field "Match.player1_id"`)}
	}
	if _, ok := mc.mutation.Player2ID(); !ok {
		return &ValidationError{Name: "player2_id", err: errors.New(`ent: missing required field "Match.player2_id"`)}
	}
	if _, ok := mc.mutation.Player1PenaltyTime(); !ok {
		return &ValidationError{Name: "player1_penalty_time", err: errors.New(`ent: missing required field "Match.player1_penalty_time"`)}
	}
	if v, ok := mc.mutation.Player1PenaltyTime(); ok {
		if err := match.Player1PenaltyTimeValidator(v); err != nil {
			return &ValidationError{Name: "player1_penalty_time", err: fmt.Errorf(`ent: validator failed for field "Match.player1_penalty_time": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Player2PenaltyTime(); !ok {
		return &ValidationError{Name: "player2_penalty_time", err: errors.New(`ent: missing required field "Match.player2_penalty_time"`)}
	}
	if v, ok := mc.mutation.Player2PenaltyTime(); ok {
		if err := match.Player2PenaltyTimeValidator(v); err != nil {
			return &ValidationError{Name: "player2_penalty_time", err: fmt.Errorf(`ent: validator failed for field "Match.player2_penalty_time": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Match.status"`)}
	}
	if v, ok := mc.mutation.Status(); ok {
		if err := match.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Match.status": %w`, err)}
		}
	}
	if v, ok := mc.mutation.Result(); ok {
		if err := match.ResultValidator(v); err != nil {
			return &ValidationError{Name: "result", err: fmt.Errorf(`ent: validator failed for field "Match.result": %w`, err)}
		}
	}
	if _, ok := mc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Match.created_at"`)}
	}
	if _, ok := mc.mutation.ChangedToCurrentStatusAt(); !ok {
		return &ValidationError{Name: "changed_to_current_status_at", err: errors.New(`ent: missing required field "Match.changed_to_current_status_at"`)}
	}
	if len(mc.mutation.Player1IDs()) == 0 {
		return &ValidationError{Name: "player1", err: errors.New(`ent: missing required edge "Match.player1"`)}
	}
	if len(mc.mutation.Player2IDs()) == 0 {
		return &ValidationError{Name: "player2", err: errors.New(`ent: missing required edge "Match.player2"`)}
	}
	return nil
}

func (mc *MatchCreate) sqlSave(ctx context.Context) (*Match, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MatchCreate) createSpec() (*Match, *sqlgraph.CreateSpec) {
	var (
		_node = &Match{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(match.Table, sqlgraph.NewFieldSpec(match.FieldID, field.TypeInt))
	)
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mc.mutation.Player1PenaltyTime(); ok {
		_spec.SetField(match.FieldPlayer1PenaltyTime, field.TypeInt, value)
		_node.Player1PenaltyTime = value
	}
	if value, ok := mc.mutation.Player2PenaltyTime(); ok {
		_spec.SetField(match.FieldPlayer2PenaltyTime, field.TypeInt, value)
		_node.Player2PenaltyTime = value
	}
	if value, ok := mc.mutation.Status(); ok {
		_spec.SetField(match.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := mc.mutation.Result(); ok {
		_spec.SetField(match.FieldResult, field.TypeEnum, value)
		_node.Result = &value
	}
	if value, ok := mc.mutation.CreatedAt(); ok {
		_spec.SetField(match.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mc.mutation.ChangedToCurrentStatusAt(); ok {
		_spec.SetField(match.FieldChangedToCurrentStatusAt, field.TypeTime, value)
		_node.ChangedToCurrentStatusAt = value
	}
	if nodes := mc.mutation.Player1IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   match.Player1Table,
			Columns: []string{match.Player1Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.Player1ID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.Player2IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   match.Player2Table,
			Columns: []string{match.Player2Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.Player2ID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.ResultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   match.ResultsTable,
			Columns: []string{match.ResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playermatchresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MatchCreateBulk is the builder for creating many Match entities in bulk.
type MatchCreateBulk struct {
	config
	err      error
	builders []*MatchCreate
}

// Save creates the Match entities in the database.
func (mcb *MatchCreateBulk) Save(ctx context.Context) ([]*Match, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Match, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MatchMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MatchCreateBulk) SaveX(ctx context.Context) []*Match {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MatchCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MatchCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}
