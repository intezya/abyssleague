// Code generated by ent, DO NOT EDIT.

package ent

import (
	"abysscore/internal/infrastructure/ent/inventoryitem"
	"abysscore/internal/infrastructure/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InventoryItemUpdate is the builder for updating InventoryItem entities.
type InventoryItemUpdate struct {
	config
	hooks    []Hook
	mutation *InventoryItemMutation
}

// Where appends a list predicates to the InventoryItemUpdate builder.
func (iiu *InventoryItemUpdate) Where(ps ...predicate.InventoryItem) *InventoryItemUpdate {
	iiu.mutation.Where(ps...)
	return iiu
}

// SetReceivedFromID sets the "received_from_id" field.
func (iiu *InventoryItemUpdate) SetReceivedFromID(i int) *InventoryItemUpdate {
	iiu.mutation.ResetReceivedFromID()
	iiu.mutation.SetReceivedFromID(i)
	return iiu
}

// SetNillableReceivedFromID sets the "received_from_id" field if the given value is not nil.
func (iiu *InventoryItemUpdate) SetNillableReceivedFromID(i *int) *InventoryItemUpdate {
	if i != nil {
		iiu.SetReceivedFromID(*i)
	}
	return iiu
}

// AddReceivedFromID adds i to the "received_from_id" field.
func (iiu *InventoryItemUpdate) AddReceivedFromID(i int) *InventoryItemUpdate {
	iiu.mutation.AddReceivedFromID(i)
	return iiu
}

// SetObtainedAt sets the "obtained_at" field.
func (iiu *InventoryItemUpdate) SetObtainedAt(t time.Time) *InventoryItemUpdate {
	iiu.mutation.SetObtainedAt(t)
	return iiu
}

// SetNillableObtainedAt sets the "obtained_at" field if the given value is not nil.
func (iiu *InventoryItemUpdate) SetNillableObtainedAt(t *time.Time) *InventoryItemUpdate {
	if t != nil {
		iiu.SetObtainedAt(*t)
	}
	return iiu
}

// Mutation returns the InventoryItemMutation object of the builder.
func (iiu *InventoryItemUpdate) Mutation() *InventoryItemMutation {
	return iiu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iiu *InventoryItemUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iiu.sqlSave, iiu.mutation, iiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iiu *InventoryItemUpdate) SaveX(ctx context.Context) int {
	affected, err := iiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iiu *InventoryItemUpdate) Exec(ctx context.Context) error {
	_, err := iiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iiu *InventoryItemUpdate) ExecX(ctx context.Context) {
	if err := iiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iiu *InventoryItemUpdate) check() error {
	if v, ok := iiu.mutation.ReceivedFromID(); ok {
		if err := inventoryitem.ReceivedFromIDValidator(v); err != nil {
			return &ValidationError{Name: "received_from_id", err: fmt.Errorf(`ent: validator failed for field "InventoryItem.received_from_id": %w`, err)}
		}
	}
	if iiu.mutation.UserCleared() && len(iiu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "InventoryItem.user"`)
	}
	if iiu.mutation.ItemCleared() && len(iiu.mutation.ItemIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "InventoryItem.item"`)
	}
	return nil
}

func (iiu *InventoryItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iiu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(inventoryitem.Table, inventoryitem.Columns, sqlgraph.NewFieldSpec(inventoryitem.FieldID, field.TypeInt))
	if ps := iiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iiu.mutation.ReceivedFromID(); ok {
		_spec.SetField(inventoryitem.FieldReceivedFromID, field.TypeInt, value)
	}
	if value, ok := iiu.mutation.AddedReceivedFromID(); ok {
		_spec.AddField(inventoryitem.FieldReceivedFromID, field.TypeInt, value)
	}
	if value, ok := iiu.mutation.ObtainedAt(); ok {
		_spec.SetField(inventoryitem.FieldObtainedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{inventoryitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iiu.mutation.done = true
	return n, nil
}

// InventoryItemUpdateOne is the builder for updating a single InventoryItem entity.
type InventoryItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InventoryItemMutation
}

// SetReceivedFromID sets the "received_from_id" field.
func (iiuo *InventoryItemUpdateOne) SetReceivedFromID(i int) *InventoryItemUpdateOne {
	iiuo.mutation.ResetReceivedFromID()
	iiuo.mutation.SetReceivedFromID(i)
	return iiuo
}

// SetNillableReceivedFromID sets the "received_from_id" field if the given value is not nil.
func (iiuo *InventoryItemUpdateOne) SetNillableReceivedFromID(i *int) *InventoryItemUpdateOne {
	if i != nil {
		iiuo.SetReceivedFromID(*i)
	}
	return iiuo
}

// AddReceivedFromID adds i to the "received_from_id" field.
func (iiuo *InventoryItemUpdateOne) AddReceivedFromID(i int) *InventoryItemUpdateOne {
	iiuo.mutation.AddReceivedFromID(i)
	return iiuo
}

// SetObtainedAt sets the "obtained_at" field.
func (iiuo *InventoryItemUpdateOne) SetObtainedAt(t time.Time) *InventoryItemUpdateOne {
	iiuo.mutation.SetObtainedAt(t)
	return iiuo
}

// SetNillableObtainedAt sets the "obtained_at" field if the given value is not nil.
func (iiuo *InventoryItemUpdateOne) SetNillableObtainedAt(t *time.Time) *InventoryItemUpdateOne {
	if t != nil {
		iiuo.SetObtainedAt(*t)
	}
	return iiuo
}

// Mutation returns the InventoryItemMutation object of the builder.
func (iiuo *InventoryItemUpdateOne) Mutation() *InventoryItemMutation {
	return iiuo.mutation
}

// Where appends a list predicates to the InventoryItemUpdate builder.
func (iiuo *InventoryItemUpdateOne) Where(ps ...predicate.InventoryItem) *InventoryItemUpdateOne {
	iiuo.mutation.Where(ps...)
	return iiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iiuo *InventoryItemUpdateOne) Select(field string, fields ...string) *InventoryItemUpdateOne {
	iiuo.fields = append([]string{field}, fields...)
	return iiuo
}

// Save executes the query and returns the updated InventoryItem entity.
func (iiuo *InventoryItemUpdateOne) Save(ctx context.Context) (*InventoryItem, error) {
	return withHooks(ctx, iiuo.sqlSave, iiuo.mutation, iiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iiuo *InventoryItemUpdateOne) SaveX(ctx context.Context) *InventoryItem {
	node, err := iiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iiuo *InventoryItemUpdateOne) Exec(ctx context.Context) error {
	_, err := iiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iiuo *InventoryItemUpdateOne) ExecX(ctx context.Context) {
	if err := iiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iiuo *InventoryItemUpdateOne) check() error {
	if v, ok := iiuo.mutation.ReceivedFromID(); ok {
		if err := inventoryitem.ReceivedFromIDValidator(v); err != nil {
			return &ValidationError{Name: "received_from_id", err: fmt.Errorf(`ent: validator failed for field "InventoryItem.received_from_id": %w`, err)}
		}
	}
	if iiuo.mutation.UserCleared() && len(iiuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "InventoryItem.user"`)
	}
	if iiuo.mutation.ItemCleared() && len(iiuo.mutation.ItemIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "InventoryItem.item"`)
	}
	return nil
}

func (iiuo *InventoryItemUpdateOne) sqlSave(ctx context.Context) (_node *InventoryItem, err error) {
	if err := iiuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(inventoryitem.Table, inventoryitem.Columns, sqlgraph.NewFieldSpec(inventoryitem.FieldID, field.TypeInt))
	id, ok := iiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "InventoryItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, inventoryitem.FieldID)
		for _, f := range fields {
			if !inventoryitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != inventoryitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iiuo.mutation.ReceivedFromID(); ok {
		_spec.SetField(inventoryitem.FieldReceivedFromID, field.TypeInt, value)
	}
	if value, ok := iiuo.mutation.AddedReceivedFromID(); ok {
		_spec.AddField(inventoryitem.FieldReceivedFromID, field.TypeInt, value)
	}
	if value, ok := iiuo.mutation.ObtainedAt(); ok {
		_spec.SetField(inventoryitem.FieldObtainedAt, field.TypeTime, value)
	}
	_node = &InventoryItem{config: iiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{inventoryitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iiuo.mutation.done = true
	return _node, nil
}
