// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"github.com/intezya/abyssleague/services/abysscore/internal/infrastructure/ent/match"
	"github.com/intezya/abyssleague/services/abysscore/internal/infrastructure/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Match is the model entity for the Match schema.
type Match struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Player1ID holds the value of the "player1_id" field.
	Player1ID int `json:"player1_id,omitempty"`
	// Player2ID holds the value of the "player2_id" field.
	Player2ID int `json:"player2_id,omitempty"`
	// Player1PenaltyTime holds the value of the "player1_penalty_time" field.
	Player1PenaltyTime int `json:"player1_penalty_time,omitempty"`
	// Player2PenaltyTime holds the value of the "player2_penalty_time" field.
	Player2PenaltyTime int `json:"player2_penalty_time,omitempty"`
	// Status holds the value of the "status" field.
	Status match.Status `json:"status,omitempty"`
	// Result holds the value of the "result" field.
	Result *match.Result `json:"result,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// ChangedToCurrentStatusAt holds the value of the "changed_to_current_status_at" field.
	ChangedToCurrentStatusAt time.Time `json:"changed_to_current_status_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MatchQuery when eager-loading is set.
	Edges        MatchEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MatchEdges holds the relations/edges for other nodes in the graph.
type MatchEdges struct {
	// Player1 holds the value of the player1 edge.
	Player1 *User `json:"player1,omitempty"`
	// Player2 holds the value of the player2 edge.
	Player2 *User `json:"player2,omitempty"`
	// Results holds the value of the results edge.
	Results []*PlayerMatchResult `json:"results,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// Player1OrErr returns the Player1 value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MatchEdges) Player1OrErr() (*User, error) {
	if e.Player1 != nil {
		return e.Player1, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "player1"}
}

// Player2OrErr returns the Player2 value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MatchEdges) Player2OrErr() (*User, error) {
	if e.Player2 != nil {
		return e.Player2, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "player2"}
}

// ResultsOrErr returns the Results value or an error if the edge
// was not loaded in eager-loading.
func (e MatchEdges) ResultsOrErr() ([]*PlayerMatchResult, error) {
	if e.loadedTypes[2] {
		return e.Results, nil
	}
	return nil, &NotLoadedError{edge: "results"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Match) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case match.FieldID, match.FieldPlayer1ID, match.FieldPlayer2ID, match.FieldPlayer1PenaltyTime, match.FieldPlayer2PenaltyTime:
			values[i] = new(sql.NullInt64)
		case match.FieldStatus, match.FieldResult:
			values[i] = new(sql.NullString)
		case match.FieldCreatedAt, match.FieldChangedToCurrentStatusAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Match fields.
func (m *Match) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case match.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case match.FieldPlayer1ID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field player1_id", values[i])
			} else if value.Valid {
				m.Player1ID = int(value.Int64)
			}
		case match.FieldPlayer2ID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field player2_id", values[i])
			} else if value.Valid {
				m.Player2ID = int(value.Int64)
			}
		case match.FieldPlayer1PenaltyTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field player1_penalty_time", values[i])
			} else if value.Valid {
				m.Player1PenaltyTime = int(value.Int64)
			}
		case match.FieldPlayer2PenaltyTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field player2_penalty_time", values[i])
			} else if value.Valid {
				m.Player2PenaltyTime = int(value.Int64)
			}
		case match.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				m.Status = match.Status(value.String)
			}
		case match.FieldResult:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field result", values[i])
			} else if value.Valid {
				m.Result = new(match.Result)
				*m.Result = match.Result(value.String)
			}
		case match.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				m.CreatedAt = value.Time
			}
		case match.FieldChangedToCurrentStatusAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field changed_to_current_status_at", values[i])
			} else if value.Valid {
				m.ChangedToCurrentStatusAt = value.Time
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Match.
// This includes values selected through modifiers, order, etc.
func (m *Match) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryPlayer1 queries the "player1" edge of the Match entity.
func (m *Match) QueryPlayer1() *UserQuery {
	return NewMatchClient(m.config).QueryPlayer1(m)
}

// QueryPlayer2 queries the "player2" edge of the Match entity.
func (m *Match) QueryPlayer2() *UserQuery {
	return NewMatchClient(m.config).QueryPlayer2(m)
}

// QueryResults queries the "results" edge of the Match entity.
func (m *Match) QueryResults() *PlayerMatchResultQuery {
	return NewMatchClient(m.config).QueryResults(m)
}

// Update returns a builder for updating this Match.
// Note that you need to call Match.Unwrap() before calling this method if this Match
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Match) Update() *MatchUpdateOne {
	return NewMatchClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Match entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Match) Unwrap() *Match {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Match is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Match) String() string {
	var builder strings.Builder
	builder.WriteString("Match(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("player1_id=")
	builder.WriteString(fmt.Sprintf("%v", m.Player1ID))
	builder.WriteString(", ")
	builder.WriteString("player2_id=")
	builder.WriteString(fmt.Sprintf("%v", m.Player2ID))
	builder.WriteString(", ")
	builder.WriteString("player1_penalty_time=")
	builder.WriteString(fmt.Sprintf("%v", m.Player1PenaltyTime))
	builder.WriteString(", ")
	builder.WriteString("player2_penalty_time=")
	builder.WriteString(fmt.Sprintf("%v", m.Player2PenaltyTime))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", m.Status))
	builder.WriteString(", ")
	if v := m.Result; v != nil {
		builder.WriteString("result=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("changed_to_current_status_at=")
	builder.WriteString(m.ChangedToCurrentStatusAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Matches is a parsable slice of Match.
type Matches []*Match
