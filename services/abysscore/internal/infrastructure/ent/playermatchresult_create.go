// Code generated by ent, DO NOT EDIT.

package ent

import (
	"abysscore/internal/infrastructure/ent/match"
	"abysscore/internal/infrastructure/ent/playermatchresult"
	"abysscore/internal/infrastructure/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlayerMatchResultCreate is the builder for creating a PlayerMatchResult entity.
type PlayerMatchResultCreate struct {
	config
	mutation *PlayerMatchResultMutation
	hooks    []Hook
}

// SetMatchID sets the "match_id" field.
func (pmrc *PlayerMatchResultCreate) SetMatchID(i int) *PlayerMatchResultCreate {
	pmrc.mutation.SetMatchID(i)
	return pmrc
}

// SetPlayerID sets the "player_id" field.
func (pmrc *PlayerMatchResultCreate) SetPlayerID(i int) *PlayerMatchResultCreate {
	pmrc.mutation.SetPlayerID(i)
	return pmrc
}

// SetScore sets the "score" field.
func (pmrc *PlayerMatchResultCreate) SetScore(i int) *PlayerMatchResultCreate {
	pmrc.mutation.SetScore(i)
	return pmrc
}

// SetIsRetried sets the "is_retried" field.
func (pmrc *PlayerMatchResultCreate) SetIsRetried(b bool) *PlayerMatchResultCreate {
	pmrc.mutation.SetIsRetried(b)
	return pmrc
}

// SetNillableIsRetried sets the "is_retried" field if the given value is not nil.
func (pmrc *PlayerMatchResultCreate) SetNillableIsRetried(b *bool) *PlayerMatchResultCreate {
	if b != nil {
		pmrc.SetIsRetried(*b)
	}
	return pmrc
}

// SetCreatedAt sets the "created_at" field.
func (pmrc *PlayerMatchResultCreate) SetCreatedAt(t time.Time) *PlayerMatchResultCreate {
	pmrc.mutation.SetCreatedAt(t)
	return pmrc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pmrc *PlayerMatchResultCreate) SetNillableCreatedAt(t *time.Time) *PlayerMatchResultCreate {
	if t != nil {
		pmrc.SetCreatedAt(*t)
	}
	return pmrc
}

// SetID sets the "id" field.
func (pmrc *PlayerMatchResultCreate) SetID(i int) *PlayerMatchResultCreate {
	pmrc.mutation.SetID(i)
	return pmrc
}

// SetMatch sets the "match" edge to the Match entity.
func (pmrc *PlayerMatchResultCreate) SetMatch(m *Match) *PlayerMatchResultCreate {
	return pmrc.SetMatchID(m.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (pmrc *PlayerMatchResultCreate) SetUserID(id int) *PlayerMatchResultCreate {
	pmrc.mutation.SetUserID(id)
	return pmrc
}

// SetUser sets the "user" edge to the User entity.
func (pmrc *PlayerMatchResultCreate) SetUser(u *User) *PlayerMatchResultCreate {
	return pmrc.SetUserID(u.ID)
}

// Mutation returns the PlayerMatchResultMutation object of the builder.
func (pmrc *PlayerMatchResultCreate) Mutation() *PlayerMatchResultMutation {
	return pmrc.mutation
}

// Save creates the PlayerMatchResult in the database.
func (pmrc *PlayerMatchResultCreate) Save(ctx context.Context) (*PlayerMatchResult, error) {
	pmrc.defaults()
	return withHooks(ctx, pmrc.sqlSave, pmrc.mutation, pmrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pmrc *PlayerMatchResultCreate) SaveX(ctx context.Context) *PlayerMatchResult {
	v, err := pmrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pmrc *PlayerMatchResultCreate) Exec(ctx context.Context) error {
	_, err := pmrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmrc *PlayerMatchResultCreate) ExecX(ctx context.Context) {
	if err := pmrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pmrc *PlayerMatchResultCreate) defaults() {
	if _, ok := pmrc.mutation.IsRetried(); !ok {
		v := playermatchresult.DefaultIsRetried
		pmrc.mutation.SetIsRetried(v)
	}
	if _, ok := pmrc.mutation.CreatedAt(); !ok {
		v := playermatchresult.DefaultCreatedAt()
		pmrc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pmrc *PlayerMatchResultCreate) check() error {
	if _, ok := pmrc.mutation.MatchID(); !ok {
		return &ValidationError{Name: "match_id", err: errors.New(`ent: missing required field "PlayerMatchResult.match_id"`)}
	}
	if v, ok := pmrc.mutation.MatchID(); ok {
		if err := playermatchresult.MatchIDValidator(v); err != nil {
			return &ValidationError{Name: "match_id", err: fmt.Errorf(`ent: validator failed for field "PlayerMatchResult.match_id": %w`, err)}
		}
	}
	if _, ok := pmrc.mutation.PlayerID(); !ok {
		return &ValidationError{Name: "player_id", err: errors.New(`ent: missing required field "PlayerMatchResult.player_id"`)}
	}
	if v, ok := pmrc.mutation.PlayerID(); ok {
		if err := playermatchresult.PlayerIDValidator(v); err != nil {
			return &ValidationError{Name: "player_id", err: fmt.Errorf(`ent: validator failed for field "PlayerMatchResult.player_id": %w`, err)}
		}
	}
	if _, ok := pmrc.mutation.Score(); !ok {
		return &ValidationError{Name: "score", err: errors.New(`ent: missing required field "PlayerMatchResult.score"`)}
	}
	if v, ok := pmrc.mutation.Score(); ok {
		if err := playermatchresult.ScoreValidator(v); err != nil {
			return &ValidationError{Name: "score", err: fmt.Errorf(`ent: validator failed for field "PlayerMatchResult.score": %w`, err)}
		}
	}
	if _, ok := pmrc.mutation.IsRetried(); !ok {
		return &ValidationError{Name: "is_retried", err: errors.New(`ent: missing required field "PlayerMatchResult.is_retried"`)}
	}
	if _, ok := pmrc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PlayerMatchResult.created_at"`)}
	}
	if len(pmrc.mutation.MatchIDs()) == 0 {
		return &ValidationError{Name: "match", err: errors.New(`ent: missing required edge "PlayerMatchResult.match"`)}
	}
	if len(pmrc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "PlayerMatchResult.user"`)}
	}
	return nil
}

func (pmrc *PlayerMatchResultCreate) sqlSave(ctx context.Context) (*PlayerMatchResult, error) {
	if err := pmrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pmrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pmrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	pmrc.mutation.id = &_node.ID
	pmrc.mutation.done = true
	return _node, nil
}

func (pmrc *PlayerMatchResultCreate) createSpec() (*PlayerMatchResult, *sqlgraph.CreateSpec) {
	var (
		_node = &PlayerMatchResult{config: pmrc.config}
		_spec = sqlgraph.NewCreateSpec(playermatchresult.Table, sqlgraph.NewFieldSpec(playermatchresult.FieldID, field.TypeInt))
	)
	if id, ok := pmrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pmrc.mutation.Score(); ok {
		_spec.SetField(playermatchresult.FieldScore, field.TypeInt, value)
		_node.Score = value
	}
	if value, ok := pmrc.mutation.IsRetried(); ok {
		_spec.SetField(playermatchresult.FieldIsRetried, field.TypeBool, value)
		_node.IsRetried = value
	}
	if value, ok := pmrc.mutation.CreatedAt(); ok {
		_spec.SetField(playermatchresult.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := pmrc.mutation.MatchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playermatchresult.MatchTable,
			Columns: []string{playermatchresult.MatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(match.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MatchID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pmrc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   playermatchresult.UserTable,
			Columns: []string{playermatchresult.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PlayerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PlayerMatchResultCreateBulk is the builder for creating many PlayerMatchResult entities in bulk.
type PlayerMatchResultCreateBulk struct {
	config
	err      error
	builders []*PlayerMatchResultCreate
}

// Save creates the PlayerMatchResult entities in the database.
func (pmrcb *PlayerMatchResultCreateBulk) Save(ctx context.Context) ([]*PlayerMatchResult, error) {
	if pmrcb.err != nil {
		return nil, pmrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pmrcb.builders))
	nodes := make([]*PlayerMatchResult, len(pmrcb.builders))
	mutators := make([]Mutator, len(pmrcb.builders))
	for i := range pmrcb.builders {
		func(i int, root context.Context) {
			builder := pmrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PlayerMatchResultMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pmrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pmrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pmrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pmrcb *PlayerMatchResultCreateBulk) SaveX(ctx context.Context) []*PlayerMatchResult {
	v, err := pmrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pmrcb *PlayerMatchResultCreateBulk) Exec(ctx context.Context) error {
	_, err := pmrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmrcb *PlayerMatchResultCreateBulk) ExecX(ctx context.Context) {
	if err := pmrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
