// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/intezya/abyssleague/services/abysscore/internal/infrastructure/ent/bannedhardwareid"
)

// BannedHardwareID is the model entity for the BannedHardwareID schema.
type BannedHardwareID struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// HardwareID holds the value of the "hardware_id" field.
	HardwareID string `json:"hardware_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// BanReason holds the value of the "ban_reason" field.
	BanReason    *string `json:"ban_reason,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BannedHardwareID) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case bannedhardwareid.FieldID:
			values[i] = new(sql.NullInt64)
		case bannedhardwareid.FieldHardwareID, bannedhardwareid.FieldBanReason:
			values[i] = new(sql.NullString)
		case bannedhardwareid.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BannedHardwareID fields.
func (bhi *BannedHardwareID) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bannedhardwareid.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			bhi.ID = int(value.Int64)
		case bannedhardwareid.FieldHardwareID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hardware_id", values[i])
			} else if value.Valid {
				bhi.HardwareID = value.String
			}
		case bannedhardwareid.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				bhi.CreatedAt = value.Time
			}
		case bannedhardwareid.FieldBanReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ban_reason", values[i])
			} else if value.Valid {
				bhi.BanReason = new(string)
				*bhi.BanReason = value.String
			}
		default:
			bhi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BannedHardwareID.
// This includes values selected through modifiers, order, etc.
func (bhi *BannedHardwareID) Value(name string) (ent.Value, error) {
	return bhi.selectValues.Get(name)
}

// Update returns a builder for updating this BannedHardwareID.
// Note that you need to call BannedHardwareID.Unwrap() before calling this method if this BannedHardwareID
// was returned from a transaction, and the transaction was committed or rolled back.
func (bhi *BannedHardwareID) Update() *BannedHardwareIDUpdateOne {
	return NewBannedHardwareIDClient(bhi.config).UpdateOne(bhi)
}

// Unwrap unwraps the BannedHardwareID entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bhi *BannedHardwareID) Unwrap() *BannedHardwareID {
	_tx, ok := bhi.config.driver.(*txDriver)
	if !ok {
		panic("ent: BannedHardwareID is not a transactional entity")
	}
	bhi.config.driver = _tx.drv
	return bhi
}

// String implements the fmt.Stringer.
func (bhi *BannedHardwareID) String() string {
	var builder strings.Builder
	builder.WriteString("BannedHardwareID(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bhi.ID))
	builder.WriteString("hardware_id=")
	builder.WriteString(bhi.HardwareID)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(bhi.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := bhi.BanReason; v != nil {
		builder.WriteString("ban_reason=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// BannedHardwareIDs is a parsable slice of BannedHardwareID.
type BannedHardwareIDs []*BannedHardwareID
