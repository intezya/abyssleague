// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/intezya/abyssleague/services/abysscore/internal/infrastructure/ent/statistic"
	"github.com/intezya/abyssleague/services/abysscore/internal/infrastructure/ent/user"
)

// StatisticCreate is the builder for creating a Statistic entity.
type StatisticCreate struct {
	config
	mutation *StatisticMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (sc *StatisticCreate) SetUserID(i int) *StatisticCreate {
	sc.mutation.SetUserID(i)
	return sc
}

// SetType sets the "type" field.
func (sc *StatisticCreate) SetType(s statistic.Type) *StatisticCreate {
	sc.mutation.SetType(s)
	return sc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (sc *StatisticCreate) SetNillableType(s *statistic.Type) *StatisticCreate {
	if s != nil {
		sc.SetType(*s)
	}
	return sc
}

// SetPeriod sets the "period" field.
func (sc *StatisticCreate) SetPeriod(i int) *StatisticCreate {
	sc.mutation.SetPeriod(i)
	return sc
}

// SetNillablePeriod sets the "period" field if the given value is not nil.
func (sc *StatisticCreate) SetNillablePeriod(i *int) *StatisticCreate {
	if i != nil {
		sc.SetPeriod(*i)
	}
	return sc
}

// SetXp sets the "xp" field.
func (sc *StatisticCreate) SetXp(i int) *StatisticCreate {
	sc.mutation.SetXp(i)
	return sc
}

// SetNillableXp sets the "xp" field if the given value is not nil.
func (sc *StatisticCreate) SetNillableXp(i *int) *StatisticCreate {
	if i != nil {
		sc.SetXp(*i)
	}
	return sc
}

// SetMatchCount sets the "match_count" field.
func (sc *StatisticCreate) SetMatchCount(i int) *StatisticCreate {
	sc.mutation.SetMatchCount(i)
	return sc
}

// SetNillableMatchCount sets the "match_count" field if the given value is not nil.
func (sc *StatisticCreate) SetNillableMatchCount(i *int) *StatisticCreate {
	if i != nil {
		sc.SetMatchCount(*i)
	}
	return sc
}

// SetWinsCount sets the "wins_count" field.
func (sc *StatisticCreate) SetWinsCount(i int) *StatisticCreate {
	sc.mutation.SetWinsCount(i)
	return sc
}

// SetNillableWinsCount sets the "wins_count" field if the given value is not nil.
func (sc *StatisticCreate) SetNillableWinsCount(i *int) *StatisticCreate {
	if i != nil {
		sc.SetWinsCount(*i)
	}
	return sc
}

// SetLosesCount sets the "loses_count" field.
func (sc *StatisticCreate) SetLosesCount(i int) *StatisticCreate {
	sc.mutation.SetLosesCount(i)
	return sc
}

// SetNillableLosesCount sets the "loses_count" field if the given value is not nil.
func (sc *StatisticCreate) SetNillableLosesCount(i *int) *StatisticCreate {
	if i != nil {
		sc.SetLosesCount(*i)
	}
	return sc
}

// SetDrawsCount sets the "draws_count" field.
func (sc *StatisticCreate) SetDrawsCount(i int) *StatisticCreate {
	sc.mutation.SetDrawsCount(i)
	return sc
}

// SetNillableDrawsCount sets the "draws_count" field if the given value is not nil.
func (sc *StatisticCreate) SetNillableDrawsCount(i *int) *StatisticCreate {
	if i != nil {
		sc.SetDrawsCount(*i)
	}
	return sc
}

// SetResultTime sets the "result_time" field.
func (sc *StatisticCreate) SetResultTime(i int) *StatisticCreate {
	sc.mutation.SetResultTime(i)
	return sc
}

// SetNillableResultTime sets the "result_time" field if the given value is not nil.
func (sc *StatisticCreate) SetNillableResultTime(i *int) *StatisticCreate {
	if i != nil {
		sc.SetResultTime(*i)
	}
	return sc
}

// SetRetryTime sets the "retry_time" field.
func (sc *StatisticCreate) SetRetryTime(i int) *StatisticCreate {
	sc.mutation.SetRetryTime(i)
	return sc
}

// SetNillableRetryTime sets the "retry_time" field if the given value is not nil.
func (sc *StatisticCreate) SetNillableRetryTime(i *int) *StatisticCreate {
	if i != nil {
		sc.SetRetryTime(*i)
	}
	return sc
}

// SetRetryCount sets the "retry_count" field.
func (sc *StatisticCreate) SetRetryCount(i int) *StatisticCreate {
	sc.mutation.SetRetryCount(i)
	return sc
}

// SetNillableRetryCount sets the "retry_count" field if the given value is not nil.
func (sc *StatisticCreate) SetNillableRetryCount(i *int) *StatisticCreate {
	if i != nil {
		sc.SetRetryCount(*i)
	}
	return sc
}

// SetBestResultTime sets the "best_result_time" field.
func (sc *StatisticCreate) SetBestResultTime(i int) *StatisticCreate {
	sc.mutation.SetBestResultTime(i)
	return sc
}

// SetNillableBestResultTime sets the "best_result_time" field if the given value is not nil.
func (sc *StatisticCreate) SetNillableBestResultTime(i *int) *StatisticCreate {
	if i != nil {
		sc.SetBestResultTime(*i)
	}
	return sc
}

// SetBestRetryCount sets the "best_retry_count" field.
func (sc *StatisticCreate) SetBestRetryCount(i int) *StatisticCreate {
	sc.mutation.SetBestRetryCount(i)
	return sc
}

// SetNillableBestRetryCount sets the "best_retry_count" field if the given value is not nil.
func (sc *StatisticCreate) SetNillableBestRetryCount(i *int) *StatisticCreate {
	if i != nil {
		sc.SetBestRetryCount(*i)
	}
	return sc
}

// SetBestMatchTime sets the "best_match_time" field.
func (sc *StatisticCreate) SetBestMatchTime(i int) *StatisticCreate {
	sc.mutation.SetBestMatchTime(i)
	return sc
}

// SetNillableBestMatchTime sets the "best_match_time" field if the given value is not nil.
func (sc *StatisticCreate) SetNillableBestMatchTime(i *int) *StatisticCreate {
	if i != nil {
		sc.SetBestMatchTime(*i)
	}
	return sc
}

// SetWorstResultTime sets the "worst_result_time" field.
func (sc *StatisticCreate) SetWorstResultTime(i int) *StatisticCreate {
	sc.mutation.SetWorstResultTime(i)
	return sc
}

// SetNillableWorstResultTime sets the "worst_result_time" field if the given value is not nil.
func (sc *StatisticCreate) SetNillableWorstResultTime(i *int) *StatisticCreate {
	if i != nil {
		sc.SetWorstResultTime(*i)
	}
	return sc
}

// SetWorstRetryCount sets the "worst_retry_count" field.
func (sc *StatisticCreate) SetWorstRetryCount(i int) *StatisticCreate {
	sc.mutation.SetWorstRetryCount(i)
	return sc
}

// SetNillableWorstRetryCount sets the "worst_retry_count" field if the given value is not nil.
func (sc *StatisticCreate) SetNillableWorstRetryCount(i *int) *StatisticCreate {
	if i != nil {
		sc.SetWorstRetryCount(*i)
	}
	return sc
}

// SetWorstMatchTime sets the "worst_match_time" field.
func (sc *StatisticCreate) SetWorstMatchTime(i int) *StatisticCreate {
	sc.mutation.SetWorstMatchTime(i)
	return sc
}

// SetNillableWorstMatchTime sets the "worst_match_time" field if the given value is not nil.
func (sc *StatisticCreate) SetNillableWorstMatchTime(i *int) *StatisticCreate {
	if i != nil {
		sc.SetWorstMatchTime(*i)
	}
	return sc
}

// SetMaxWinStreak sets the "max_win_streak" field.
func (sc *StatisticCreate) SetMaxWinStreak(i int) *StatisticCreate {
	sc.mutation.SetMaxWinStreak(i)
	return sc
}

// SetNillableMaxWinStreak sets the "max_win_streak" field if the given value is not nil.
func (sc *StatisticCreate) SetNillableMaxWinStreak(i *int) *StatisticCreate {
	if i != nil {
		sc.SetMaxWinStreak(*i)
	}
	return sc
}

// SetMaxLoseStreak sets the "max_lose_streak" field.
func (sc *StatisticCreate) SetMaxLoseStreak(i int) *StatisticCreate {
	sc.mutation.SetMaxLoseStreak(i)
	return sc
}

// SetNillableMaxLoseStreak sets the "max_lose_streak" field if the given value is not nil.
func (sc *StatisticCreate) SetNillableMaxLoseStreak(i *int) *StatisticCreate {
	if i != nil {
		sc.SetMaxLoseStreak(*i)
	}
	return sc
}

// SetMaxLoginStreak sets the "max_login_streak" field.
func (sc *StatisticCreate) SetMaxLoginStreak(i int) *StatisticCreate {
	sc.mutation.SetMaxLoginStreak(i)
	return sc
}

// SetNillableMaxLoginStreak sets the "max_login_streak" field if the given value is not nil.
func (sc *StatisticCreate) SetNillableMaxLoginStreak(i *int) *StatisticCreate {
	if i != nil {
		sc.SetMaxLoginStreak(*i)
	}
	return sc
}

// SetSearchScore sets the "search_score" field.
func (sc *StatisticCreate) SetSearchScore(i int) *StatisticCreate {
	sc.mutation.SetSearchScore(i)
	return sc
}

// SetNillableSearchScore sets the "search_score" field if the given value is not nil.
func (sc *StatisticCreate) SetNillableSearchScore(i *int) *StatisticCreate {
	if i != nil {
		sc.SetSearchScore(*i)
	}
	return sc
}

// SetCreatedAt sets the "created_at" field.
func (sc *StatisticCreate) SetCreatedAt(t time.Time) *StatisticCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *StatisticCreate) SetNillableCreatedAt(t *time.Time) *StatisticCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *StatisticCreate) SetID(i int) *StatisticCreate {
	sc.mutation.SetID(i)
	return sc
}

// SetUser sets the "user" edge to the User entity.
func (sc *StatisticCreate) SetUser(u *User) *StatisticCreate {
	return sc.SetUserID(u.ID)
}

// Mutation returns the StatisticMutation object of the builder.
func (sc *StatisticCreate) Mutation() *StatisticMutation {
	return sc.mutation
}

// Save creates the Statistic in the database.
func (sc *StatisticCreate) Save(ctx context.Context) (*Statistic, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *StatisticCreate) SaveX(ctx context.Context) *Statistic {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *StatisticCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *StatisticCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *StatisticCreate) defaults() {
	if _, ok := sc.mutation.GetType(); !ok {
		v := statistic.DefaultType
		sc.mutation.SetType(v)
	}
	if _, ok := sc.mutation.Period(); !ok {
		v := statistic.DefaultPeriod
		sc.mutation.SetPeriod(v)
	}
	if _, ok := sc.mutation.Xp(); !ok {
		v := statistic.DefaultXp
		sc.mutation.SetXp(v)
	}
	if _, ok := sc.mutation.MatchCount(); !ok {
		v := statistic.DefaultMatchCount
		sc.mutation.SetMatchCount(v)
	}
	if _, ok := sc.mutation.WinsCount(); !ok {
		v := statistic.DefaultWinsCount
		sc.mutation.SetWinsCount(v)
	}
	if _, ok := sc.mutation.LosesCount(); !ok {
		v := statistic.DefaultLosesCount
		sc.mutation.SetLosesCount(v)
	}
	if _, ok := sc.mutation.DrawsCount(); !ok {
		v := statistic.DefaultDrawsCount
		sc.mutation.SetDrawsCount(v)
	}
	if _, ok := sc.mutation.ResultTime(); !ok {
		v := statistic.DefaultResultTime
		sc.mutation.SetResultTime(v)
	}
	if _, ok := sc.mutation.RetryTime(); !ok {
		v := statistic.DefaultRetryTime
		sc.mutation.SetRetryTime(v)
	}
	if _, ok := sc.mutation.RetryCount(); !ok {
		v := statistic.DefaultRetryCount
		sc.mutation.SetRetryCount(v)
	}
	if _, ok := sc.mutation.BestResultTime(); !ok {
		v := statistic.DefaultBestResultTime
		sc.mutation.SetBestResultTime(v)
	}
	if _, ok := sc.mutation.BestRetryCount(); !ok {
		v := statistic.DefaultBestRetryCount
		sc.mutation.SetBestRetryCount(v)
	}
	if _, ok := sc.mutation.BestMatchTime(); !ok {
		v := statistic.DefaultBestMatchTime
		sc.mutation.SetBestMatchTime(v)
	}
	if _, ok := sc.mutation.WorstResultTime(); !ok {
		v := statistic.DefaultWorstResultTime
		sc.mutation.SetWorstResultTime(v)
	}
	if _, ok := sc.mutation.WorstRetryCount(); !ok {
		v := statistic.DefaultWorstRetryCount
		sc.mutation.SetWorstRetryCount(v)
	}
	if _, ok := sc.mutation.WorstMatchTime(); !ok {
		v := statistic.DefaultWorstMatchTime
		sc.mutation.SetWorstMatchTime(v)
	}
	if _, ok := sc.mutation.MaxWinStreak(); !ok {
		v := statistic.DefaultMaxWinStreak
		sc.mutation.SetMaxWinStreak(v)
	}
	if _, ok := sc.mutation.MaxLoseStreak(); !ok {
		v := statistic.DefaultMaxLoseStreak
		sc.mutation.SetMaxLoseStreak(v)
	}
	if _, ok := sc.mutation.MaxLoginStreak(); !ok {
		v := statistic.DefaultMaxLoginStreak
		sc.mutation.SetMaxLoginStreak(v)
	}
	if _, ok := sc.mutation.SearchScore(); !ok {
		v := statistic.DefaultSearchScore
		sc.mutation.SetSearchScore(v)
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := statistic.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *StatisticCreate) check() error {
	if _, ok := sc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Statistic.user_id"`)}
	}
	if _, ok := sc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Statistic.type"`)}
	}
	if v, ok := sc.mutation.GetType(); ok {
		if err := statistic.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Statistic.type": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Period(); !ok {
		return &ValidationError{Name: "period", err: errors.New(`ent: missing required field "Statistic.period"`)}
	}
	if v, ok := sc.mutation.Period(); ok {
		if err := statistic.PeriodValidator(v); err != nil {
			return &ValidationError{Name: "period", err: fmt.Errorf(`ent: validator failed for field "Statistic.period": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Xp(); !ok {
		return &ValidationError{Name: "xp", err: errors.New(`ent: missing required field "Statistic.xp"`)}
	}
	if v, ok := sc.mutation.Xp(); ok {
		if err := statistic.XpValidator(v); err != nil {
			return &ValidationError{Name: "xp", err: fmt.Errorf(`ent: validator failed for field "Statistic.xp": %w`, err)}
		}
	}
	if _, ok := sc.mutation.MatchCount(); !ok {
		return &ValidationError{Name: "match_count", err: errors.New(`ent: missing required field "Statistic.match_count"`)}
	}
	if v, ok := sc.mutation.MatchCount(); ok {
		if err := statistic.MatchCountValidator(v); err != nil {
			return &ValidationError{Name: "match_count", err: fmt.Errorf(`ent: validator failed for field "Statistic.match_count": %w`, err)}
		}
	}
	if _, ok := sc.mutation.WinsCount(); !ok {
		return &ValidationError{Name: "wins_count", err: errors.New(`ent: missing required field "Statistic.wins_count"`)}
	}
	if v, ok := sc.mutation.WinsCount(); ok {
		if err := statistic.WinsCountValidator(v); err != nil {
			return &ValidationError{Name: "wins_count", err: fmt.Errorf(`ent: validator failed for field "Statistic.wins_count": %w`, err)}
		}
	}
	if _, ok := sc.mutation.LosesCount(); !ok {
		return &ValidationError{Name: "loses_count", err: errors.New(`ent: missing required field "Statistic.loses_count"`)}
	}
	if v, ok := sc.mutation.LosesCount(); ok {
		if err := statistic.LosesCountValidator(v); err != nil {
			return &ValidationError{Name: "loses_count", err: fmt.Errorf(`ent: validator failed for field "Statistic.loses_count": %w`, err)}
		}
	}
	if _, ok := sc.mutation.DrawsCount(); !ok {
		return &ValidationError{Name: "draws_count", err: errors.New(`ent: missing required field "Statistic.draws_count"`)}
	}
	if v, ok := sc.mutation.DrawsCount(); ok {
		if err := statistic.DrawsCountValidator(v); err != nil {
			return &ValidationError{Name: "draws_count", err: fmt.Errorf(`ent: validator failed for field "Statistic.draws_count": %w`, err)}
		}
	}
	if _, ok := sc.mutation.ResultTime(); !ok {
		return &ValidationError{Name: "result_time", err: errors.New(`ent: missing required field "Statistic.result_time"`)}
	}
	if v, ok := sc.mutation.ResultTime(); ok {
		if err := statistic.ResultTimeValidator(v); err != nil {
			return &ValidationError{Name: "result_time", err: fmt.Errorf(`ent: validator failed for field "Statistic.result_time": %w`, err)}
		}
	}
	if _, ok := sc.mutation.RetryTime(); !ok {
		return &ValidationError{Name: "retry_time", err: errors.New(`ent: missing required field "Statistic.retry_time"`)}
	}
	if v, ok := sc.mutation.RetryTime(); ok {
		if err := statistic.RetryTimeValidator(v); err != nil {
			return &ValidationError{Name: "retry_time", err: fmt.Errorf(`ent: validator failed for field "Statistic.retry_time": %w`, err)}
		}
	}
	if _, ok := sc.mutation.RetryCount(); !ok {
		return &ValidationError{Name: "retry_count", err: errors.New(`ent: missing required field "Statistic.retry_count"`)}
	}
	if v, ok := sc.mutation.RetryCount(); ok {
		if err := statistic.RetryCountValidator(v); err != nil {
			return &ValidationError{Name: "retry_count", err: fmt.Errorf(`ent: validator failed for field "Statistic.retry_count": %w`, err)}
		}
	}
	if _, ok := sc.mutation.BestResultTime(); !ok {
		return &ValidationError{Name: "best_result_time", err: errors.New(`ent: missing required field "Statistic.best_result_time"`)}
	}
	if v, ok := sc.mutation.BestResultTime(); ok {
		if err := statistic.BestResultTimeValidator(v); err != nil {
			return &ValidationError{Name: "best_result_time", err: fmt.Errorf(`ent: validator failed for field "Statistic.best_result_time": %w`, err)}
		}
	}
	if _, ok := sc.mutation.BestRetryCount(); !ok {
		return &ValidationError{Name: "best_retry_count", err: errors.New(`ent: missing required field "Statistic.best_retry_count"`)}
	}
	if v, ok := sc.mutation.BestRetryCount(); ok {
		if err := statistic.BestRetryCountValidator(v); err != nil {
			return &ValidationError{Name: "best_retry_count", err: fmt.Errorf(`ent: validator failed for field "Statistic.best_retry_count": %w`, err)}
		}
	}
	if _, ok := sc.mutation.BestMatchTime(); !ok {
		return &ValidationError{Name: "best_match_time", err: errors.New(`ent: missing required field "Statistic.best_match_time"`)}
	}
	if v, ok := sc.mutation.BestMatchTime(); ok {
		if err := statistic.BestMatchTimeValidator(v); err != nil {
			return &ValidationError{Name: "best_match_time", err: fmt.Errorf(`ent: validator failed for field "Statistic.best_match_time": %w`, err)}
		}
	}
	if _, ok := sc.mutation.WorstResultTime(); !ok {
		return &ValidationError{Name: "worst_result_time", err: errors.New(`ent: missing required field "Statistic.worst_result_time"`)}
	}
	if v, ok := sc.mutation.WorstResultTime(); ok {
		if err := statistic.WorstResultTimeValidator(v); err != nil {
			return &ValidationError{Name: "worst_result_time", err: fmt.Errorf(`ent: validator failed for field "Statistic.worst_result_time": %w`, err)}
		}
	}
	if _, ok := sc.mutation.WorstRetryCount(); !ok {
		return &ValidationError{Name: "worst_retry_count", err: errors.New(`ent: missing required field "Statistic.worst_retry_count"`)}
	}
	if v, ok := sc.mutation.WorstRetryCount(); ok {
		if err := statistic.WorstRetryCountValidator(v); err != nil {
			return &ValidationError{Name: "worst_retry_count", err: fmt.Errorf(`ent: validator failed for field "Statistic.worst_retry_count": %w`, err)}
		}
	}
	if _, ok := sc.mutation.WorstMatchTime(); !ok {
		return &ValidationError{Name: "worst_match_time", err: errors.New(`ent: missing required field "Statistic.worst_match_time"`)}
	}
	if v, ok := sc.mutation.WorstMatchTime(); ok {
		if err := statistic.WorstMatchTimeValidator(v); err != nil {
			return &ValidationError{Name: "worst_match_time", err: fmt.Errorf(`ent: validator failed for field "Statistic.worst_match_time": %w`, err)}
		}
	}
	if _, ok := sc.mutation.MaxWinStreak(); !ok {
		return &ValidationError{Name: "max_win_streak", err: errors.New(`ent: missing required field "Statistic.max_win_streak"`)}
	}
	if v, ok := sc.mutation.MaxWinStreak(); ok {
		if err := statistic.MaxWinStreakValidator(v); err != nil {
			return &ValidationError{Name: "max_win_streak", err: fmt.Errorf(`ent: validator failed for field "Statistic.max_win_streak": %w`, err)}
		}
	}
	if _, ok := sc.mutation.MaxLoseStreak(); !ok {
		return &ValidationError{Name: "max_lose_streak", err: errors.New(`ent: missing required field "Statistic.max_lose_streak"`)}
	}
	if v, ok := sc.mutation.MaxLoseStreak(); ok {
		if err := statistic.MaxLoseStreakValidator(v); err != nil {
			return &ValidationError{Name: "max_lose_streak", err: fmt.Errorf(`ent: validator failed for field "Statistic.max_lose_streak": %w`, err)}
		}
	}
	if _, ok := sc.mutation.MaxLoginStreak(); !ok {
		return &ValidationError{Name: "max_login_streak", err: errors.New(`ent: missing required field "Statistic.max_login_streak"`)}
	}
	if v, ok := sc.mutation.MaxLoginStreak(); ok {
		if err := statistic.MaxLoginStreakValidator(v); err != nil {
			return &ValidationError{Name: "max_login_streak", err: fmt.Errorf(`ent: validator failed for field "Statistic.max_login_streak": %w`, err)}
		}
	}
	if _, ok := sc.mutation.SearchScore(); !ok {
		return &ValidationError{Name: "search_score", err: errors.New(`ent: missing required field "Statistic.search_score"`)}
	}
	if v, ok := sc.mutation.SearchScore(); ok {
		if err := statistic.SearchScoreValidator(v); err != nil {
			return &ValidationError{Name: "search_score", err: fmt.Errorf(`ent: validator failed for field "Statistic.search_score": %w`, err)}
		}
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Statistic.created_at"`)}
	}
	if len(sc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Statistic.user"`)}
	}
	return nil
}

func (sc *StatisticCreate) sqlSave(ctx context.Context) (*Statistic, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *StatisticCreate) createSpec() (*Statistic, *sqlgraph.CreateSpec) {
	var (
		_node = &Statistic{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(statistic.Table, sqlgraph.NewFieldSpec(statistic.FieldID, field.TypeInt))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.GetType(); ok {
		_spec.SetField(statistic.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := sc.mutation.Period(); ok {
		_spec.SetField(statistic.FieldPeriod, field.TypeInt, value)
		_node.Period = value
	}
	if value, ok := sc.mutation.Xp(); ok {
		_spec.SetField(statistic.FieldXp, field.TypeInt, value)
		_node.Xp = value
	}
	if value, ok := sc.mutation.MatchCount(); ok {
		_spec.SetField(statistic.FieldMatchCount, field.TypeInt, value)
		_node.MatchCount = value
	}
	if value, ok := sc.mutation.WinsCount(); ok {
		_spec.SetField(statistic.FieldWinsCount, field.TypeInt, value)
		_node.WinsCount = value
	}
	if value, ok := sc.mutation.LosesCount(); ok {
		_spec.SetField(statistic.FieldLosesCount, field.TypeInt, value)
		_node.LosesCount = value
	}
	if value, ok := sc.mutation.DrawsCount(); ok {
		_spec.SetField(statistic.FieldDrawsCount, field.TypeInt, value)
		_node.DrawsCount = value
	}
	if value, ok := sc.mutation.ResultTime(); ok {
		_spec.SetField(statistic.FieldResultTime, field.TypeInt, value)
		_node.ResultTime = value
	}
	if value, ok := sc.mutation.RetryTime(); ok {
		_spec.SetField(statistic.FieldRetryTime, field.TypeInt, value)
		_node.RetryTime = value
	}
	if value, ok := sc.mutation.RetryCount(); ok {
		_spec.SetField(statistic.FieldRetryCount, field.TypeInt, value)
		_node.RetryCount = value
	}
	if value, ok := sc.mutation.BestResultTime(); ok {
		_spec.SetField(statistic.FieldBestResultTime, field.TypeInt, value)
		_node.BestResultTime = value
	}
	if value, ok := sc.mutation.BestRetryCount(); ok {
		_spec.SetField(statistic.FieldBestRetryCount, field.TypeInt, value)
		_node.BestRetryCount = value
	}
	if value, ok := sc.mutation.BestMatchTime(); ok {
		_spec.SetField(statistic.FieldBestMatchTime, field.TypeInt, value)
		_node.BestMatchTime = value
	}
	if value, ok := sc.mutation.WorstResultTime(); ok {
		_spec.SetField(statistic.FieldWorstResultTime, field.TypeInt, value)
		_node.WorstResultTime = value
	}
	if value, ok := sc.mutation.WorstRetryCount(); ok {
		_spec.SetField(statistic.FieldWorstRetryCount, field.TypeInt, value)
		_node.WorstRetryCount = value
	}
	if value, ok := sc.mutation.WorstMatchTime(); ok {
		_spec.SetField(statistic.FieldWorstMatchTime, field.TypeInt, value)
		_node.WorstMatchTime = value
	}
	if value, ok := sc.mutation.MaxWinStreak(); ok {
		_spec.SetField(statistic.FieldMaxWinStreak, field.TypeInt, value)
		_node.MaxWinStreak = value
	}
	if value, ok := sc.mutation.MaxLoseStreak(); ok {
		_spec.SetField(statistic.FieldMaxLoseStreak, field.TypeInt, value)
		_node.MaxLoseStreak = value
	}
	if value, ok := sc.mutation.MaxLoginStreak(); ok {
		_spec.SetField(statistic.FieldMaxLoginStreak, field.TypeInt, value)
		_node.MaxLoginStreak = value
	}
	if value, ok := sc.mutation.SearchScore(); ok {
		_spec.SetField(statistic.FieldSearchScore, field.TypeInt, value)
		_node.SearchScore = value
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(statistic.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := sc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   statistic.UserTable,
			Columns: []string{statistic.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// StatisticCreateBulk is the builder for creating many Statistic entities in bulk.
type StatisticCreateBulk struct {
	config
	err      error
	builders []*StatisticCreate
}

// Save creates the Statistic entities in the database.
func (scb *StatisticCreateBulk) Save(ctx context.Context) ([]*Statistic, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Statistic, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StatisticMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *StatisticCreateBulk) SaveX(ctx context.Context) []*Statistic {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *StatisticCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *StatisticCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
