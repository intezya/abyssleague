// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/intezya/abyssleague/services/abysscore/internal/infrastructure/ent/predicate"
	"github.com/intezya/abyssleague/services/abysscore/internal/infrastructure/ent/user"
	"github.com/intezya/abyssleague/services/abysscore/internal/infrastructure/ent/userbalance"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserBalanceUpdate is the builder for updating UserBalance entities.
type UserBalanceUpdate struct {
	config
	hooks    []Hook
	mutation *UserBalanceMutation
}

// Where appends a list predicates to the UserBalanceUpdate builder.
func (ubu *UserBalanceUpdate) Where(ps ...predicate.UserBalance) *UserBalanceUpdate {
	ubu.mutation.Where(ps...)
	return ubu
}

// SetUserID sets the "user_id" field.
func (ubu *UserBalanceUpdate) SetUserID(i int) *UserBalanceUpdate {
	ubu.mutation.SetUserID(i)
	return ubu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ubu *UserBalanceUpdate) SetNillableUserID(i *int) *UserBalanceUpdate {
	if i != nil {
		ubu.SetUserID(*i)
	}
	return ubu
}

// SetCoins sets the "coins" field.
func (ubu *UserBalanceUpdate) SetCoins(f float64) *UserBalanceUpdate {
	ubu.mutation.ResetCoins()
	ubu.mutation.SetCoins(f)
	return ubu
}

// SetNillableCoins sets the "coins" field if the given value is not nil.
func (ubu *UserBalanceUpdate) SetNillableCoins(f *float64) *UserBalanceUpdate {
	if f != nil {
		ubu.SetCoins(*f)
	}
	return ubu
}

// AddCoins adds f to the "coins" field.
func (ubu *UserBalanceUpdate) AddCoins(f float64) *UserBalanceUpdate {
	ubu.mutation.AddCoins(f)
	return ubu
}

// SetLastUpdated sets the "last_updated" field.
func (ubu *UserBalanceUpdate) SetLastUpdated(t time.Time) *UserBalanceUpdate {
	ubu.mutation.SetLastUpdated(t)
	return ubu
}

// SetUser sets the "user" edge to the User entity.
func (ubu *UserBalanceUpdate) SetUser(u *User) *UserBalanceUpdate {
	return ubu.SetUserID(u.ID)
}

// Mutation returns the UserBalanceMutation object of the builder.
func (ubu *UserBalanceUpdate) Mutation() *UserBalanceMutation {
	return ubu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ubu *UserBalanceUpdate) ClearUser() *UserBalanceUpdate {
	ubu.mutation.ClearUser()
	return ubu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ubu *UserBalanceUpdate) Save(ctx context.Context) (int, error) {
	ubu.defaults()
	return withHooks(ctx, ubu.sqlSave, ubu.mutation, ubu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ubu *UserBalanceUpdate) SaveX(ctx context.Context) int {
	affected, err := ubu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ubu *UserBalanceUpdate) Exec(ctx context.Context) error {
	_, err := ubu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ubu *UserBalanceUpdate) ExecX(ctx context.Context) {
	if err := ubu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ubu *UserBalanceUpdate) defaults() {
	if _, ok := ubu.mutation.LastUpdated(); !ok {
		v := userbalance.UpdateDefaultLastUpdated()
		ubu.mutation.SetLastUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ubu *UserBalanceUpdate) check() error {
	if ubu.mutation.UserCleared() && len(ubu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserBalance.user"`)
	}
	return nil
}

func (ubu *UserBalanceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ubu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(userbalance.Table, userbalance.Columns, sqlgraph.NewFieldSpec(userbalance.FieldID, field.TypeInt))
	if ps := ubu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ubu.mutation.Coins(); ok {
		_spec.SetField(userbalance.FieldCoins, field.TypeFloat64, value)
	}
	if value, ok := ubu.mutation.AddedCoins(); ok {
		_spec.AddField(userbalance.FieldCoins, field.TypeFloat64, value)
	}
	if value, ok := ubu.mutation.LastUpdated(); ok {
		_spec.SetField(userbalance.FieldLastUpdated, field.TypeTime, value)
	}
	if ubu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   userbalance.UserTable,
			Columns: []string{userbalance.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ubu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   userbalance.UserTable,
			Columns: []string{userbalance.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ubu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userbalance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ubu.mutation.done = true
	return n, nil
}

// UserBalanceUpdateOne is the builder for updating a single UserBalance entity.
type UserBalanceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserBalanceMutation
}

// SetUserID sets the "user_id" field.
func (ubuo *UserBalanceUpdateOne) SetUserID(i int) *UserBalanceUpdateOne {
	ubuo.mutation.SetUserID(i)
	return ubuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ubuo *UserBalanceUpdateOne) SetNillableUserID(i *int) *UserBalanceUpdateOne {
	if i != nil {
		ubuo.SetUserID(*i)
	}
	return ubuo
}

// SetCoins sets the "coins" field.
func (ubuo *UserBalanceUpdateOne) SetCoins(f float64) *UserBalanceUpdateOne {
	ubuo.mutation.ResetCoins()
	ubuo.mutation.SetCoins(f)
	return ubuo
}

// SetNillableCoins sets the "coins" field if the given value is not nil.
func (ubuo *UserBalanceUpdateOne) SetNillableCoins(f *float64) *UserBalanceUpdateOne {
	if f != nil {
		ubuo.SetCoins(*f)
	}
	return ubuo
}

// AddCoins adds f to the "coins" field.
func (ubuo *UserBalanceUpdateOne) AddCoins(f float64) *UserBalanceUpdateOne {
	ubuo.mutation.AddCoins(f)
	return ubuo
}

// SetLastUpdated sets the "last_updated" field.
func (ubuo *UserBalanceUpdateOne) SetLastUpdated(t time.Time) *UserBalanceUpdateOne {
	ubuo.mutation.SetLastUpdated(t)
	return ubuo
}

// SetUser sets the "user" edge to the User entity.
func (ubuo *UserBalanceUpdateOne) SetUser(u *User) *UserBalanceUpdateOne {
	return ubuo.SetUserID(u.ID)
}

// Mutation returns the UserBalanceMutation object of the builder.
func (ubuo *UserBalanceUpdateOne) Mutation() *UserBalanceMutation {
	return ubuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ubuo *UserBalanceUpdateOne) ClearUser() *UserBalanceUpdateOne {
	ubuo.mutation.ClearUser()
	return ubuo
}

// Where appends a list predicates to the UserBalanceUpdate builder.
func (ubuo *UserBalanceUpdateOne) Where(ps ...predicate.UserBalance) *UserBalanceUpdateOne {
	ubuo.mutation.Where(ps...)
	return ubuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ubuo *UserBalanceUpdateOne) Select(field string, fields ...string) *UserBalanceUpdateOne {
	ubuo.fields = append([]string{field}, fields...)
	return ubuo
}

// Save executes the query and returns the updated UserBalance entity.
func (ubuo *UserBalanceUpdateOne) Save(ctx context.Context) (*UserBalance, error) {
	ubuo.defaults()
	return withHooks(ctx, ubuo.sqlSave, ubuo.mutation, ubuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ubuo *UserBalanceUpdateOne) SaveX(ctx context.Context) *UserBalance {
	node, err := ubuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ubuo *UserBalanceUpdateOne) Exec(ctx context.Context) error {
	_, err := ubuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ubuo *UserBalanceUpdateOne) ExecX(ctx context.Context) {
	if err := ubuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ubuo *UserBalanceUpdateOne) defaults() {
	if _, ok := ubuo.mutation.LastUpdated(); !ok {
		v := userbalance.UpdateDefaultLastUpdated()
		ubuo.mutation.SetLastUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ubuo *UserBalanceUpdateOne) check() error {
	if ubuo.mutation.UserCleared() && len(ubuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserBalance.user"`)
	}
	return nil
}

func (ubuo *UserBalanceUpdateOne) sqlSave(ctx context.Context) (_node *UserBalance, err error) {
	if err := ubuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userbalance.Table, userbalance.Columns, sqlgraph.NewFieldSpec(userbalance.FieldID, field.TypeInt))
	id, ok := ubuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserBalance.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ubuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userbalance.FieldID)
		for _, f := range fields {
			if !userbalance.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userbalance.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ubuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ubuo.mutation.Coins(); ok {
		_spec.SetField(userbalance.FieldCoins, field.TypeFloat64, value)
	}
	if value, ok := ubuo.mutation.AddedCoins(); ok {
		_spec.AddField(userbalance.FieldCoins, field.TypeFloat64, value)
	}
	if value, ok := ubuo.mutation.LastUpdated(); ok {
		_spec.SetField(userbalance.FieldLastUpdated, field.TypeTime, value)
	}
	if ubuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   userbalance.UserTable,
			Columns: []string{userbalance.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ubuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   userbalance.UserTable,
			Columns: []string{userbalance.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserBalance{config: ubuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ubuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userbalance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ubuo.mutation.done = true
	return _node, nil
}
