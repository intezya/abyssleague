// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/intezya/abyssleague/services/abysscore/internal/infrastructure/ent/playermatchresult"
	"github.com/intezya/abyssleague/services/abysscore/internal/infrastructure/ent/predicate"
)

// PlayerMatchResultDelete is the builder for deleting a PlayerMatchResult entity.
type PlayerMatchResultDelete struct {
	config
	hooks    []Hook
	mutation *PlayerMatchResultMutation
}

// Where appends a list predicates to the PlayerMatchResultDelete builder.
func (pmrd *PlayerMatchResultDelete) Where(ps ...predicate.PlayerMatchResult) *PlayerMatchResultDelete {
	pmrd.mutation.Where(ps...)
	return pmrd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (pmrd *PlayerMatchResultDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, pmrd.sqlExec, pmrd.mutation, pmrd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (pmrd *PlayerMatchResultDelete) ExecX(ctx context.Context) int {
	n, err := pmrd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (pmrd *PlayerMatchResultDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(playermatchresult.Table, sqlgraph.NewFieldSpec(playermatchresult.FieldID, field.TypeInt))
	if ps := pmrd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, pmrd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	pmrd.mutation.done = true
	return affected, err
}

// PlayerMatchResultDeleteOne is the builder for deleting a single PlayerMatchResult entity.
type PlayerMatchResultDeleteOne struct {
	pmrd *PlayerMatchResultDelete
}

// Where appends a list predicates to the PlayerMatchResultDelete builder.
func (pmrdo *PlayerMatchResultDeleteOne) Where(ps ...predicate.PlayerMatchResult) *PlayerMatchResultDeleteOne {
	pmrdo.pmrd.mutation.Where(ps...)
	return pmrdo
}

// Exec executes the deletion query.
func (pmrdo *PlayerMatchResultDeleteOne) Exec(ctx context.Context) error {
	n, err := pmrdo.pmrd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{playermatchresult.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (pmrdo *PlayerMatchResultDeleteOne) ExecX(ctx context.Context) {
	if err := pmrdo.Exec(ctx); err != nil {
		panic(err)
	}
}
