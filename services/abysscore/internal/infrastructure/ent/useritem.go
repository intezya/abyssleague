// Code generated by ent, DO NOT EDIT.

package ent

import (
	"abysscore/internal/infrastructure/ent/gameitem"
	"abysscore/internal/infrastructure/ent/user"
	"abysscore/internal/infrastructure/ent/useritem"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UserItem is the model entity for the UserItem schema.
type UserItem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// ItemID holds the value of the "item_id" field.
	ItemID int `json:"item_id,omitempty"`
	// ReceivedFromID holds the value of the "received_from_id" field.
	ReceivedFromID int `json:"received_from_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserItemQuery when eager-loading is set.
	Edges        UserItemEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserItemEdges holds the relations/edges for other nodes in the graph.
type UserItemEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Item holds the value of the item edge.
	Item *GameItem `json:"item,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserItemEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// ItemOrErr returns the Item value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserItemEdges) ItemOrErr() (*GameItem, error) {
	if e.Item != nil {
		return e.Item, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: gameitem.Label}
	}
	return nil, &NotLoadedError{edge: "item"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case useritem.FieldID, useritem.FieldUserID, useritem.FieldItemID, useritem.FieldReceivedFromID:
			values[i] = new(sql.NullInt64)
		case useritem.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserItem fields.
func (ui *UserItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case useritem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ui.ID = int(value.Int64)
		case useritem.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ui.UserID = int(value.Int64)
			}
		case useritem.FieldItemID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field item_id", values[i])
			} else if value.Valid {
				ui.ItemID = int(value.Int64)
			}
		case useritem.FieldReceivedFromID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field received_from_id", values[i])
			} else if value.Valid {
				ui.ReceivedFromID = int(value.Int64)
			}
		case useritem.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ui.CreatedAt = value.Time
			}
		default:
			ui.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserItem.
// This includes values selected through modifiers, order, etc.
func (ui *UserItem) Value(name string) (ent.Value, error) {
	return ui.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserItem entity.
func (ui *UserItem) QueryUser() *UserQuery {
	return NewUserItemClient(ui.config).QueryUser(ui)
}

// QueryItem queries the "item" edge of the UserItem entity.
func (ui *UserItem) QueryItem() *GameItemQuery {
	return NewUserItemClient(ui.config).QueryItem(ui)
}

// Update returns a builder for updating this UserItem.
// Note that you need to call UserItem.Unwrap() before calling this method if this UserItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (ui *UserItem) Update() *UserItemUpdateOne {
	return NewUserItemClient(ui.config).UpdateOne(ui)
}

// Unwrap unwraps the UserItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ui *UserItem) Unwrap() *UserItem {
	_tx, ok := ui.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserItem is not a transactional entity")
	}
	ui.config.driver = _tx.drv
	return ui
}

// String implements the fmt.Stringer.
func (ui *UserItem) String() string {
	var builder strings.Builder
	builder.WriteString("UserItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ui.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ui.UserID))
	builder.WriteString(", ")
	builder.WriteString("item_id=")
	builder.WriteString(fmt.Sprintf("%v", ui.ItemID))
	builder.WriteString(", ")
	builder.WriteString("received_from_id=")
	builder.WriteString(fmt.Sprintf("%v", ui.ReceivedFromID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ui.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UserItems is a parsable slice of UserItem.
type UserItems []*UserItem
