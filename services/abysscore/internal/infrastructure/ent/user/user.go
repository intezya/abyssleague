// Code generated by ent, DO NOT EDIT.

package user

import (
	"abysscore/internal/infrastructure/ent/schema/access_level"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldLowerUsername holds the string denoting the lower_username field in the database.
	FieldLowerUsername = "lower_username"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldHardwareID holds the string denoting the hardware_id field in the database.
	FieldHardwareID = "hardware_id"
	// FieldAccessLevel holds the string denoting the access_level field in the database.
	FieldAccessLevel = "access_level"
	// FieldGenshinUID holds the string denoting the genshin_uid field in the database.
	FieldGenshinUID = "genshin_uid"
	// FieldHoyolabLogin holds the string denoting the hoyolab_login field in the database.
	FieldHoyolabLogin = "hoyolab_login"
	// FieldCurrentMatchID holds the string denoting the current_match_id field in the database.
	FieldCurrentMatchID = "current_match_id"
	// FieldCurrentItemInProfileID holds the string denoting the current_item_in_profile_id field in the database.
	FieldCurrentItemInProfileID = "current_item_in_profile_id"
	// FieldAvatarURL holds the string denoting the avatar_url field in the database.
	FieldAvatarURL = "avatar_url"
	// FieldInvitesEnabled holds the string denoting the invites_enabled field in the database.
	FieldInvitesEnabled = "invites_enabled"
	// FieldLoginAt holds the string denoting the login_at field in the database.
	FieldLoginAt = "login_at"
	// FieldLoginStreak holds the string denoting the login_streak field in the database.
	FieldLoginStreak = "login_streak"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldSearchBlockedUntil holds the string denoting the search_blocked_until field in the database.
	FieldSearchBlockedUntil = "search_blocked_until"
	// FieldSearchBlockReason holds the string denoting the search_block_reason field in the database.
	FieldSearchBlockReason = "search_block_reason"
	// FieldSearchBlockedLevel holds the string denoting the search_blocked_level field in the database.
	FieldSearchBlockedLevel = "search_blocked_level"
	// FieldAccountBlockedUntil holds the string denoting the account_blocked_until field in the database.
	FieldAccountBlockedUntil = "account_blocked_until"
	// FieldAccountBlockReason holds the string denoting the account_block_reason field in the database.
	FieldAccountBlockReason = "account_block_reason"
	// FieldAccountBlockedLevel holds the string denoting the account_blocked_level field in the database.
	FieldAccountBlockedLevel = "account_blocked_level"
	// EdgeStatistics holds the string denoting the statistics edge name in mutations.
	EdgeStatistics = "statistics"
	// EdgeFriends holds the string denoting the friends edge name in mutations.
	EdgeFriends = "friends"
	// EdgeSentFriendRequests holds the string denoting the sent_friend_requests edge name in mutations.
	EdgeSentFriendRequests = "sent_friend_requests"
	// EdgeReceivedFriendRequests holds the string denoting the received_friend_requests edge name in mutations.
	EdgeReceivedFriendRequests = "received_friend_requests"
	// EdgeItems holds the string denoting the items edge name in mutations.
	EdgeItems = "items"
	// EdgeCurrentItem holds the string denoting the current_item edge name in mutations.
	EdgeCurrentItem = "current_item"
	// EdgeCurrentMatch holds the string denoting the current_match edge name in mutations.
	EdgeCurrentMatch = "current_match"
	// EdgeBalance holds the string denoting the balance edge name in mutations.
	EdgeBalance = "balance"
	// Table holds the table name of the user in the database.
	Table = "users"
	// StatisticsTable is the table that holds the statistics relation/edge.
	StatisticsTable = "statistics"
	// StatisticsInverseTable is the table name for the Statistic entity.
	// It exists in this package in order to avoid circular dependency with the "statistic" package.
	StatisticsInverseTable = "statistics"
	// StatisticsColumn is the table column denoting the statistics relation/edge.
	StatisticsColumn = "user_id"
	// FriendsTable is the table that holds the friends relation/edge. The primary key declared below.
	FriendsTable = "user_friends"
	// SentFriendRequestsTable is the table that holds the sent_friend_requests relation/edge.
	SentFriendRequestsTable = "friend_requests"
	// SentFriendRequestsInverseTable is the table name for the FriendRequest entity.
	// It exists in this package in order to avoid circular dependency with the "friendrequest" package.
	SentFriendRequestsInverseTable = "friend_requests"
	// SentFriendRequestsColumn is the table column denoting the sent_friend_requests relation/edge.
	SentFriendRequestsColumn = "from_user_id"
	// ReceivedFriendRequestsTable is the table that holds the received_friend_requests relation/edge.
	ReceivedFriendRequestsTable = "friend_requests"
	// ReceivedFriendRequestsInverseTable is the table name for the FriendRequest entity.
	// It exists in this package in order to avoid circular dependency with the "friendrequest" package.
	ReceivedFriendRequestsInverseTable = "friend_requests"
	// ReceivedFriendRequestsColumn is the table column denoting the received_friend_requests relation/edge.
	ReceivedFriendRequestsColumn = "to_user_id"
	// ItemsTable is the table that holds the items relation/edge.
	ItemsTable = "inventory_items"
	// ItemsInverseTable is the table name for the InventoryItem entity.
	// It exists in this package in order to avoid circular dependency with the "inventoryitem" package.
	ItemsInverseTable = "inventory_items"
	// ItemsColumn is the table column denoting the items relation/edge.
	ItemsColumn = "user_id"
	// CurrentItemTable is the table that holds the current_item relation/edge.
	CurrentItemTable = "users"
	// CurrentItemInverseTable is the table name for the InventoryItem entity.
	// It exists in this package in order to avoid circular dependency with the "inventoryitem" package.
	CurrentItemInverseTable = "inventory_items"
	// CurrentItemColumn is the table column denoting the current_item relation/edge.
	CurrentItemColumn = "current_item_in_profile_id"
	// CurrentMatchTable is the table that holds the current_match relation/edge.
	CurrentMatchTable = "users"
	// CurrentMatchInverseTable is the table name for the Match entity.
	// It exists in this package in order to avoid circular dependency with the "match" package.
	CurrentMatchInverseTable = "matches"
	// CurrentMatchColumn is the table column denoting the current_match relation/edge.
	CurrentMatchColumn = "current_match_id"
	// BalanceTable is the table that holds the balance relation/edge.
	BalanceTable = "user_balances"
	// BalanceInverseTable is the table name for the UserBalance entity.
	// It exists in this package in order to avoid circular dependency with the "userbalance" package.
	BalanceInverseTable = "user_balances"
	// BalanceColumn is the table column denoting the balance relation/edge.
	BalanceColumn = "user_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldUsername,
	FieldLowerUsername,
	FieldEmail,
	FieldPassword,
	FieldHardwareID,
	FieldAccessLevel,
	FieldGenshinUID,
	FieldHoyolabLogin,
	FieldCurrentMatchID,
	FieldCurrentItemInProfileID,
	FieldAvatarURL,
	FieldInvitesEnabled,
	FieldLoginAt,
	FieldLoginStreak,
	FieldCreatedAt,
	FieldSearchBlockedUntil,
	FieldSearchBlockReason,
	FieldSearchBlockedLevel,
	FieldAccountBlockedUntil,
	FieldAccountBlockReason,
	FieldAccountBlockedLevel,
}

var (
	// FriendsPrimaryKey and FriendsColumn2 are the table columns denoting the
	// primary key for the friends relation (M2M).
	FriendsPrimaryKey = []string{"user_id", "friend_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	UsernameValidator func(string) error
	// LowerUsernameValidator is a validator for the "lower_username" field. It is called by the builders before save.
	LowerUsernameValidator func(string) error
	// PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	PasswordValidator func(string) error
	// DefaultAccessLevel holds the default value on creation for the "access_level" field.
	DefaultAccessLevel func() access_level.AccessLevel
	// DefaultInvitesEnabled holds the default value on creation for the "invites_enabled" field.
	DefaultInvitesEnabled bool
	// DefaultLoginAt holds the default value on creation for the "login_at" field.
	DefaultLoginAt func() time.Time
	// DefaultLoginStreak holds the default value on creation for the "login_streak" field.
	DefaultLoginStreak int
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultSearchBlockedLevel holds the default value on creation for the "search_blocked_level" field.
	DefaultSearchBlockedLevel int
	// SearchBlockedLevelValidator is a validator for the "search_blocked_level" field. It is called by the builders before save.
	SearchBlockedLevelValidator func(int) error
	// DefaultAccountBlockedLevel holds the default value on creation for the "account_blocked_level" field.
	DefaultAccountBlockedLevel int
	// AccountBlockedLevelValidator is a validator for the "account_blocked_level" field. It is called by the builders before save.
	AccountBlockedLevelValidator func(int) error
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByLowerUsername orders the results by the lower_username field.
func ByLowerUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLowerUsername, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByHardwareID orders the results by the hardware_id field.
func ByHardwareID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHardwareID, opts...).ToFunc()
}

// ByAccessLevel orders the results by the access_level field.
func ByAccessLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccessLevel, opts...).ToFunc()
}

// ByGenshinUID orders the results by the genshin_uid field.
func ByGenshinUID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGenshinUID, opts...).ToFunc()
}

// ByHoyolabLogin orders the results by the hoyolab_login field.
func ByHoyolabLogin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHoyolabLogin, opts...).ToFunc()
}

// ByCurrentMatchID orders the results by the current_match_id field.
func ByCurrentMatchID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrentMatchID, opts...).ToFunc()
}

// ByCurrentItemInProfileID orders the results by the current_item_in_profile_id field.
func ByCurrentItemInProfileID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrentItemInProfileID, opts...).ToFunc()
}

// ByAvatarURL orders the results by the avatar_url field.
func ByAvatarURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvatarURL, opts...).ToFunc()
}

// ByInvitesEnabled orders the results by the invites_enabled field.
func ByInvitesEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInvitesEnabled, opts...).ToFunc()
}

// ByLoginAt orders the results by the login_at field.
func ByLoginAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLoginAt, opts...).ToFunc()
}

// ByLoginStreak orders the results by the login_streak field.
func ByLoginStreak(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLoginStreak, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// BySearchBlockedUntil orders the results by the search_blocked_until field.
func BySearchBlockedUntil(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSearchBlockedUntil, opts...).ToFunc()
}

// BySearchBlockReason orders the results by the search_block_reason field.
func BySearchBlockReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSearchBlockReason, opts...).ToFunc()
}

// BySearchBlockedLevel orders the results by the search_blocked_level field.
func BySearchBlockedLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSearchBlockedLevel, opts...).ToFunc()
}

// ByAccountBlockedUntil orders the results by the account_blocked_until field.
func ByAccountBlockedUntil(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccountBlockedUntil, opts...).ToFunc()
}

// ByAccountBlockReason orders the results by the account_block_reason field.
func ByAccountBlockReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccountBlockReason, opts...).ToFunc()
}

// ByAccountBlockedLevel orders the results by the account_blocked_level field.
func ByAccountBlockedLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccountBlockedLevel, opts...).ToFunc()
}

// ByStatisticsCount orders the results by statistics count.
func ByStatisticsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newStatisticsStep(), opts...)
	}
}

// ByStatistics orders the results by statistics terms.
func ByStatistics(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStatisticsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFriendsCount orders the results by friends count.
func ByFriendsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFriendsStep(), opts...)
	}
}

// ByFriends orders the results by friends terms.
func ByFriends(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFriendsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySentFriendRequestsCount orders the results by sent_friend_requests count.
func BySentFriendRequestsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSentFriendRequestsStep(), opts...)
	}
}

// BySentFriendRequests orders the results by sent_friend_requests terms.
func BySentFriendRequests(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSentFriendRequestsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByReceivedFriendRequestsCount orders the results by received_friend_requests count.
func ByReceivedFriendRequestsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReceivedFriendRequestsStep(), opts...)
	}
}

// ByReceivedFriendRequests orders the results by received_friend_requests terms.
func ByReceivedFriendRequests(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReceivedFriendRequestsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByItemsCount orders the results by items count.
func ByItemsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newItemsStep(), opts...)
	}
}

// ByItems orders the results by items terms.
func ByItems(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newItemsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCurrentItemField orders the results by current_item field.
func ByCurrentItemField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCurrentItemStep(), sql.OrderByField(field, opts...))
	}
}

// ByCurrentMatchField orders the results by current_match field.
func ByCurrentMatchField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCurrentMatchStep(), sql.OrderByField(field, opts...))
	}
}

// ByBalanceField orders the results by balance field.
func ByBalanceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBalanceStep(), sql.OrderByField(field, opts...))
	}
}
func newStatisticsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StatisticsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, StatisticsTable, StatisticsColumn),
	)
}
func newFriendsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, FriendsTable, FriendsPrimaryKey...),
	)
}
func newSentFriendRequestsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SentFriendRequestsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SentFriendRequestsTable, SentFriendRequestsColumn),
	)
}
func newReceivedFriendRequestsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReceivedFriendRequestsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ReceivedFriendRequestsTable, ReceivedFriendRequestsColumn),
	)
}
func newItemsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ItemsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ItemsTable, ItemsColumn),
	)
}
func newCurrentItemStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CurrentItemInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CurrentItemTable, CurrentItemColumn),
	)
}
func newCurrentMatchStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CurrentMatchInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CurrentMatchTable, CurrentMatchColumn),
	)
}
func newBalanceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BalanceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, BalanceTable, BalanceColumn),
	)
}
