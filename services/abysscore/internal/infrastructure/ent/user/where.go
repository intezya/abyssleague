// Code generated by ent, DO NOT EDIT.

package user

import (
	"abysscore/internal/infrastructure/ent/predicate"
	"abysscore/internal/infrastructure/ent/schema/access_level"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUsername, v))
}

// LowerUsername applies equality check predicate on the "lower_username" field. It's identical to LowerUsernameEQ.
func LowerUsername(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLowerUsername, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPassword, v))
}

// HardwareID applies equality check predicate on the "hardware_id" field. It's identical to HardwareIDEQ.
func HardwareID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldHardwareID, v))
}

// AccessLevel applies equality check predicate on the "access_level" field. It's identical to AccessLevelEQ.
func AccessLevel(v access_level.AccessLevel) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAccessLevel, v))
}

// GenshinUID applies equality check predicate on the "genshin_uid" field. It's identical to GenshinUIDEQ.
func GenshinUID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldGenshinUID, v))
}

// HoyolabLogin applies equality check predicate on the "hoyolab_login" field. It's identical to HoyolabLoginEQ.
func HoyolabLogin(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldHoyolabLogin, v))
}

// CurrentMatchID applies equality check predicate on the "current_match_id" field. It's identical to CurrentMatchIDEQ.
func CurrentMatchID(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCurrentMatchID, v))
}

// CurrentItemInProfileID applies equality check predicate on the "current_item_in_profile_id" field. It's identical to CurrentItemInProfileIDEQ.
func CurrentItemInProfileID(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCurrentItemInProfileID, v))
}

// AvatarURL applies equality check predicate on the "avatar_url" field. It's identical to AvatarURLEQ.
func AvatarURL(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAvatarURL, v))
}

// InvitesEnabled applies equality check predicate on the "invites_enabled" field. It's identical to InvitesEnabledEQ.
func InvitesEnabled(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldInvitesEnabled, v))
}

// LoginAt applies equality check predicate on the "login_at" field. It's identical to LoginAtEQ.
func LoginAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLoginAt, v))
}

// LoginStreak applies equality check predicate on the "login_streak" field. It's identical to LoginStreakEQ.
func LoginStreak(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLoginStreak, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// SearchBlockedUntil applies equality check predicate on the "search_blocked_until" field. It's identical to SearchBlockedUntilEQ.
func SearchBlockedUntil(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSearchBlockedUntil, v))
}

// AccountBlockedUntil applies equality check predicate on the "account_blocked_until" field. It's identical to AccountBlockedUntilEQ.
func AccountBlockedUntil(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAccountBlockedUntil, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldUsername, v))
}

// LowerUsernameEQ applies the EQ predicate on the "lower_username" field.
func LowerUsernameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLowerUsername, v))
}

// LowerUsernameNEQ applies the NEQ predicate on the "lower_username" field.
func LowerUsernameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLowerUsername, v))
}

// LowerUsernameIn applies the In predicate on the "lower_username" field.
func LowerUsernameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldLowerUsername, vs...))
}

// LowerUsernameNotIn applies the NotIn predicate on the "lower_username" field.
func LowerUsernameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLowerUsername, vs...))
}

// LowerUsernameGT applies the GT predicate on the "lower_username" field.
func LowerUsernameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldLowerUsername, v))
}

// LowerUsernameGTE applies the GTE predicate on the "lower_username" field.
func LowerUsernameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLowerUsername, v))
}

// LowerUsernameLT applies the LT predicate on the "lower_username" field.
func LowerUsernameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldLowerUsername, v))
}

// LowerUsernameLTE applies the LTE predicate on the "lower_username" field.
func LowerUsernameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLowerUsername, v))
}

// LowerUsernameContains applies the Contains predicate on the "lower_username" field.
func LowerUsernameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldLowerUsername, v))
}

// LowerUsernameHasPrefix applies the HasPrefix predicate on the "lower_username" field.
func LowerUsernameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldLowerUsername, v))
}

// LowerUsernameHasSuffix applies the HasSuffix predicate on the "lower_username" field.
func LowerUsernameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldLowerUsername, v))
}

// LowerUsernameEqualFold applies the EqualFold predicate on the "lower_username" field.
func LowerUsernameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldLowerUsername, v))
}

// LowerUsernameContainsFold applies the ContainsFold predicate on the "lower_username" field.
func LowerUsernameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldLowerUsername, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailIsNil applies the IsNil predicate on the "email" field.
func EmailIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldEmail))
}

// EmailNotNil applies the NotNil predicate on the "email" field.
func EmailNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldEmail))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmail, v))
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPassword, v))
}

// HardwareIDEQ applies the EQ predicate on the "hardware_id" field.
func HardwareIDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldHardwareID, v))
}

// HardwareIDNEQ applies the NEQ predicate on the "hardware_id" field.
func HardwareIDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldHardwareID, v))
}

// HardwareIDIn applies the In predicate on the "hardware_id" field.
func HardwareIDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldHardwareID, vs...))
}

// HardwareIDNotIn applies the NotIn predicate on the "hardware_id" field.
func HardwareIDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldHardwareID, vs...))
}

// HardwareIDGT applies the GT predicate on the "hardware_id" field.
func HardwareIDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldHardwareID, v))
}

// HardwareIDGTE applies the GTE predicate on the "hardware_id" field.
func HardwareIDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldHardwareID, v))
}

// HardwareIDLT applies the LT predicate on the "hardware_id" field.
func HardwareIDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldHardwareID, v))
}

// HardwareIDLTE applies the LTE predicate on the "hardware_id" field.
func HardwareIDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldHardwareID, v))
}

// HardwareIDContains applies the Contains predicate on the "hardware_id" field.
func HardwareIDContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldHardwareID, v))
}

// HardwareIDHasPrefix applies the HasPrefix predicate on the "hardware_id" field.
func HardwareIDHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldHardwareID, v))
}

// HardwareIDHasSuffix applies the HasSuffix predicate on the "hardware_id" field.
func HardwareIDHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldHardwareID, v))
}

// HardwareIDIsNil applies the IsNil predicate on the "hardware_id" field.
func HardwareIDIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldHardwareID))
}

// HardwareIDNotNil applies the NotNil predicate on the "hardware_id" field.
func HardwareIDNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldHardwareID))
}

// HardwareIDEqualFold applies the EqualFold predicate on the "hardware_id" field.
func HardwareIDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldHardwareID, v))
}

// HardwareIDContainsFold applies the ContainsFold predicate on the "hardware_id" field.
func HardwareIDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldHardwareID, v))
}

// AccessLevelEQ applies the EQ predicate on the "access_level" field.
func AccessLevelEQ(v access_level.AccessLevel) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAccessLevel, v))
}

// AccessLevelNEQ applies the NEQ predicate on the "access_level" field.
func AccessLevelNEQ(v access_level.AccessLevel) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldAccessLevel, v))
}

// AccessLevelIn applies the In predicate on the "access_level" field.
func AccessLevelIn(vs ...access_level.AccessLevel) predicate.User {
	return predicate.User(sql.FieldIn(FieldAccessLevel, vs...))
}

// AccessLevelNotIn applies the NotIn predicate on the "access_level" field.
func AccessLevelNotIn(vs ...access_level.AccessLevel) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldAccessLevel, vs...))
}

// AccessLevelGT applies the GT predicate on the "access_level" field.
func AccessLevelGT(v access_level.AccessLevel) predicate.User {
	return predicate.User(sql.FieldGT(FieldAccessLevel, v))
}

// AccessLevelGTE applies the GTE predicate on the "access_level" field.
func AccessLevelGTE(v access_level.AccessLevel) predicate.User {
	return predicate.User(sql.FieldGTE(FieldAccessLevel, v))
}

// AccessLevelLT applies the LT predicate on the "access_level" field.
func AccessLevelLT(v access_level.AccessLevel) predicate.User {
	return predicate.User(sql.FieldLT(FieldAccessLevel, v))
}

// AccessLevelLTE applies the LTE predicate on the "access_level" field.
func AccessLevelLTE(v access_level.AccessLevel) predicate.User {
	return predicate.User(sql.FieldLTE(FieldAccessLevel, v))
}

// AccessLevelContains applies the Contains predicate on the "access_level" field.
func AccessLevelContains(v access_level.AccessLevel) predicate.User {
	vc := v.String()
	return predicate.User(sql.FieldContains(FieldAccessLevel, vc))
}

// AccessLevelHasPrefix applies the HasPrefix predicate on the "access_level" field.
func AccessLevelHasPrefix(v access_level.AccessLevel) predicate.User {
	vc := v.String()
	return predicate.User(sql.FieldHasPrefix(FieldAccessLevel, vc))
}

// AccessLevelHasSuffix applies the HasSuffix predicate on the "access_level" field.
func AccessLevelHasSuffix(v access_level.AccessLevel) predicate.User {
	vc := v.String()
	return predicate.User(sql.FieldHasSuffix(FieldAccessLevel, vc))
}

// AccessLevelEqualFold applies the EqualFold predicate on the "access_level" field.
func AccessLevelEqualFold(v access_level.AccessLevel) predicate.User {
	vc := v.String()
	return predicate.User(sql.FieldEqualFold(FieldAccessLevel, vc))
}

// AccessLevelContainsFold applies the ContainsFold predicate on the "access_level" field.
func AccessLevelContainsFold(v access_level.AccessLevel) predicate.User {
	vc := v.String()
	return predicate.User(sql.FieldContainsFold(FieldAccessLevel, vc))
}

// GenshinUIDEQ applies the EQ predicate on the "genshin_uid" field.
func GenshinUIDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldGenshinUID, v))
}

// GenshinUIDNEQ applies the NEQ predicate on the "genshin_uid" field.
func GenshinUIDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldGenshinUID, v))
}

// GenshinUIDIn applies the In predicate on the "genshin_uid" field.
func GenshinUIDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldGenshinUID, vs...))
}

// GenshinUIDNotIn applies the NotIn predicate on the "genshin_uid" field.
func GenshinUIDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldGenshinUID, vs...))
}

// GenshinUIDGT applies the GT predicate on the "genshin_uid" field.
func GenshinUIDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldGenshinUID, v))
}

// GenshinUIDGTE applies the GTE predicate on the "genshin_uid" field.
func GenshinUIDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldGenshinUID, v))
}

// GenshinUIDLT applies the LT predicate on the "genshin_uid" field.
func GenshinUIDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldGenshinUID, v))
}

// GenshinUIDLTE applies the LTE predicate on the "genshin_uid" field.
func GenshinUIDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldGenshinUID, v))
}

// GenshinUIDContains applies the Contains predicate on the "genshin_uid" field.
func GenshinUIDContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldGenshinUID, v))
}

// GenshinUIDHasPrefix applies the HasPrefix predicate on the "genshin_uid" field.
func GenshinUIDHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldGenshinUID, v))
}

// GenshinUIDHasSuffix applies the HasSuffix predicate on the "genshin_uid" field.
func GenshinUIDHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldGenshinUID, v))
}

// GenshinUIDIsNil applies the IsNil predicate on the "genshin_uid" field.
func GenshinUIDIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldGenshinUID))
}

// GenshinUIDNotNil applies the NotNil predicate on the "genshin_uid" field.
func GenshinUIDNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldGenshinUID))
}

// GenshinUIDEqualFold applies the EqualFold predicate on the "genshin_uid" field.
func GenshinUIDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldGenshinUID, v))
}

// GenshinUIDContainsFold applies the ContainsFold predicate on the "genshin_uid" field.
func GenshinUIDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldGenshinUID, v))
}

// HoyolabLoginEQ applies the EQ predicate on the "hoyolab_login" field.
func HoyolabLoginEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldHoyolabLogin, v))
}

// HoyolabLoginNEQ applies the NEQ predicate on the "hoyolab_login" field.
func HoyolabLoginNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldHoyolabLogin, v))
}

// HoyolabLoginIn applies the In predicate on the "hoyolab_login" field.
func HoyolabLoginIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldHoyolabLogin, vs...))
}

// HoyolabLoginNotIn applies the NotIn predicate on the "hoyolab_login" field.
func HoyolabLoginNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldHoyolabLogin, vs...))
}

// HoyolabLoginGT applies the GT predicate on the "hoyolab_login" field.
func HoyolabLoginGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldHoyolabLogin, v))
}

// HoyolabLoginGTE applies the GTE predicate on the "hoyolab_login" field.
func HoyolabLoginGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldHoyolabLogin, v))
}

// HoyolabLoginLT applies the LT predicate on the "hoyolab_login" field.
func HoyolabLoginLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldHoyolabLogin, v))
}

// HoyolabLoginLTE applies the LTE predicate on the "hoyolab_login" field.
func HoyolabLoginLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldHoyolabLogin, v))
}

// HoyolabLoginContains applies the Contains predicate on the "hoyolab_login" field.
func HoyolabLoginContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldHoyolabLogin, v))
}

// HoyolabLoginHasPrefix applies the HasPrefix predicate on the "hoyolab_login" field.
func HoyolabLoginHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldHoyolabLogin, v))
}

// HoyolabLoginHasSuffix applies the HasSuffix predicate on the "hoyolab_login" field.
func HoyolabLoginHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldHoyolabLogin, v))
}

// HoyolabLoginIsNil applies the IsNil predicate on the "hoyolab_login" field.
func HoyolabLoginIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldHoyolabLogin))
}

// HoyolabLoginNotNil applies the NotNil predicate on the "hoyolab_login" field.
func HoyolabLoginNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldHoyolabLogin))
}

// HoyolabLoginEqualFold applies the EqualFold predicate on the "hoyolab_login" field.
func HoyolabLoginEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldHoyolabLogin, v))
}

// HoyolabLoginContainsFold applies the ContainsFold predicate on the "hoyolab_login" field.
func HoyolabLoginContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldHoyolabLogin, v))
}

// CurrentMatchIDEQ applies the EQ predicate on the "current_match_id" field.
func CurrentMatchIDEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCurrentMatchID, v))
}

// CurrentMatchIDNEQ applies the NEQ predicate on the "current_match_id" field.
func CurrentMatchIDNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCurrentMatchID, v))
}

// CurrentMatchIDIn applies the In predicate on the "current_match_id" field.
func CurrentMatchIDIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldCurrentMatchID, vs...))
}

// CurrentMatchIDNotIn applies the NotIn predicate on the "current_match_id" field.
func CurrentMatchIDNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCurrentMatchID, vs...))
}

// CurrentMatchIDIsNil applies the IsNil predicate on the "current_match_id" field.
func CurrentMatchIDIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldCurrentMatchID))
}

// CurrentMatchIDNotNil applies the NotNil predicate on the "current_match_id" field.
func CurrentMatchIDNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldCurrentMatchID))
}

// CurrentItemInProfileIDEQ applies the EQ predicate on the "current_item_in_profile_id" field.
func CurrentItemInProfileIDEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCurrentItemInProfileID, v))
}

// CurrentItemInProfileIDNEQ applies the NEQ predicate on the "current_item_in_profile_id" field.
func CurrentItemInProfileIDNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCurrentItemInProfileID, v))
}

// CurrentItemInProfileIDIn applies the In predicate on the "current_item_in_profile_id" field.
func CurrentItemInProfileIDIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldCurrentItemInProfileID, vs...))
}

// CurrentItemInProfileIDNotIn applies the NotIn predicate on the "current_item_in_profile_id" field.
func CurrentItemInProfileIDNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCurrentItemInProfileID, vs...))
}

// CurrentItemInProfileIDIsNil applies the IsNil predicate on the "current_item_in_profile_id" field.
func CurrentItemInProfileIDIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldCurrentItemInProfileID))
}

// CurrentItemInProfileIDNotNil applies the NotNil predicate on the "current_item_in_profile_id" field.
func CurrentItemInProfileIDNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldCurrentItemInProfileID))
}

// AvatarURLEQ applies the EQ predicate on the "avatar_url" field.
func AvatarURLEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAvatarURL, v))
}

// AvatarURLNEQ applies the NEQ predicate on the "avatar_url" field.
func AvatarURLNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldAvatarURL, v))
}

// AvatarURLIn applies the In predicate on the "avatar_url" field.
func AvatarURLIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldAvatarURL, vs...))
}

// AvatarURLNotIn applies the NotIn predicate on the "avatar_url" field.
func AvatarURLNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldAvatarURL, vs...))
}

// AvatarURLGT applies the GT predicate on the "avatar_url" field.
func AvatarURLGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldAvatarURL, v))
}

// AvatarURLGTE applies the GTE predicate on the "avatar_url" field.
func AvatarURLGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldAvatarURL, v))
}

// AvatarURLLT applies the LT predicate on the "avatar_url" field.
func AvatarURLLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldAvatarURL, v))
}

// AvatarURLLTE applies the LTE predicate on the "avatar_url" field.
func AvatarURLLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldAvatarURL, v))
}

// AvatarURLContains applies the Contains predicate on the "avatar_url" field.
func AvatarURLContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldAvatarURL, v))
}

// AvatarURLHasPrefix applies the HasPrefix predicate on the "avatar_url" field.
func AvatarURLHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldAvatarURL, v))
}

// AvatarURLHasSuffix applies the HasSuffix predicate on the "avatar_url" field.
func AvatarURLHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldAvatarURL, v))
}

// AvatarURLIsNil applies the IsNil predicate on the "avatar_url" field.
func AvatarURLIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldAvatarURL))
}

// AvatarURLNotNil applies the NotNil predicate on the "avatar_url" field.
func AvatarURLNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldAvatarURL))
}

// AvatarURLEqualFold applies the EqualFold predicate on the "avatar_url" field.
func AvatarURLEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldAvatarURL, v))
}

// AvatarURLContainsFold applies the ContainsFold predicate on the "avatar_url" field.
func AvatarURLContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldAvatarURL, v))
}

// InvitesEnabledEQ applies the EQ predicate on the "invites_enabled" field.
func InvitesEnabledEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldInvitesEnabled, v))
}

// InvitesEnabledNEQ applies the NEQ predicate on the "invites_enabled" field.
func InvitesEnabledNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldInvitesEnabled, v))
}

// LoginAtEQ applies the EQ predicate on the "login_at" field.
func LoginAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLoginAt, v))
}

// LoginAtNEQ applies the NEQ predicate on the "login_at" field.
func LoginAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLoginAt, v))
}

// LoginAtIn applies the In predicate on the "login_at" field.
func LoginAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldLoginAt, vs...))
}

// LoginAtNotIn applies the NotIn predicate on the "login_at" field.
func LoginAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLoginAt, vs...))
}

// LoginAtGT applies the GT predicate on the "login_at" field.
func LoginAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldLoginAt, v))
}

// LoginAtGTE applies the GTE predicate on the "login_at" field.
func LoginAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLoginAt, v))
}

// LoginAtLT applies the LT predicate on the "login_at" field.
func LoginAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldLoginAt, v))
}

// LoginAtLTE applies the LTE predicate on the "login_at" field.
func LoginAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLoginAt, v))
}

// LoginStreakEQ applies the EQ predicate on the "login_streak" field.
func LoginStreakEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLoginStreak, v))
}

// LoginStreakNEQ applies the NEQ predicate on the "login_streak" field.
func LoginStreakNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLoginStreak, v))
}

// LoginStreakIn applies the In predicate on the "login_streak" field.
func LoginStreakIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldLoginStreak, vs...))
}

// LoginStreakNotIn applies the NotIn predicate on the "login_streak" field.
func LoginStreakNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLoginStreak, vs...))
}

// LoginStreakGT applies the GT predicate on the "login_streak" field.
func LoginStreakGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldLoginStreak, v))
}

// LoginStreakGTE applies the GTE predicate on the "login_streak" field.
func LoginStreakGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLoginStreak, v))
}

// LoginStreakLT applies the LT predicate on the "login_streak" field.
func LoginStreakLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldLoginStreak, v))
}

// LoginStreakLTE applies the LTE predicate on the "login_streak" field.
func LoginStreakLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLoginStreak, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreatedAt, v))
}

// SearchBlockedUntilEQ applies the EQ predicate on the "search_blocked_until" field.
func SearchBlockedUntilEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSearchBlockedUntil, v))
}

// SearchBlockedUntilNEQ applies the NEQ predicate on the "search_blocked_until" field.
func SearchBlockedUntilNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldSearchBlockedUntil, v))
}

// SearchBlockedUntilIn applies the In predicate on the "search_blocked_until" field.
func SearchBlockedUntilIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldSearchBlockedUntil, vs...))
}

// SearchBlockedUntilNotIn applies the NotIn predicate on the "search_blocked_until" field.
func SearchBlockedUntilNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldSearchBlockedUntil, vs...))
}

// SearchBlockedUntilGT applies the GT predicate on the "search_blocked_until" field.
func SearchBlockedUntilGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldSearchBlockedUntil, v))
}

// SearchBlockedUntilGTE applies the GTE predicate on the "search_blocked_until" field.
func SearchBlockedUntilGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldSearchBlockedUntil, v))
}

// SearchBlockedUntilLT applies the LT predicate on the "search_blocked_until" field.
func SearchBlockedUntilLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldSearchBlockedUntil, v))
}

// SearchBlockedUntilLTE applies the LTE predicate on the "search_blocked_until" field.
func SearchBlockedUntilLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldSearchBlockedUntil, v))
}

// SearchBlockedUntilIsNil applies the IsNil predicate on the "search_blocked_until" field.
func SearchBlockedUntilIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldSearchBlockedUntil))
}

// SearchBlockedUntilNotNil applies the NotNil predicate on the "search_blocked_until" field.
func SearchBlockedUntilNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldSearchBlockedUntil))
}

// AccountBlockedUntilEQ applies the EQ predicate on the "account_blocked_until" field.
func AccountBlockedUntilEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAccountBlockedUntil, v))
}

// AccountBlockedUntilNEQ applies the NEQ predicate on the "account_blocked_until" field.
func AccountBlockedUntilNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldAccountBlockedUntil, v))
}

// AccountBlockedUntilIn applies the In predicate on the "account_blocked_until" field.
func AccountBlockedUntilIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldAccountBlockedUntil, vs...))
}

// AccountBlockedUntilNotIn applies the NotIn predicate on the "account_blocked_until" field.
func AccountBlockedUntilNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldAccountBlockedUntil, vs...))
}

// AccountBlockedUntilGT applies the GT predicate on the "account_blocked_until" field.
func AccountBlockedUntilGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldAccountBlockedUntil, v))
}

// AccountBlockedUntilGTE applies the GTE predicate on the "account_blocked_until" field.
func AccountBlockedUntilGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldAccountBlockedUntil, v))
}

// AccountBlockedUntilLT applies the LT predicate on the "account_blocked_until" field.
func AccountBlockedUntilLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldAccountBlockedUntil, v))
}

// AccountBlockedUntilLTE applies the LTE predicate on the "account_blocked_until" field.
func AccountBlockedUntilLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldAccountBlockedUntil, v))
}

// AccountBlockedUntilIsNil applies the IsNil predicate on the "account_blocked_until" field.
func AccountBlockedUntilIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldAccountBlockedUntil))
}

// AccountBlockedUntilNotNil applies the NotNil predicate on the "account_blocked_until" field.
func AccountBlockedUntilNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldAccountBlockedUntil))
}

// HasStatistics applies the HasEdge predicate on the "statistics" edge.
func HasStatistics() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, StatisticsTable, StatisticsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStatisticsWith applies the HasEdge predicate on the "statistics" edge with a given conditions (other predicates).
func HasStatisticsWith(preds ...predicate.Statistic) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newStatisticsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFriends applies the HasEdge predicate on the "friends" edge.
func HasFriends() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, FriendsTable, FriendsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFriendsWith applies the HasEdge predicate on the "friends" edge with a given conditions (other predicates).
func HasFriendsWith(preds ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newFriendsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSentFriendRequests applies the HasEdge predicate on the "sent_friend_requests" edge.
func HasSentFriendRequests() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SentFriendRequestsTable, SentFriendRequestsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSentFriendRequestsWith applies the HasEdge predicate on the "sent_friend_requests" edge with a given conditions (other predicates).
func HasSentFriendRequestsWith(preds ...predicate.FriendRequest) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newSentFriendRequestsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReceivedFriendRequests applies the HasEdge predicate on the "received_friend_requests" edge.
func HasReceivedFriendRequests() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ReceivedFriendRequestsTable, ReceivedFriendRequestsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReceivedFriendRequestsWith applies the HasEdge predicate on the "received_friend_requests" edge with a given conditions (other predicates).
func HasReceivedFriendRequestsWith(preds ...predicate.FriendRequest) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newReceivedFriendRequestsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasItems applies the HasEdge predicate on the "items" edge.
func HasItems() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ItemsTable, ItemsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasItemsWith applies the HasEdge predicate on the "items" edge with a given conditions (other predicates).
func HasItemsWith(preds ...predicate.UserItem) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newItemsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCurrentItem applies the HasEdge predicate on the "current_item" edge.
func HasCurrentItem() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CurrentItemTable, CurrentItemColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCurrentItemWith applies the HasEdge predicate on the "current_item" edge with a given conditions (other predicates).
func HasCurrentItemWith(preds ...predicate.UserItem) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newCurrentItemStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCurrentMatch applies the HasEdge predicate on the "current_match" edge.
func HasCurrentMatch() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CurrentMatchTable, CurrentMatchColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCurrentMatchWith applies the HasEdge predicate on the "current_match" edge with a given conditions (other predicates).
func HasCurrentMatchWith(preds ...predicate.Match) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newCurrentMatchStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
