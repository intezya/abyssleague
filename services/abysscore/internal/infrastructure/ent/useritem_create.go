// Code generated by ent, DO NOT EDIT.

package ent

import (
	"abysscore/internal/infrastructure/ent/gameitem"
	"abysscore/internal/infrastructure/ent/user"
	"abysscore/internal/infrastructure/ent/useritem"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserItemCreate is the builder for creating a UserItem entity.
type UserItemCreate struct {
	config
	mutation *UserItemMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (uic *UserItemCreate) SetUserID(i int) *UserItemCreate {
	uic.mutation.SetUserID(i)
	return uic
}

// SetItemID sets the "item_id" field.
func (uic *UserItemCreate) SetItemID(i int) *UserItemCreate {
	uic.mutation.SetItemID(i)
	return uic
}

// SetReceivedFromID sets the "received_from_id" field.
func (uic *UserItemCreate) SetReceivedFromID(i int) *UserItemCreate {
	uic.mutation.SetReceivedFromID(i)
	return uic
}

// SetNillableReceivedFromID sets the "received_from_id" field if the given value is not nil.
func (uic *UserItemCreate) SetNillableReceivedFromID(i *int) *UserItemCreate {
	if i != nil {
		uic.SetReceivedFromID(*i)
	}
	return uic
}

// SetObtainedAt sets the "obtained_at" field.
func (uic *UserItemCreate) SetObtainedAt(t time.Time) *UserItemCreate {
	uic.mutation.SetObtainedAt(t)
	return uic
}

// SetNillableObtainedAt sets the "obtained_at" field if the given value is not nil.
func (uic *UserItemCreate) SetNillableObtainedAt(t *time.Time) *UserItemCreate {
	if t != nil {
		uic.SetObtainedAt(*t)
	}
	return uic
}

// SetID sets the "id" field.
func (uic *UserItemCreate) SetID(i int) *UserItemCreate {
	uic.mutation.SetID(i)
	return uic
}

// SetUser sets the "user" edge to the User entity.
func (uic *UserItemCreate) SetUser(u *User) *UserItemCreate {
	return uic.SetUserID(u.ID)
}

// SetItem sets the "item" edge to the GameItem entity.
func (uic *UserItemCreate) SetItem(g *GameItem) *UserItemCreate {
	return uic.SetItemID(g.ID)
}

// Mutation returns the UserItemMutation object of the builder.
func (uic *UserItemCreate) Mutation() *UserItemMutation {
	return uic.mutation
}

// Save creates the UserItem in the database.
func (uic *UserItemCreate) Save(ctx context.Context) (*UserItem, error) {
	uic.defaults()
	return withHooks(ctx, uic.sqlSave, uic.mutation, uic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uic *UserItemCreate) SaveX(ctx context.Context) *UserItem {
	v, err := uic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uic *UserItemCreate) Exec(ctx context.Context) error {
	_, err := uic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uic *UserItemCreate) ExecX(ctx context.Context) {
	if err := uic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uic *UserItemCreate) defaults() {
	if _, ok := uic.mutation.ReceivedFromID(); !ok {
		v := useritem.DefaultReceivedFromID
		uic.mutation.SetReceivedFromID(v)
	}
	if _, ok := uic.mutation.ObtainedAt(); !ok {
		v := useritem.DefaultObtainedAt()
		uic.mutation.SetObtainedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uic *UserItemCreate) check() error {
	if _, ok := uic.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "UserItem.user_id"`)}
	}
	if _, ok := uic.mutation.ItemID(); !ok {
		return &ValidationError{Name: "item_id", err: errors.New(`ent: missing required field "UserItem.item_id"`)}
	}
	if _, ok := uic.mutation.ReceivedFromID(); !ok {
		return &ValidationError{Name: "received_from_id", err: errors.New(`ent: missing required field "UserItem.received_from_id"`)}
	}
	if v, ok := uic.mutation.ReceivedFromID(); ok {
		if err := useritem.ReceivedFromIDValidator(v); err != nil {
			return &ValidationError{Name: "received_from_id", err: fmt.Errorf(`ent: validator failed for field "UserItem.received_from_id": %w`, err)}
		}
	}
	if _, ok := uic.mutation.ObtainedAt(); !ok {
		return &ValidationError{Name: "obtained_at", err: errors.New(`ent: missing required field "UserItem.obtained_at"`)}
	}
	if len(uic.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "UserItem.user"`)}
	}
	if len(uic.mutation.ItemIDs()) == 0 {
		return &ValidationError{Name: "item", err: errors.New(`ent: missing required edge "UserItem.item"`)}
	}
	return nil
}

func (uic *UserItemCreate) sqlSave(ctx context.Context) (*UserItem, error) {
	if err := uic.check(); err != nil {
		return nil, err
	}
	_node, _spec := uic.createSpec()
	if err := sqlgraph.CreateNode(ctx, uic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	uic.mutation.id = &_node.ID
	uic.mutation.done = true
	return _node, nil
}

func (uic *UserItemCreate) createSpec() (*UserItem, *sqlgraph.CreateSpec) {
	var (
		_node = &UserItem{config: uic.config}
		_spec = sqlgraph.NewCreateSpec(useritem.Table, sqlgraph.NewFieldSpec(useritem.FieldID, field.TypeInt))
	)
	if id, ok := uic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := uic.mutation.ReceivedFromID(); ok {
		_spec.SetField(useritem.FieldReceivedFromID, field.TypeInt, value)
		_node.ReceivedFromID = value
	}
	if value, ok := uic.mutation.ObtainedAt(); ok {
		_spec.SetField(useritem.FieldObtainedAt, field.TypeTime, value)
		_node.ObtainedAt = value
	}
	if nodes := uic.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useritem.UserTable,
			Columns: []string{useritem.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uic.mutation.ItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useritem.ItemTable,
			Columns: []string{useritem.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ItemID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserItemCreateBulk is the builder for creating many UserItem entities in bulk.
type UserItemCreateBulk struct {
	config
	err      error
	builders []*UserItemCreate
}

// Save creates the UserItem entities in the database.
func (uicb *UserItemCreateBulk) Save(ctx context.Context) ([]*UserItem, error) {
	if uicb.err != nil {
		return nil, uicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(uicb.builders))
	nodes := make([]*UserItem, len(uicb.builders))
	mutators := make([]Mutator, len(uicb.builders))
	for i := range uicb.builders {
		func(i int, root context.Context) {
			builder := uicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uicb *UserItemCreateBulk) SaveX(ctx context.Context) []*UserItem {
	v, err := uicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uicb *UserItemCreateBulk) Exec(ctx context.Context) error {
	_, err := uicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uicb *UserItemCreateBulk) ExecX(ctx context.Context) {
	if err := uicb.Exec(ctx); err != nil {
		panic(err)
	}
}
