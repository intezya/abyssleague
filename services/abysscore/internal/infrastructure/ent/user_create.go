// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/intezya/abyssleague/services/abysscore/internal/infrastructure/ent/friendrequest"
	"github.com/intezya/abyssleague/services/abysscore/internal/infrastructure/ent/inventoryitem"
	"github.com/intezya/abyssleague/services/abysscore/internal/infrastructure/ent/match"
	"github.com/intezya/abyssleague/services/abysscore/internal/infrastructure/ent/schema/access_level"
	"github.com/intezya/abyssleague/services/abysscore/internal/infrastructure/ent/statistic"
	"github.com/intezya/abyssleague/services/abysscore/internal/infrastructure/ent/user"
	"github.com/intezya/abyssleague/services/abysscore/internal/infrastructure/ent/userbalance"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
}

// SetUsername sets the "username" field.
func (uc *UserCreate) SetUsername(s string) *UserCreate {
	uc.mutation.SetUsername(s)
	return uc
}

// SetLowerUsername sets the "lower_username" field.
func (uc *UserCreate) SetLowerUsername(s string) *UserCreate {
	uc.mutation.SetLowerUsername(s)
	return uc
}

// SetEmail sets the "email" field.
func (uc *UserCreate) SetEmail(s string) *UserCreate {
	uc.mutation.SetEmail(s)
	return uc
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uc *UserCreate) SetNillableEmail(s *string) *UserCreate {
	if s != nil {
		uc.SetEmail(*s)
	}
	return uc
}

// SetPassword sets the "password" field.
func (uc *UserCreate) SetPassword(s string) *UserCreate {
	uc.mutation.SetPassword(s)
	return uc
}

// SetHardwareID sets the "hardware_id" field.
func (uc *UserCreate) SetHardwareID(s string) *UserCreate {
	uc.mutation.SetHardwareID(s)
	return uc
}

// SetNillableHardwareID sets the "hardware_id" field if the given value is not nil.
func (uc *UserCreate) SetNillableHardwareID(s *string) *UserCreate {
	if s != nil {
		uc.SetHardwareID(*s)
	}
	return uc
}

// SetAccessLevel sets the "access_level" field.
func (uc *UserCreate) SetAccessLevel(all access_level.AccessLevel) *UserCreate {
	uc.mutation.SetAccessLevel(all)
	return uc
}

// SetNillableAccessLevel sets the "access_level" field if the given value is not nil.
func (uc *UserCreate) SetNillableAccessLevel(all *access_level.AccessLevel) *UserCreate {
	if all != nil {
		uc.SetAccessLevel(*all)
	}
	return uc
}

// SetGenshinUID sets the "genshin_uid" field.
func (uc *UserCreate) SetGenshinUID(s string) *UserCreate {
	uc.mutation.SetGenshinUID(s)
	return uc
}

// SetNillableGenshinUID sets the "genshin_uid" field if the given value is not nil.
func (uc *UserCreate) SetNillableGenshinUID(s *string) *UserCreate {
	if s != nil {
		uc.SetGenshinUID(*s)
	}
	return uc
}

// SetHoyolabLogin sets the "hoyolab_login" field.
func (uc *UserCreate) SetHoyolabLogin(s string) *UserCreate {
	uc.mutation.SetHoyolabLogin(s)
	return uc
}

// SetNillableHoyolabLogin sets the "hoyolab_login" field if the given value is not nil.
func (uc *UserCreate) SetNillableHoyolabLogin(s *string) *UserCreate {
	if s != nil {
		uc.SetHoyolabLogin(*s)
	}
	return uc
}

// SetCurrentMatchID sets the "current_match_id" field.
func (uc *UserCreate) SetCurrentMatchID(i int) *UserCreate {
	uc.mutation.SetCurrentMatchID(i)
	return uc
}

// SetNillableCurrentMatchID sets the "current_match_id" field if the given value is not nil.
func (uc *UserCreate) SetNillableCurrentMatchID(i *int) *UserCreate {
	if i != nil {
		uc.SetCurrentMatchID(*i)
	}
	return uc
}

// SetCurrentItemInProfileID sets the "current_item_in_profile_id" field.
func (uc *UserCreate) SetCurrentItemInProfileID(i int) *UserCreate {
	uc.mutation.SetCurrentItemInProfileID(i)
	return uc
}

// SetNillableCurrentItemInProfileID sets the "current_item_in_profile_id" field if the given value is not nil.
func (uc *UserCreate) SetNillableCurrentItemInProfileID(i *int) *UserCreate {
	if i != nil {
		uc.SetCurrentItemInProfileID(*i)
	}
	return uc
}

// SetAvatarURL sets the "avatar_url" field.
func (uc *UserCreate) SetAvatarURL(s string) *UserCreate {
	uc.mutation.SetAvatarURL(s)
	return uc
}

// SetNillableAvatarURL sets the "avatar_url" field if the given value is not nil.
func (uc *UserCreate) SetNillableAvatarURL(s *string) *UserCreate {
	if s != nil {
		uc.SetAvatarURL(*s)
	}
	return uc
}

// SetInvitesEnabled sets the "invites_enabled" field.
func (uc *UserCreate) SetInvitesEnabled(b bool) *UserCreate {
	uc.mutation.SetInvitesEnabled(b)
	return uc
}

// SetNillableInvitesEnabled sets the "invites_enabled" field if the given value is not nil.
func (uc *UserCreate) SetNillableInvitesEnabled(b *bool) *UserCreate {
	if b != nil {
		uc.SetInvitesEnabled(*b)
	}
	return uc
}

// SetLoginAt sets the "login_at" field.
func (uc *UserCreate) SetLoginAt(t time.Time) *UserCreate {
	uc.mutation.SetLoginAt(t)
	return uc
}

// SetNillableLoginAt sets the "login_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableLoginAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetLoginAt(*t)
	}
	return uc
}

// SetLoginStreak sets the "login_streak" field.
func (uc *UserCreate) SetLoginStreak(i int) *UserCreate {
	uc.mutation.SetLoginStreak(i)
	return uc
}

// SetNillableLoginStreak sets the "login_streak" field if the given value is not nil.
func (uc *UserCreate) SetNillableLoginStreak(i *int) *UserCreate {
	if i != nil {
		uc.SetLoginStreak(*i)
	}
	return uc
}

// SetCreatedAt sets the "created_at" field.
func (uc *UserCreate) SetCreatedAt(t time.Time) *UserCreate {
	uc.mutation.SetCreatedAt(t)
	return uc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableCreatedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetCreatedAt(*t)
	}
	return uc
}

// SetSearchBlockedUntil sets the "search_blocked_until" field.
func (uc *UserCreate) SetSearchBlockedUntil(t time.Time) *UserCreate {
	uc.mutation.SetSearchBlockedUntil(t)
	return uc
}

// SetNillableSearchBlockedUntil sets the "search_blocked_until" field if the given value is not nil.
func (uc *UserCreate) SetNillableSearchBlockedUntil(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetSearchBlockedUntil(*t)
	}
	return uc
}

// SetSearchBlockReason sets the "search_block_reason" field.
func (uc *UserCreate) SetSearchBlockReason(s string) *UserCreate {
	uc.mutation.SetSearchBlockReason(s)
	return uc
}

// SetNillableSearchBlockReason sets the "search_block_reason" field if the given value is not nil.
func (uc *UserCreate) SetNillableSearchBlockReason(s *string) *UserCreate {
	if s != nil {
		uc.SetSearchBlockReason(*s)
	}
	return uc
}

// SetSearchBlockedLevel sets the "search_blocked_level" field.
func (uc *UserCreate) SetSearchBlockedLevel(i int) *UserCreate {
	uc.mutation.SetSearchBlockedLevel(i)
	return uc
}

// SetNillableSearchBlockedLevel sets the "search_blocked_level" field if the given value is not nil.
func (uc *UserCreate) SetNillableSearchBlockedLevel(i *int) *UserCreate {
	if i != nil {
		uc.SetSearchBlockedLevel(*i)
	}
	return uc
}

// SetAccountBlockedUntil sets the "account_blocked_until" field.
func (uc *UserCreate) SetAccountBlockedUntil(t time.Time) *UserCreate {
	uc.mutation.SetAccountBlockedUntil(t)
	return uc
}

// SetNillableAccountBlockedUntil sets the "account_blocked_until" field if the given value is not nil.
func (uc *UserCreate) SetNillableAccountBlockedUntil(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetAccountBlockedUntil(*t)
	}
	return uc
}

// SetAccountBlockReason sets the "account_block_reason" field.
func (uc *UserCreate) SetAccountBlockReason(s string) *UserCreate {
	uc.mutation.SetAccountBlockReason(s)
	return uc
}

// SetNillableAccountBlockReason sets the "account_block_reason" field if the given value is not nil.
func (uc *UserCreate) SetNillableAccountBlockReason(s *string) *UserCreate {
	if s != nil {
		uc.SetAccountBlockReason(*s)
	}
	return uc
}

// SetAccountBlockedLevel sets the "account_blocked_level" field.
func (uc *UserCreate) SetAccountBlockedLevel(i int) *UserCreate {
	uc.mutation.SetAccountBlockedLevel(i)
	return uc
}

// SetNillableAccountBlockedLevel sets the "account_blocked_level" field if the given value is not nil.
func (uc *UserCreate) SetNillableAccountBlockedLevel(i *int) *UserCreate {
	if i != nil {
		uc.SetAccountBlockedLevel(*i)
	}
	return uc
}

// SetID sets the "id" field.
func (uc *UserCreate) SetID(i int) *UserCreate {
	uc.mutation.SetID(i)
	return uc
}

// AddStatisticIDs adds the "statistics" edge to the Statistic entity by IDs.
func (uc *UserCreate) AddStatisticIDs(ids ...int) *UserCreate {
	uc.mutation.AddStatisticIDs(ids...)
	return uc
}

// AddStatistics adds the "statistics" edges to the Statistic entity.
func (uc *UserCreate) AddStatistics(s ...*Statistic) *UserCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uc.AddStatisticIDs(ids...)
}

// AddFriendIDs adds the "friends" edge to the User entity by IDs.
func (uc *UserCreate) AddFriendIDs(ids ...int) *UserCreate {
	uc.mutation.AddFriendIDs(ids...)
	return uc
}

// AddFriends adds the "friends" edges to the User entity.
func (uc *UserCreate) AddFriends(u ...*User) *UserCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uc.AddFriendIDs(ids...)
}

// AddSentFriendRequestIDs adds the "sent_friend_requests" edge to the FriendRequest entity by IDs.
func (uc *UserCreate) AddSentFriendRequestIDs(ids ...int) *UserCreate {
	uc.mutation.AddSentFriendRequestIDs(ids...)
	return uc
}

// AddSentFriendRequests adds the "sent_friend_requests" edges to the FriendRequest entity.
func (uc *UserCreate) AddSentFriendRequests(f ...*FriendRequest) *UserCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uc.AddSentFriendRequestIDs(ids...)
}

// AddReceivedFriendRequestIDs adds the "received_friend_requests" edge to the FriendRequest entity by IDs.
func (uc *UserCreate) AddReceivedFriendRequestIDs(ids ...int) *UserCreate {
	uc.mutation.AddReceivedFriendRequestIDs(ids...)
	return uc
}

// AddReceivedFriendRequests adds the "received_friend_requests" edges to the FriendRequest entity.
func (uc *UserCreate) AddReceivedFriendRequests(f ...*FriendRequest) *UserCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uc.AddReceivedFriendRequestIDs(ids...)
}

// AddItemIDs adds the "items" edge to the InventoryItem entity by IDs.
func (uc *UserCreate) AddItemIDs(ids ...int) *UserCreate {
	uc.mutation.AddItemIDs(ids...)
	return uc
}

// AddItems adds the "items" edges to the InventoryItem entity.
func (uc *UserCreate) AddItems(i ...*InventoryItem) *UserCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uc.AddItemIDs(ids...)
}

// SetCurrentItemID sets the "current_item" edge to the InventoryItem entity by ID.
func (uc *UserCreate) SetCurrentItemID(id int) *UserCreate {
	uc.mutation.SetCurrentItemID(id)
	return uc
}

// SetNillableCurrentItemID sets the "current_item" edge to the InventoryItem entity by ID if the given value is not nil.
func (uc *UserCreate) SetNillableCurrentItemID(id *int) *UserCreate {
	if id != nil {
		uc = uc.SetCurrentItemID(*id)
	}
	return uc
}

// SetCurrentItem sets the "current_item" edge to the InventoryItem entity.
func (uc *UserCreate) SetCurrentItem(i *InventoryItem) *UserCreate {
	return uc.SetCurrentItemID(i.ID)
}

// SetCurrentMatch sets the "current_match" edge to the Match entity.
func (uc *UserCreate) SetCurrentMatch(m *Match) *UserCreate {
	return uc.SetCurrentMatchID(m.ID)
}

// SetBalanceID sets the "balance" edge to the UserBalance entity by ID.
func (uc *UserCreate) SetBalanceID(id int) *UserCreate {
	uc.mutation.SetBalanceID(id)
	return uc
}

// SetNillableBalanceID sets the "balance" edge to the UserBalance entity by ID if the given value is not nil.
func (uc *UserCreate) SetNillableBalanceID(id *int) *UserCreate {
	if id != nil {
		uc = uc.SetBalanceID(*id)
	}
	return uc
}

// SetBalance sets the "balance" edge to the UserBalance entity.
func (uc *UserCreate) SetBalance(u *UserBalance) *UserCreate {
	return uc.SetBalanceID(u.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	uc.defaults()
	return withHooks(ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UserCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UserCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UserCreate) defaults() {
	if _, ok := uc.mutation.AccessLevel(); !ok {
		v := user.DefaultAccessLevel()
		uc.mutation.SetAccessLevel(v)
	}
	if _, ok := uc.mutation.InvitesEnabled(); !ok {
		v := user.DefaultInvitesEnabled
		uc.mutation.SetInvitesEnabled(v)
	}
	if _, ok := uc.mutation.LoginAt(); !ok {
		v := user.DefaultLoginAt()
		uc.mutation.SetLoginAt(v)
	}
	if _, ok := uc.mutation.LoginStreak(); !ok {
		v := user.DefaultLoginStreak
		uc.mutation.SetLoginStreak(v)
	}
	if _, ok := uc.mutation.CreatedAt(); !ok {
		v := user.DefaultCreatedAt()
		uc.mutation.SetCreatedAt(v)
	}
	if _, ok := uc.mutation.SearchBlockedLevel(); !ok {
		v := user.DefaultSearchBlockedLevel
		uc.mutation.SetSearchBlockedLevel(v)
	}
	if _, ok := uc.mutation.AccountBlockedLevel(); !ok {
		v := user.DefaultAccountBlockedLevel
		uc.mutation.SetAccountBlockedLevel(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "User.username"`)}
	}
	if v, ok := uc.mutation.Username(); ok {
		if err := user.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "User.username": %w`, err)}
		}
	}
	if _, ok := uc.mutation.LowerUsername(); !ok {
		return &ValidationError{Name: "lower_username", err: errors.New(`ent: missing required field "User.lower_username"`)}
	}
	if v, ok := uc.mutation.LowerUsername(); ok {
		if err := user.LowerUsernameValidator(v); err != nil {
			return &ValidationError{Name: "lower_username", err: fmt.Errorf(`ent: validator failed for field "User.lower_username": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "User.password"`)}
	}
	if v, ok := uc.mutation.Password(); ok {
		if err := user.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "User.password": %w`, err)}
		}
	}
	if _, ok := uc.mutation.AccessLevel(); !ok {
		return &ValidationError{Name: "access_level", err: errors.New(`ent: missing required field "User.access_level"`)}
	}
	if _, ok := uc.mutation.InvitesEnabled(); !ok {
		return &ValidationError{Name: "invites_enabled", err: errors.New(`ent: missing required field "User.invites_enabled"`)}
	}
	if _, ok := uc.mutation.LoginAt(); !ok {
		return &ValidationError{Name: "login_at", err: errors.New(`ent: missing required field "User.login_at"`)}
	}
	if _, ok := uc.mutation.LoginStreak(); !ok {
		return &ValidationError{Name: "login_streak", err: errors.New(`ent: missing required field "User.login_streak"`)}
	}
	if _, ok := uc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "User.created_at"`)}
	}
	if _, ok := uc.mutation.SearchBlockedLevel(); !ok {
		return &ValidationError{Name: "search_blocked_level", err: errors.New(`ent: missing required field "User.search_blocked_level"`)}
	}
	if v, ok := uc.mutation.SearchBlockedLevel(); ok {
		if err := user.SearchBlockedLevelValidator(v); err != nil {
			return &ValidationError{Name: "search_blocked_level", err: fmt.Errorf(`ent: validator failed for field "User.search_blocked_level": %w`, err)}
		}
	}
	if _, ok := uc.mutation.AccountBlockedLevel(); !ok {
		return &ValidationError{Name: "account_blocked_level", err: errors.New(`ent: missing required field "User.account_blocked_level"`)}
	}
	if v, ok := uc.mutation.AccountBlockedLevel(); ok {
		if err := user.AccountBlockedLevelValidator(v); err != nil {
			return &ValidationError{Name: "account_blocked_level", err: fmt.Errorf(`ent: validator failed for field "User.account_blocked_level": %w`, err)}
		}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = sqlgraph.NewCreateSpec(user.Table, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	)
	if id, ok := uc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := uc.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := uc.mutation.LowerUsername(); ok {
		_spec.SetField(user.FieldLowerUsername, field.TypeString, value)
		_node.LowerUsername = value
	}
	if value, ok := uc.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
		_node.Email = &value
	}
	if value, ok := uc.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := uc.mutation.HardwareID(); ok {
		_spec.SetField(user.FieldHardwareID, field.TypeString, value)
		_node.HardwareID = &value
	}
	if value, ok := uc.mutation.AccessLevel(); ok {
		_spec.SetField(user.FieldAccessLevel, field.TypeString, value)
		_node.AccessLevel = value
	}
	if value, ok := uc.mutation.GenshinUID(); ok {
		_spec.SetField(user.FieldGenshinUID, field.TypeString, value)
		_node.GenshinUID = &value
	}
	if value, ok := uc.mutation.HoyolabLogin(); ok {
		_spec.SetField(user.FieldHoyolabLogin, field.TypeString, value)
		_node.HoyolabLogin = &value
	}
	if value, ok := uc.mutation.AvatarURL(); ok {
		_spec.SetField(user.FieldAvatarURL, field.TypeString, value)
		_node.AvatarURL = &value
	}
	if value, ok := uc.mutation.InvitesEnabled(); ok {
		_spec.SetField(user.FieldInvitesEnabled, field.TypeBool, value)
		_node.InvitesEnabled = value
	}
	if value, ok := uc.mutation.LoginAt(); ok {
		_spec.SetField(user.FieldLoginAt, field.TypeTime, value)
		_node.LoginAt = value
	}
	if value, ok := uc.mutation.LoginStreak(); ok {
		_spec.SetField(user.FieldLoginStreak, field.TypeInt, value)
		_node.LoginStreak = value
	}
	if value, ok := uc.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := uc.mutation.SearchBlockedUntil(); ok {
		_spec.SetField(user.FieldSearchBlockedUntil, field.TypeTime, value)
		_node.SearchBlockedUntil = &value
	}
	if value, ok := uc.mutation.SearchBlockReason(); ok {
		_spec.SetField(user.FieldSearchBlockReason, field.TypeString, value)
		_node.SearchBlockReason = &value
	}
	if value, ok := uc.mutation.SearchBlockedLevel(); ok {
		_spec.SetField(user.FieldSearchBlockedLevel, field.TypeInt, value)
		_node.SearchBlockedLevel = value
	}
	if value, ok := uc.mutation.AccountBlockedUntil(); ok {
		_spec.SetField(user.FieldAccountBlockedUntil, field.TypeTime, value)
		_node.AccountBlockedUntil = &value
	}
	if value, ok := uc.mutation.AccountBlockReason(); ok {
		_spec.SetField(user.FieldAccountBlockReason, field.TypeString, value)
		_node.AccountBlockReason = &value
	}
	if value, ok := uc.mutation.AccountBlockedLevel(); ok {
		_spec.SetField(user.FieldAccountBlockedLevel, field.TypeInt, value)
		_node.AccountBlockedLevel = value
	}
	if nodes := uc.mutation.StatisticsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.StatisticsTable,
			Columns: []string{user.StatisticsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statistic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.FriendsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FriendsTable,
			Columns: user.FriendsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.SentFriendRequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SentFriendRequestsTable,
			Columns: []string{user.SentFriendRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(friendrequest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.ReceivedFriendRequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ReceivedFriendRequestsTable,
			Columns: []string{user.ReceivedFriendRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(friendrequest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ItemsTable,
			Columns: []string{user.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventoryitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.CurrentItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.CurrentItemTable,
			Columns: []string{user.CurrentItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventoryitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CurrentItemInProfileID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.CurrentMatchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.CurrentMatchTable,
			Columns: []string{user.CurrentMatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(match.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CurrentMatchID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.BalanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.BalanceTable,
			Columns: []string{user.BalanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbalance.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	err      error
	builders []*UserCreate
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	if ucb.err != nil {
		return nil, ucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UserCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}
