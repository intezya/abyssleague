// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/intezya/abyssleague/services/abysscore/internal/infrastructure/ent/playermatchresult"
	"github.com/intezya/abyssleague/services/abysscore/internal/infrastructure/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlayerMatchResultUpdate is the builder for updating PlayerMatchResult entities.
type PlayerMatchResultUpdate struct {
	config
	hooks    []Hook
	mutation *PlayerMatchResultMutation
}

// Where appends a list predicates to the PlayerMatchResultUpdate builder.
func (pmru *PlayerMatchResultUpdate) Where(ps ...predicate.PlayerMatchResult) *PlayerMatchResultUpdate {
	pmru.mutation.Where(ps...)
	return pmru
}

// SetScore sets the "score" field.
func (pmru *PlayerMatchResultUpdate) SetScore(i int) *PlayerMatchResultUpdate {
	pmru.mutation.ResetScore()
	pmru.mutation.SetScore(i)
	return pmru
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (pmru *PlayerMatchResultUpdate) SetNillableScore(i *int) *PlayerMatchResultUpdate {
	if i != nil {
		pmru.SetScore(*i)
	}
	return pmru
}

// AddScore adds i to the "score" field.
func (pmru *PlayerMatchResultUpdate) AddScore(i int) *PlayerMatchResultUpdate {
	pmru.mutation.AddScore(i)
	return pmru
}

// SetIsRetried sets the "is_retried" field.
func (pmru *PlayerMatchResultUpdate) SetIsRetried(b bool) *PlayerMatchResultUpdate {
	pmru.mutation.SetIsRetried(b)
	return pmru
}

// SetNillableIsRetried sets the "is_retried" field if the given value is not nil.
func (pmru *PlayerMatchResultUpdate) SetNillableIsRetried(b *bool) *PlayerMatchResultUpdate {
	if b != nil {
		pmru.SetIsRetried(*b)
	}
	return pmru
}

// Mutation returns the PlayerMatchResultMutation object of the builder.
func (pmru *PlayerMatchResultUpdate) Mutation() *PlayerMatchResultMutation {
	return pmru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pmru *PlayerMatchResultUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pmru.sqlSave, pmru.mutation, pmru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pmru *PlayerMatchResultUpdate) SaveX(ctx context.Context) int {
	affected, err := pmru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pmru *PlayerMatchResultUpdate) Exec(ctx context.Context) error {
	_, err := pmru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmru *PlayerMatchResultUpdate) ExecX(ctx context.Context) {
	if err := pmru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pmru *PlayerMatchResultUpdate) check() error {
	if v, ok := pmru.mutation.Score(); ok {
		if err := playermatchresult.ScoreValidator(v); err != nil {
			return &ValidationError{Name: "score", err: fmt.Errorf(`ent: validator failed for field "PlayerMatchResult.score": %w`, err)}
		}
	}
	if pmru.mutation.MatchCleared() && len(pmru.mutation.MatchIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PlayerMatchResult.match"`)
	}
	if pmru.mutation.UserCleared() && len(pmru.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PlayerMatchResult.user"`)
	}
	return nil
}

func (pmru *PlayerMatchResultUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pmru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(playermatchresult.Table, playermatchresult.Columns, sqlgraph.NewFieldSpec(playermatchresult.FieldID, field.TypeInt))
	if ps := pmru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pmru.mutation.Score(); ok {
		_spec.SetField(playermatchresult.FieldScore, field.TypeInt, value)
	}
	if value, ok := pmru.mutation.AddedScore(); ok {
		_spec.AddField(playermatchresult.FieldScore, field.TypeInt, value)
	}
	if value, ok := pmru.mutation.IsRetried(); ok {
		_spec.SetField(playermatchresult.FieldIsRetried, field.TypeBool, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pmru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{playermatchresult.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pmru.mutation.done = true
	return n, nil
}

// PlayerMatchResultUpdateOne is the builder for updating a single PlayerMatchResult entity.
type PlayerMatchResultUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlayerMatchResultMutation
}

// SetScore sets the "score" field.
func (pmruo *PlayerMatchResultUpdateOne) SetScore(i int) *PlayerMatchResultUpdateOne {
	pmruo.mutation.ResetScore()
	pmruo.mutation.SetScore(i)
	return pmruo
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (pmruo *PlayerMatchResultUpdateOne) SetNillableScore(i *int) *PlayerMatchResultUpdateOne {
	if i != nil {
		pmruo.SetScore(*i)
	}
	return pmruo
}

// AddScore adds i to the "score" field.
func (pmruo *PlayerMatchResultUpdateOne) AddScore(i int) *PlayerMatchResultUpdateOne {
	pmruo.mutation.AddScore(i)
	return pmruo
}

// SetIsRetried sets the "is_retried" field.
func (pmruo *PlayerMatchResultUpdateOne) SetIsRetried(b bool) *PlayerMatchResultUpdateOne {
	pmruo.mutation.SetIsRetried(b)
	return pmruo
}

// SetNillableIsRetried sets the "is_retried" field if the given value is not nil.
func (pmruo *PlayerMatchResultUpdateOne) SetNillableIsRetried(b *bool) *PlayerMatchResultUpdateOne {
	if b != nil {
		pmruo.SetIsRetried(*b)
	}
	return pmruo
}

// Mutation returns the PlayerMatchResultMutation object of the builder.
func (pmruo *PlayerMatchResultUpdateOne) Mutation() *PlayerMatchResultMutation {
	return pmruo.mutation
}

// Where appends a list predicates to the PlayerMatchResultUpdate builder.
func (pmruo *PlayerMatchResultUpdateOne) Where(ps ...predicate.PlayerMatchResult) *PlayerMatchResultUpdateOne {
	pmruo.mutation.Where(ps...)
	return pmruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pmruo *PlayerMatchResultUpdateOne) Select(field string, fields ...string) *PlayerMatchResultUpdateOne {
	pmruo.fields = append([]string{field}, fields...)
	return pmruo
}

// Save executes the query and returns the updated PlayerMatchResult entity.
func (pmruo *PlayerMatchResultUpdateOne) Save(ctx context.Context) (*PlayerMatchResult, error) {
	return withHooks(ctx, pmruo.sqlSave, pmruo.mutation, pmruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pmruo *PlayerMatchResultUpdateOne) SaveX(ctx context.Context) *PlayerMatchResult {
	node, err := pmruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pmruo *PlayerMatchResultUpdateOne) Exec(ctx context.Context) error {
	_, err := pmruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmruo *PlayerMatchResultUpdateOne) ExecX(ctx context.Context) {
	if err := pmruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pmruo *PlayerMatchResultUpdateOne) check() error {
	if v, ok := pmruo.mutation.Score(); ok {
		if err := playermatchresult.ScoreValidator(v); err != nil {
			return &ValidationError{Name: "score", err: fmt.Errorf(`ent: validator failed for field "PlayerMatchResult.score": %w`, err)}
		}
	}
	if pmruo.mutation.MatchCleared() && len(pmruo.mutation.MatchIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PlayerMatchResult.match"`)
	}
	if pmruo.mutation.UserCleared() && len(pmruo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PlayerMatchResult.user"`)
	}
	return nil
}

func (pmruo *PlayerMatchResultUpdateOne) sqlSave(ctx context.Context) (_node *PlayerMatchResult, err error) {
	if err := pmruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(playermatchresult.Table, playermatchresult.Columns, sqlgraph.NewFieldSpec(playermatchresult.FieldID, field.TypeInt))
	id, ok := pmruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PlayerMatchResult.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pmruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, playermatchresult.FieldID)
		for _, f := range fields {
			if !playermatchresult.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != playermatchresult.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pmruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pmruo.mutation.Score(); ok {
		_spec.SetField(playermatchresult.FieldScore, field.TypeInt, value)
	}
	if value, ok := pmruo.mutation.AddedScore(); ok {
		_spec.AddField(playermatchresult.FieldScore, field.TypeInt, value)
	}
	if value, ok := pmruo.mutation.IsRetried(); ok {
		_spec.SetField(playermatchresult.FieldIsRetried, field.TypeBool, value)
	}
	_node = &PlayerMatchResult{config: pmruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pmruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{playermatchresult.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pmruo.mutation.done = true
	return _node, nil
}
