// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/intezya/abyssleague/services/abysscore/internal/infrastructure/ent/bannedhardwareid"
	"github.com/intezya/abyssleague/services/abysscore/internal/infrastructure/ent/predicate"
)

// BannedHardwareIDUpdate is the builder for updating BannedHardwareID entities.
type BannedHardwareIDUpdate struct {
	config
	hooks    []Hook
	mutation *BannedHardwareIDMutation
}

// Where appends a list predicates to the BannedHardwareIDUpdate builder.
func (bhiu *BannedHardwareIDUpdate) Where(ps ...predicate.BannedHardwareID) *BannedHardwareIDUpdate {
	bhiu.mutation.Where(ps...)
	return bhiu
}

// SetBanReason sets the "ban_reason" field.
func (bhiu *BannedHardwareIDUpdate) SetBanReason(s string) *BannedHardwareIDUpdate {
	bhiu.mutation.SetBanReason(s)
	return bhiu
}

// SetNillableBanReason sets the "ban_reason" field if the given value is not nil.
func (bhiu *BannedHardwareIDUpdate) SetNillableBanReason(s *string) *BannedHardwareIDUpdate {
	if s != nil {
		bhiu.SetBanReason(*s)
	}
	return bhiu
}

// ClearBanReason clears the value of the "ban_reason" field.
func (bhiu *BannedHardwareIDUpdate) ClearBanReason() *BannedHardwareIDUpdate {
	bhiu.mutation.ClearBanReason()
	return bhiu
}

// Mutation returns the BannedHardwareIDMutation object of the builder.
func (bhiu *BannedHardwareIDUpdate) Mutation() *BannedHardwareIDMutation {
	return bhiu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bhiu *BannedHardwareIDUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bhiu.sqlSave, bhiu.mutation, bhiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bhiu *BannedHardwareIDUpdate) SaveX(ctx context.Context) int {
	affected, err := bhiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bhiu *BannedHardwareIDUpdate) Exec(ctx context.Context) error {
	_, err := bhiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bhiu *BannedHardwareIDUpdate) ExecX(ctx context.Context) {
	if err := bhiu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bhiu *BannedHardwareIDUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(bannedhardwareid.Table, bannedhardwareid.Columns, sqlgraph.NewFieldSpec(bannedhardwareid.FieldID, field.TypeInt))
	if ps := bhiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bhiu.mutation.BanReason(); ok {
		_spec.SetField(bannedhardwareid.FieldBanReason, field.TypeString, value)
	}
	if bhiu.mutation.BanReasonCleared() {
		_spec.ClearField(bannedhardwareid.FieldBanReason, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bhiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bannedhardwareid.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bhiu.mutation.done = true
	return n, nil
}

// BannedHardwareIDUpdateOne is the builder for updating a single BannedHardwareID entity.
type BannedHardwareIDUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BannedHardwareIDMutation
}

// SetBanReason sets the "ban_reason" field.
func (bhiuo *BannedHardwareIDUpdateOne) SetBanReason(s string) *BannedHardwareIDUpdateOne {
	bhiuo.mutation.SetBanReason(s)
	return bhiuo
}

// SetNillableBanReason sets the "ban_reason" field if the given value is not nil.
func (bhiuo *BannedHardwareIDUpdateOne) SetNillableBanReason(s *string) *BannedHardwareIDUpdateOne {
	if s != nil {
		bhiuo.SetBanReason(*s)
	}
	return bhiuo
}

// ClearBanReason clears the value of the "ban_reason" field.
func (bhiuo *BannedHardwareIDUpdateOne) ClearBanReason() *BannedHardwareIDUpdateOne {
	bhiuo.mutation.ClearBanReason()
	return bhiuo
}

// Mutation returns the BannedHardwareIDMutation object of the builder.
func (bhiuo *BannedHardwareIDUpdateOne) Mutation() *BannedHardwareIDMutation {
	return bhiuo.mutation
}

// Where appends a list predicates to the BannedHardwareIDUpdate builder.
func (bhiuo *BannedHardwareIDUpdateOne) Where(ps ...predicate.BannedHardwareID) *BannedHardwareIDUpdateOne {
	bhiuo.mutation.Where(ps...)
	return bhiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bhiuo *BannedHardwareIDUpdateOne) Select(field string, fields ...string) *BannedHardwareIDUpdateOne {
	bhiuo.fields = append([]string{field}, fields...)
	return bhiuo
}

// Save executes the query and returns the updated BannedHardwareID entity.
func (bhiuo *BannedHardwareIDUpdateOne) Save(ctx context.Context) (*BannedHardwareID, error) {
	return withHooks(ctx, bhiuo.sqlSave, bhiuo.mutation, bhiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bhiuo *BannedHardwareIDUpdateOne) SaveX(ctx context.Context) *BannedHardwareID {
	node, err := bhiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bhiuo *BannedHardwareIDUpdateOne) Exec(ctx context.Context) error {
	_, err := bhiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bhiuo *BannedHardwareIDUpdateOne) ExecX(ctx context.Context) {
	if err := bhiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bhiuo *BannedHardwareIDUpdateOne) sqlSave(ctx context.Context) (_node *BannedHardwareID, err error) {
	_spec := sqlgraph.NewUpdateSpec(bannedhardwareid.Table, bannedhardwareid.Columns, sqlgraph.NewFieldSpec(bannedhardwareid.FieldID, field.TypeInt))
	id, ok := bhiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BannedHardwareID.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bhiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bannedhardwareid.FieldID)
		for _, f := range fields {
			if !bannedhardwareid.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bannedhardwareid.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bhiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bhiuo.mutation.BanReason(); ok {
		_spec.SetField(bannedhardwareid.FieldBanReason, field.TypeString, value)
	}
	if bhiuo.mutation.BanReasonCleared() {
		_spec.ClearField(bannedhardwareid.FieldBanReason, field.TypeString)
	}
	_node = &BannedHardwareID{config: bhiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bhiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bannedhardwareid.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bhiuo.mutation.done = true
	return _node, nil
}
