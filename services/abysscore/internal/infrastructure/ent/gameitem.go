// Code generated by ent, DO NOT EDIT.

package ent

import (
	"abysscore/internal/infrastructure/ent/gameitem"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// GameItem is the model entity for the GameItem schema.
type GameItem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Collection holds the value of the "collection" field.
	Collection string `json:"collection,omitempty"`
	// Type holds the value of the "type" field.
	Type int `json:"type,omitempty"`
	// Rarity holds the value of the "rarity" field.
	Rarity int `json:"rarity,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GameItemQuery when eager-loading is set.
	Edges        GameItemEdges `json:"edges"`
	selectValues sql.SelectValues
}

// GameItemEdges holds the relations/edges for other nodes in the graph.
type GameItemEdges struct {
	// UserItems holds the value of the user_items edge.
	UserItems []*UserItem `json:"user_items,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserItemsOrErr returns the UserItems value or an error if the edge
// was not loaded in eager-loading.
func (e GameItemEdges) UserItemsOrErr() ([]*UserItem, error) {
	if e.loadedTypes[0] {
		return e.UserItems, nil
	}
	return nil, &NotLoadedError{edge: "user_items"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GameItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case gameitem.FieldID, gameitem.FieldType, gameitem.FieldRarity:
			values[i] = new(sql.NullInt64)
		case gameitem.FieldName, gameitem.FieldCollection:
			values[i] = new(sql.NullString)
		case gameitem.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GameItem fields.
func (gi *GameItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case gameitem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gi.ID = int(value.Int64)
		case gameitem.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				gi.Name = value.String
			}
		case gameitem.FieldCollection:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field collection", values[i])
			} else if value.Valid {
				gi.Collection = value.String
			}
		case gameitem.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				gi.Type = int(value.Int64)
			}
		case gameitem.FieldRarity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rarity", values[i])
			} else if value.Valid {
				gi.Rarity = int(value.Int64)
			}
		case gameitem.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				gi.CreatedAt = value.Time
			}
		default:
			gi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GameItem.
// This includes values selected through modifiers, order, etc.
func (gi *GameItem) Value(name string) (ent.Value, error) {
	return gi.selectValues.Get(name)
}

// QueryUserItems queries the "user_items" edge of the GameItem entity.
func (gi *GameItem) QueryUserItems() *UserItemQuery {
	return NewGameItemClient(gi.config).QueryUserItems(gi)
}

// Update returns a builder for updating this GameItem.
// Note that you need to call GameItem.Unwrap() before calling this method if this GameItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (gi *GameItem) Update() *GameItemUpdateOne {
	return NewGameItemClient(gi.config).UpdateOne(gi)
}

// Unwrap unwraps the GameItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gi *GameItem) Unwrap() *GameItem {
	_tx, ok := gi.config.driver.(*txDriver)
	if !ok {
		panic("ent: GameItem is not a transactional entity")
	}
	gi.config.driver = _tx.drv
	return gi
}

// String implements the fmt.Stringer.
func (gi *GameItem) String() string {
	var builder strings.Builder
	builder.WriteString("GameItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gi.ID))
	builder.WriteString("name=")
	builder.WriteString(gi.Name)
	builder.WriteString(", ")
	builder.WriteString("collection=")
	builder.WriteString(gi.Collection)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", gi.Type))
	builder.WriteString(", ")
	builder.WriteString("rarity=")
	builder.WriteString(fmt.Sprintf("%v", gi.Rarity))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(gi.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// GameItems is a parsable slice of GameItem.
type GameItems []*GameItem
