// Code generated by ent, DO NOT EDIT.

package ent

import (
	"abysscore/internal/infrastructure/ent/match"
	"abysscore/internal/infrastructure/ent/matchresult"
	"abysscore/internal/infrastructure/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// MatchResult is the model entity for the MatchResult schema.
type MatchResult struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// MatchID holds the value of the "match_id" field.
	MatchID int `json:"match_id,omitempty"`
	// PlayerID holds the value of the "player_id" field.
	PlayerID int `json:"player_id,omitempty"`
	// Value holds the value of the "value" field.
	Value int `json:"value,omitempty"`
	// IsRetry holds the value of the "is_retry" field.
	IsRetry bool `json:"is_retry,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MatchResultQuery when eager-loading is set.
	Edges        MatchResultEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MatchResultEdges holds the relations/edges for other nodes in the graph.
type MatchResultEdges struct {
	// Match holds the value of the match edge.
	Match *Match `json:"match,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// MatchOrErr returns the Match value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MatchResultEdges) MatchOrErr() (*Match, error) {
	if e.Match != nil {
		return e.Match, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: match.Label}
	}
	return nil, &NotLoadedError{edge: "match"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MatchResultEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MatchResult) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case matchresult.FieldIsRetry:
			values[i] = new(sql.NullBool)
		case matchresult.FieldID, matchresult.FieldMatchID, matchresult.FieldPlayerID, matchresult.FieldValue:
			values[i] = new(sql.NullInt64)
		case matchresult.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MatchResult fields.
func (mr *MatchResult) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case matchresult.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mr.ID = int(value.Int64)
		case matchresult.FieldMatchID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field match_id", values[i])
			} else if value.Valid {
				mr.MatchID = int(value.Int64)
			}
		case matchresult.FieldPlayerID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field player_id", values[i])
			} else if value.Valid {
				mr.PlayerID = int(value.Int64)
			}
		case matchresult.FieldValue:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				mr.Value = int(value.Int64)
			}
		case matchresult.FieldIsRetry:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_retry", values[i])
			} else if value.Valid {
				mr.IsRetry = value.Bool
			}
		case matchresult.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				mr.CreatedAt = value.Time
			}
		default:
			mr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the MatchResult.
// This includes values selected through modifiers, order, etc.
func (mr *MatchResult) GetValue(name string) (ent.Value, error) {
	return mr.selectValues.Get(name)
}

// QueryMatch queries the "match" edge of the MatchResult entity.
func (mr *MatchResult) QueryMatch() *MatchQuery {
	return NewMatchResultClient(mr.config).QueryMatch(mr)
}

// QueryUser queries the "user" edge of the MatchResult entity.
func (mr *MatchResult) QueryUser() *UserQuery {
	return NewMatchResultClient(mr.config).QueryUser(mr)
}

// Update returns a builder for updating this MatchResult.
// Note that you need to call MatchResult.Unwrap() before calling this method if this MatchResult
// was returned from a transaction, and the transaction was committed or rolled back.
func (mr *MatchResult) Update() *MatchResultUpdateOne {
	return NewMatchResultClient(mr.config).UpdateOne(mr)
}

// Unwrap unwraps the MatchResult entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mr *MatchResult) Unwrap() *MatchResult {
	_tx, ok := mr.config.driver.(*txDriver)
	if !ok {
		panic("ent: MatchResult is not a transactional entity")
	}
	mr.config.driver = _tx.drv
	return mr
}

// String implements the fmt.Stringer.
func (mr *MatchResult) String() string {
	var builder strings.Builder
	builder.WriteString("MatchResult(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mr.ID))
	builder.WriteString("match_id=")
	builder.WriteString(fmt.Sprintf("%v", mr.MatchID))
	builder.WriteString(", ")
	builder.WriteString("player_id=")
	builder.WriteString(fmt.Sprintf("%v", mr.PlayerID))
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(fmt.Sprintf("%v", mr.Value))
	builder.WriteString(", ")
	builder.WriteString("is_retry=")
	builder.WriteString(fmt.Sprintf("%v", mr.IsRetry))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(mr.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// MatchResults is a parsable slice of MatchResult.
type MatchResults []*MatchResult
