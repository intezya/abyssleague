// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/intezya/abyssleague/services/abysscore/internal/infrastructure/ent/friendrequest"
	"github.com/intezya/abyssleague/services/abysscore/internal/infrastructure/ent/inventoryitem"
	"github.com/intezya/abyssleague/services/abysscore/internal/infrastructure/ent/match"
	"github.com/intezya/abyssleague/services/abysscore/internal/infrastructure/ent/predicate"
	"github.com/intezya/abyssleague/services/abysscore/internal/infrastructure/ent/schema/access_level"
	"github.com/intezya/abyssleague/services/abysscore/internal/infrastructure/ent/statistic"
	"github.com/intezya/abyssleague/services/abysscore/internal/infrastructure/ent/user"
	"github.com/intezya/abyssleague/services/abysscore/internal/infrastructure/ent/userbalance"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUsername sets the "username" field.
func (uu *UserUpdate) SetUsername(s string) *UserUpdate {
	uu.mutation.SetUsername(s)
	return uu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUsername(s *string) *UserUpdate {
	if s != nil {
		uu.SetUsername(*s)
	}
	return uu
}

// SetLowerUsername sets the "lower_username" field.
func (uu *UserUpdate) SetLowerUsername(s string) *UserUpdate {
	uu.mutation.SetLowerUsername(s)
	return uu
}

// SetNillableLowerUsername sets the "lower_username" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLowerUsername(s *string) *UserUpdate {
	if s != nil {
		uu.SetLowerUsername(*s)
	}
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmail(s *string) *UserUpdate {
	if s != nil {
		uu.SetEmail(*s)
	}
	return uu
}

// ClearEmail clears the value of the "email" field.
func (uu *UserUpdate) ClearEmail() *UserUpdate {
	uu.mutation.ClearEmail()
	return uu
}

// SetPassword sets the "password" field.
func (uu *UserUpdate) SetPassword(s string) *UserUpdate {
	uu.mutation.SetPassword(s)
	return uu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePassword(s *string) *UserUpdate {
	if s != nil {
		uu.SetPassword(*s)
	}
	return uu
}

// SetHardwareID sets the "hardware_id" field.
func (uu *UserUpdate) SetHardwareID(s string) *UserUpdate {
	uu.mutation.SetHardwareID(s)
	return uu
}

// SetNillableHardwareID sets the "hardware_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableHardwareID(s *string) *UserUpdate {
	if s != nil {
		uu.SetHardwareID(*s)
	}
	return uu
}

// ClearHardwareID clears the value of the "hardware_id" field.
func (uu *UserUpdate) ClearHardwareID() *UserUpdate {
	uu.mutation.ClearHardwareID()
	return uu
}

// SetAccessLevel sets the "access_level" field.
func (uu *UserUpdate) SetAccessLevel(all access_level.AccessLevel) *UserUpdate {
	uu.mutation.SetAccessLevel(all)
	return uu
}

// SetNillableAccessLevel sets the "access_level" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAccessLevel(all *access_level.AccessLevel) *UserUpdate {
	if all != nil {
		uu.SetAccessLevel(*all)
	}
	return uu
}

// SetGenshinUID sets the "genshin_uid" field.
func (uu *UserUpdate) SetGenshinUID(s string) *UserUpdate {
	uu.mutation.SetGenshinUID(s)
	return uu
}

// SetNillableGenshinUID sets the "genshin_uid" field if the given value is not nil.
func (uu *UserUpdate) SetNillableGenshinUID(s *string) *UserUpdate {
	if s != nil {
		uu.SetGenshinUID(*s)
	}
	return uu
}

// ClearGenshinUID clears the value of the "genshin_uid" field.
func (uu *UserUpdate) ClearGenshinUID() *UserUpdate {
	uu.mutation.ClearGenshinUID()
	return uu
}

// SetHoyolabLogin sets the "hoyolab_login" field.
func (uu *UserUpdate) SetHoyolabLogin(s string) *UserUpdate {
	uu.mutation.SetHoyolabLogin(s)
	return uu
}

// SetNillableHoyolabLogin sets the "hoyolab_login" field if the given value is not nil.
func (uu *UserUpdate) SetNillableHoyolabLogin(s *string) *UserUpdate {
	if s != nil {
		uu.SetHoyolabLogin(*s)
	}
	return uu
}

// ClearHoyolabLogin clears the value of the "hoyolab_login" field.
func (uu *UserUpdate) ClearHoyolabLogin() *UserUpdate {
	uu.mutation.ClearHoyolabLogin()
	return uu
}

// SetCurrentMatchID sets the "current_match_id" field.
func (uu *UserUpdate) SetCurrentMatchID(i int) *UserUpdate {
	uu.mutation.SetCurrentMatchID(i)
	return uu
}

// SetNillableCurrentMatchID sets the "current_match_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCurrentMatchID(i *int) *UserUpdate {
	if i != nil {
		uu.SetCurrentMatchID(*i)
	}
	return uu
}

// ClearCurrentMatchID clears the value of the "current_match_id" field.
func (uu *UserUpdate) ClearCurrentMatchID() *UserUpdate {
	uu.mutation.ClearCurrentMatchID()
	return uu
}

// SetCurrentItemInProfileID sets the "current_item_in_profile_id" field.
func (uu *UserUpdate) SetCurrentItemInProfileID(i int) *UserUpdate {
	uu.mutation.SetCurrentItemInProfileID(i)
	return uu
}

// SetNillableCurrentItemInProfileID sets the "current_item_in_profile_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCurrentItemInProfileID(i *int) *UserUpdate {
	if i != nil {
		uu.SetCurrentItemInProfileID(*i)
	}
	return uu
}

// ClearCurrentItemInProfileID clears the value of the "current_item_in_profile_id" field.
func (uu *UserUpdate) ClearCurrentItemInProfileID() *UserUpdate {
	uu.mutation.ClearCurrentItemInProfileID()
	return uu
}

// SetAvatarURL sets the "avatar_url" field.
func (uu *UserUpdate) SetAvatarURL(s string) *UserUpdate {
	uu.mutation.SetAvatarURL(s)
	return uu
}

// SetNillableAvatarURL sets the "avatar_url" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAvatarURL(s *string) *UserUpdate {
	if s != nil {
		uu.SetAvatarURL(*s)
	}
	return uu
}

// ClearAvatarURL clears the value of the "avatar_url" field.
func (uu *UserUpdate) ClearAvatarURL() *UserUpdate {
	uu.mutation.ClearAvatarURL()
	return uu
}

// SetInvitesEnabled sets the "invites_enabled" field.
func (uu *UserUpdate) SetInvitesEnabled(b bool) *UserUpdate {
	uu.mutation.SetInvitesEnabled(b)
	return uu
}

// SetNillableInvitesEnabled sets the "invites_enabled" field if the given value is not nil.
func (uu *UserUpdate) SetNillableInvitesEnabled(b *bool) *UserUpdate {
	if b != nil {
		uu.SetInvitesEnabled(*b)
	}
	return uu
}

// SetLoginAt sets the "login_at" field.
func (uu *UserUpdate) SetLoginAt(t time.Time) *UserUpdate {
	uu.mutation.SetLoginAt(t)
	return uu
}

// SetNillableLoginAt sets the "login_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLoginAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetLoginAt(*t)
	}
	return uu
}

// SetLoginStreak sets the "login_streak" field.
func (uu *UserUpdate) SetLoginStreak(i int) *UserUpdate {
	uu.mutation.ResetLoginStreak()
	uu.mutation.SetLoginStreak(i)
	return uu
}

// SetNillableLoginStreak sets the "login_streak" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLoginStreak(i *int) *UserUpdate {
	if i != nil {
		uu.SetLoginStreak(*i)
	}
	return uu
}

// AddLoginStreak adds i to the "login_streak" field.
func (uu *UserUpdate) AddLoginStreak(i int) *UserUpdate {
	uu.mutation.AddLoginStreak(i)
	return uu
}

// SetSearchBlockedUntil sets the "search_blocked_until" field.
func (uu *UserUpdate) SetSearchBlockedUntil(t time.Time) *UserUpdate {
	uu.mutation.SetSearchBlockedUntil(t)
	return uu
}

// SetNillableSearchBlockedUntil sets the "search_blocked_until" field if the given value is not nil.
func (uu *UserUpdate) SetNillableSearchBlockedUntil(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetSearchBlockedUntil(*t)
	}
	return uu
}

// ClearSearchBlockedUntil clears the value of the "search_blocked_until" field.
func (uu *UserUpdate) ClearSearchBlockedUntil() *UserUpdate {
	uu.mutation.ClearSearchBlockedUntil()
	return uu
}

// SetSearchBlockReason sets the "search_block_reason" field.
func (uu *UserUpdate) SetSearchBlockReason(s string) *UserUpdate {
	uu.mutation.SetSearchBlockReason(s)
	return uu
}

// SetNillableSearchBlockReason sets the "search_block_reason" field if the given value is not nil.
func (uu *UserUpdate) SetNillableSearchBlockReason(s *string) *UserUpdate {
	if s != nil {
		uu.SetSearchBlockReason(*s)
	}
	return uu
}

// ClearSearchBlockReason clears the value of the "search_block_reason" field.
func (uu *UserUpdate) ClearSearchBlockReason() *UserUpdate {
	uu.mutation.ClearSearchBlockReason()
	return uu
}

// SetSearchBlockedLevel sets the "search_blocked_level" field.
func (uu *UserUpdate) SetSearchBlockedLevel(i int) *UserUpdate {
	uu.mutation.ResetSearchBlockedLevel()
	uu.mutation.SetSearchBlockedLevel(i)
	return uu
}

// SetNillableSearchBlockedLevel sets the "search_blocked_level" field if the given value is not nil.
func (uu *UserUpdate) SetNillableSearchBlockedLevel(i *int) *UserUpdate {
	if i != nil {
		uu.SetSearchBlockedLevel(*i)
	}
	return uu
}

// AddSearchBlockedLevel adds i to the "search_blocked_level" field.
func (uu *UserUpdate) AddSearchBlockedLevel(i int) *UserUpdate {
	uu.mutation.AddSearchBlockedLevel(i)
	return uu
}

// SetAccountBlockedUntil sets the "account_blocked_until" field.
func (uu *UserUpdate) SetAccountBlockedUntil(t time.Time) *UserUpdate {
	uu.mutation.SetAccountBlockedUntil(t)
	return uu
}

// SetNillableAccountBlockedUntil sets the "account_blocked_until" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAccountBlockedUntil(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetAccountBlockedUntil(*t)
	}
	return uu
}

// ClearAccountBlockedUntil clears the value of the "account_blocked_until" field.
func (uu *UserUpdate) ClearAccountBlockedUntil() *UserUpdate {
	uu.mutation.ClearAccountBlockedUntil()
	return uu
}

// SetAccountBlockReason sets the "account_block_reason" field.
func (uu *UserUpdate) SetAccountBlockReason(s string) *UserUpdate {
	uu.mutation.SetAccountBlockReason(s)
	return uu
}

// SetNillableAccountBlockReason sets the "account_block_reason" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAccountBlockReason(s *string) *UserUpdate {
	if s != nil {
		uu.SetAccountBlockReason(*s)
	}
	return uu
}

// ClearAccountBlockReason clears the value of the "account_block_reason" field.
func (uu *UserUpdate) ClearAccountBlockReason() *UserUpdate {
	uu.mutation.ClearAccountBlockReason()
	return uu
}

// SetAccountBlockedLevel sets the "account_blocked_level" field.
func (uu *UserUpdate) SetAccountBlockedLevel(i int) *UserUpdate {
	uu.mutation.ResetAccountBlockedLevel()
	uu.mutation.SetAccountBlockedLevel(i)
	return uu
}

// SetNillableAccountBlockedLevel sets the "account_blocked_level" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAccountBlockedLevel(i *int) *UserUpdate {
	if i != nil {
		uu.SetAccountBlockedLevel(*i)
	}
	return uu
}

// AddAccountBlockedLevel adds i to the "account_blocked_level" field.
func (uu *UserUpdate) AddAccountBlockedLevel(i int) *UserUpdate {
	uu.mutation.AddAccountBlockedLevel(i)
	return uu
}

// AddStatisticIDs adds the "statistics" edge to the Statistic entity by IDs.
func (uu *UserUpdate) AddStatisticIDs(ids ...int) *UserUpdate {
	uu.mutation.AddStatisticIDs(ids...)
	return uu
}

// AddStatistics adds the "statistics" edges to the Statistic entity.
func (uu *UserUpdate) AddStatistics(s ...*Statistic) *UserUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.AddStatisticIDs(ids...)
}

// AddFriendIDs adds the "friends" edge to the User entity by IDs.
func (uu *UserUpdate) AddFriendIDs(ids ...int) *UserUpdate {
	uu.mutation.AddFriendIDs(ids...)
	return uu
}

// AddFriends adds the "friends" edges to the User entity.
func (uu *UserUpdate) AddFriends(u ...*User) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddFriendIDs(ids...)
}

// AddSentFriendRequestIDs adds the "sent_friend_requests" edge to the FriendRequest entity by IDs.
func (uu *UserUpdate) AddSentFriendRequestIDs(ids ...int) *UserUpdate {
	uu.mutation.AddSentFriendRequestIDs(ids...)
	return uu
}

// AddSentFriendRequests adds the "sent_friend_requests" edges to the FriendRequest entity.
func (uu *UserUpdate) AddSentFriendRequests(f ...*FriendRequest) *UserUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uu.AddSentFriendRequestIDs(ids...)
}

// AddReceivedFriendRequestIDs adds the "received_friend_requests" edge to the FriendRequest entity by IDs.
func (uu *UserUpdate) AddReceivedFriendRequestIDs(ids ...int) *UserUpdate {
	uu.mutation.AddReceivedFriendRequestIDs(ids...)
	return uu
}

// AddReceivedFriendRequests adds the "received_friend_requests" edges to the FriendRequest entity.
func (uu *UserUpdate) AddReceivedFriendRequests(f ...*FriendRequest) *UserUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uu.AddReceivedFriendRequestIDs(ids...)
}

// AddItemIDs adds the "items" edge to the InventoryItem entity by IDs.
func (uu *UserUpdate) AddItemIDs(ids ...int) *UserUpdate {
	uu.mutation.AddItemIDs(ids...)
	return uu
}

// AddItems adds the "items" edges to the InventoryItem entity.
func (uu *UserUpdate) AddItems(i ...*InventoryItem) *UserUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uu.AddItemIDs(ids...)
}

// SetCurrentItemID sets the "current_item" edge to the InventoryItem entity by ID.
func (uu *UserUpdate) SetCurrentItemID(id int) *UserUpdate {
	uu.mutation.SetCurrentItemID(id)
	return uu
}

// SetNillableCurrentItemID sets the "current_item" edge to the InventoryItem entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableCurrentItemID(id *int) *UserUpdate {
	if id != nil {
		uu = uu.SetCurrentItemID(*id)
	}
	return uu
}

// SetCurrentItem sets the "current_item" edge to the InventoryItem entity.
func (uu *UserUpdate) SetCurrentItem(i *InventoryItem) *UserUpdate {
	return uu.SetCurrentItemID(i.ID)
}

// SetCurrentMatch sets the "current_match" edge to the Match entity.
func (uu *UserUpdate) SetCurrentMatch(m *Match) *UserUpdate {
	return uu.SetCurrentMatchID(m.ID)
}

// SetBalanceID sets the "balance" edge to the UserBalance entity by ID.
func (uu *UserUpdate) SetBalanceID(id int) *UserUpdate {
	uu.mutation.SetBalanceID(id)
	return uu
}

// SetNillableBalanceID sets the "balance" edge to the UserBalance entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableBalanceID(id *int) *UserUpdate {
	if id != nil {
		uu = uu.SetBalanceID(*id)
	}
	return uu
}

// SetBalance sets the "balance" edge to the UserBalance entity.
func (uu *UserUpdate) SetBalance(u *UserBalance) *UserUpdate {
	return uu.SetBalanceID(u.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearStatistics clears all "statistics" edges to the Statistic entity.
func (uu *UserUpdate) ClearStatistics() *UserUpdate {
	uu.mutation.ClearStatistics()
	return uu
}

// RemoveStatisticIDs removes the "statistics" edge to Statistic entities by IDs.
func (uu *UserUpdate) RemoveStatisticIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveStatisticIDs(ids...)
	return uu
}

// RemoveStatistics removes "statistics" edges to Statistic entities.
func (uu *UserUpdate) RemoveStatistics(s ...*Statistic) *UserUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.RemoveStatisticIDs(ids...)
}

// ClearFriends clears all "friends" edges to the User entity.
func (uu *UserUpdate) ClearFriends() *UserUpdate {
	uu.mutation.ClearFriends()
	return uu
}

// RemoveFriendIDs removes the "friends" edge to User entities by IDs.
func (uu *UserUpdate) RemoveFriendIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveFriendIDs(ids...)
	return uu
}

// RemoveFriends removes "friends" edges to User entities.
func (uu *UserUpdate) RemoveFriends(u ...*User) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveFriendIDs(ids...)
}

// ClearSentFriendRequests clears all "sent_friend_requests" edges to the FriendRequest entity.
func (uu *UserUpdate) ClearSentFriendRequests() *UserUpdate {
	uu.mutation.ClearSentFriendRequests()
	return uu
}

// RemoveSentFriendRequestIDs removes the "sent_friend_requests" edge to FriendRequest entities by IDs.
func (uu *UserUpdate) RemoveSentFriendRequestIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveSentFriendRequestIDs(ids...)
	return uu
}

// RemoveSentFriendRequests removes "sent_friend_requests" edges to FriendRequest entities.
func (uu *UserUpdate) RemoveSentFriendRequests(f ...*FriendRequest) *UserUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uu.RemoveSentFriendRequestIDs(ids...)
}

// ClearReceivedFriendRequests clears all "received_friend_requests" edges to the FriendRequest entity.
func (uu *UserUpdate) ClearReceivedFriendRequests() *UserUpdate {
	uu.mutation.ClearReceivedFriendRequests()
	return uu
}

// RemoveReceivedFriendRequestIDs removes the "received_friend_requests" edge to FriendRequest entities by IDs.
func (uu *UserUpdate) RemoveReceivedFriendRequestIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveReceivedFriendRequestIDs(ids...)
	return uu
}

// RemoveReceivedFriendRequests removes "received_friend_requests" edges to FriendRequest entities.
func (uu *UserUpdate) RemoveReceivedFriendRequests(f ...*FriendRequest) *UserUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uu.RemoveReceivedFriendRequestIDs(ids...)
}

// ClearItems clears all "items" edges to the InventoryItem entity.
func (uu *UserUpdate) ClearItems() *UserUpdate {
	uu.mutation.ClearItems()
	return uu
}

// RemoveItemIDs removes the "items" edge to InventoryItem entities by IDs.
func (uu *UserUpdate) RemoveItemIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveItemIDs(ids...)
	return uu
}

// RemoveItems removes "items" edges to InventoryItem entities.
func (uu *UserUpdate) RemoveItems(i ...*InventoryItem) *UserUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uu.RemoveItemIDs(ids...)
}

// ClearCurrentItem clears the "current_item" edge to the InventoryItem entity.
func (uu *UserUpdate) ClearCurrentItem() *UserUpdate {
	uu.mutation.ClearCurrentItem()
	return uu
}

// ClearCurrentMatch clears the "current_match" edge to the Match entity.
func (uu *UserUpdate) ClearCurrentMatch() *UserUpdate {
	uu.mutation.ClearCurrentMatch()
	return uu
}

// ClearBalance clears the "balance" edge to the UserBalance entity.
func (uu *UserUpdate) ClearBalance() *UserUpdate {
	uu.mutation.ClearBalance()
	return uu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.Username(); ok {
		if err := user.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "User.username": %w`, err)}
		}
	}
	if v, ok := uu.mutation.LowerUsername(); ok {
		if err := user.LowerUsernameValidator(v); err != nil {
			return &ValidationError{Name: "lower_username", err: fmt.Errorf(`ent: validator failed for field "User.lower_username": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Password(); ok {
		if err := user.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "User.password": %w`, err)}
		}
	}
	if v, ok := uu.mutation.SearchBlockedLevel(); ok {
		if err := user.SearchBlockedLevelValidator(v); err != nil {
			return &ValidationError{Name: "search_blocked_level", err: fmt.Errorf(`ent: validator failed for field "User.search_blocked_level": %w`, err)}
		}
	}
	if v, ok := uu.mutation.AccountBlockedLevel(); ok {
		if err := user.AccountBlockedLevelValidator(v); err != nil {
			return &ValidationError{Name: "account_blocked_level", err: fmt.Errorf(`ent: validator failed for field "User.account_blocked_level": %w`, err)}
		}
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := uu.mutation.LowerUsername(); ok {
		_spec.SetField(user.FieldLowerUsername, field.TypeString, value)
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if uu.mutation.EmailCleared() {
		_spec.ClearField(user.FieldEmail, field.TypeString)
	}
	if value, ok := uu.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if value, ok := uu.mutation.HardwareID(); ok {
		_spec.SetField(user.FieldHardwareID, field.TypeString, value)
	}
	if uu.mutation.HardwareIDCleared() {
		_spec.ClearField(user.FieldHardwareID, field.TypeString)
	}
	if value, ok := uu.mutation.AccessLevel(); ok {
		_spec.SetField(user.FieldAccessLevel, field.TypeString, value)
	}
	if value, ok := uu.mutation.GenshinUID(); ok {
		_spec.SetField(user.FieldGenshinUID, field.TypeString, value)
	}
	if uu.mutation.GenshinUIDCleared() {
		_spec.ClearField(user.FieldGenshinUID, field.TypeString)
	}
	if value, ok := uu.mutation.HoyolabLogin(); ok {
		_spec.SetField(user.FieldHoyolabLogin, field.TypeString, value)
	}
	if uu.mutation.HoyolabLoginCleared() {
		_spec.ClearField(user.FieldHoyolabLogin, field.TypeString)
	}
	if value, ok := uu.mutation.AvatarURL(); ok {
		_spec.SetField(user.FieldAvatarURL, field.TypeString, value)
	}
	if uu.mutation.AvatarURLCleared() {
		_spec.ClearField(user.FieldAvatarURL, field.TypeString)
	}
	if value, ok := uu.mutation.InvitesEnabled(); ok {
		_spec.SetField(user.FieldInvitesEnabled, field.TypeBool, value)
	}
	if value, ok := uu.mutation.LoginAt(); ok {
		_spec.SetField(user.FieldLoginAt, field.TypeTime, value)
	}
	if value, ok := uu.mutation.LoginStreak(); ok {
		_spec.SetField(user.FieldLoginStreak, field.TypeInt, value)
	}
	if value, ok := uu.mutation.AddedLoginStreak(); ok {
		_spec.AddField(user.FieldLoginStreak, field.TypeInt, value)
	}
	if value, ok := uu.mutation.SearchBlockedUntil(); ok {
		_spec.SetField(user.FieldSearchBlockedUntil, field.TypeTime, value)
	}
	if uu.mutation.SearchBlockedUntilCleared() {
		_spec.ClearField(user.FieldSearchBlockedUntil, field.TypeTime)
	}
	if value, ok := uu.mutation.SearchBlockReason(); ok {
		_spec.SetField(user.FieldSearchBlockReason, field.TypeString, value)
	}
	if uu.mutation.SearchBlockReasonCleared() {
		_spec.ClearField(user.FieldSearchBlockReason, field.TypeString)
	}
	if value, ok := uu.mutation.SearchBlockedLevel(); ok {
		_spec.SetField(user.FieldSearchBlockedLevel, field.TypeInt, value)
	}
	if value, ok := uu.mutation.AddedSearchBlockedLevel(); ok {
		_spec.AddField(user.FieldSearchBlockedLevel, field.TypeInt, value)
	}
	if value, ok := uu.mutation.AccountBlockedUntil(); ok {
		_spec.SetField(user.FieldAccountBlockedUntil, field.TypeTime, value)
	}
	if uu.mutation.AccountBlockedUntilCleared() {
		_spec.ClearField(user.FieldAccountBlockedUntil, field.TypeTime)
	}
	if value, ok := uu.mutation.AccountBlockReason(); ok {
		_spec.SetField(user.FieldAccountBlockReason, field.TypeString, value)
	}
	if uu.mutation.AccountBlockReasonCleared() {
		_spec.ClearField(user.FieldAccountBlockReason, field.TypeString)
	}
	if value, ok := uu.mutation.AccountBlockedLevel(); ok {
		_spec.SetField(user.FieldAccountBlockedLevel, field.TypeInt, value)
	}
	if value, ok := uu.mutation.AddedAccountBlockedLevel(); ok {
		_spec.AddField(user.FieldAccountBlockedLevel, field.TypeInt, value)
	}
	if uu.mutation.StatisticsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.StatisticsTable,
			Columns: []string{user.StatisticsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statistic.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedStatisticsIDs(); len(nodes) > 0 && !uu.mutation.StatisticsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.StatisticsTable,
			Columns: []string{user.StatisticsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statistic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.StatisticsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.StatisticsTable,
			Columns: []string{user.StatisticsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statistic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.FriendsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FriendsTable,
			Columns: user.FriendsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedFriendsIDs(); len(nodes) > 0 && !uu.mutation.FriendsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FriendsTable,
			Columns: user.FriendsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.FriendsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FriendsTable,
			Columns: user.FriendsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.SentFriendRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SentFriendRequestsTable,
			Columns: []string{user.SentFriendRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(friendrequest.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedSentFriendRequestsIDs(); len(nodes) > 0 && !uu.mutation.SentFriendRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SentFriendRequestsTable,
			Columns: []string{user.SentFriendRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(friendrequest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.SentFriendRequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SentFriendRequestsTable,
			Columns: []string{user.SentFriendRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(friendrequest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ReceivedFriendRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ReceivedFriendRequestsTable,
			Columns: []string{user.ReceivedFriendRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(friendrequest.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedReceivedFriendRequestsIDs(); len(nodes) > 0 && !uu.mutation.ReceivedFriendRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ReceivedFriendRequestsTable,
			Columns: []string{user.ReceivedFriendRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(friendrequest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ReceivedFriendRequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ReceivedFriendRequestsTable,
			Columns: []string{user.ReceivedFriendRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(friendrequest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ItemsTable,
			Columns: []string{user.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventoryitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedItemsIDs(); len(nodes) > 0 && !uu.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ItemsTable,
			Columns: []string{user.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventoryitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ItemsTable,
			Columns: []string{user.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventoryitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.CurrentItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.CurrentItemTable,
			Columns: []string{user.CurrentItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventoryitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CurrentItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.CurrentItemTable,
			Columns: []string{user.CurrentItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventoryitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.CurrentMatchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.CurrentMatchTable,
			Columns: []string{user.CurrentMatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(match.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CurrentMatchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.CurrentMatchTable,
			Columns: []string{user.CurrentMatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(match.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.BalanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.BalanceTable,
			Columns: []string{user.BalanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbalance.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.BalanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.BalanceTable,
			Columns: []string{user.BalanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbalance.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetUsername sets the "username" field.
func (uuo *UserUpdateOne) SetUsername(s string) *UserUpdateOne {
	uuo.mutation.SetUsername(s)
	return uuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUsername(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetUsername(*s)
	}
	return uuo
}

// SetLowerUsername sets the "lower_username" field.
func (uuo *UserUpdateOne) SetLowerUsername(s string) *UserUpdateOne {
	uuo.mutation.SetLowerUsername(s)
	return uuo
}

// SetNillableLowerUsername sets the "lower_username" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLowerUsername(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetLowerUsername(*s)
	}
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmail(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetEmail(*s)
	}
	return uuo
}

// ClearEmail clears the value of the "email" field.
func (uuo *UserUpdateOne) ClearEmail() *UserUpdateOne {
	uuo.mutation.ClearEmail()
	return uuo
}

// SetPassword sets the "password" field.
func (uuo *UserUpdateOne) SetPassword(s string) *UserUpdateOne {
	uuo.mutation.SetPassword(s)
	return uuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePassword(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPassword(*s)
	}
	return uuo
}

// SetHardwareID sets the "hardware_id" field.
func (uuo *UserUpdateOne) SetHardwareID(s string) *UserUpdateOne {
	uuo.mutation.SetHardwareID(s)
	return uuo
}

// SetNillableHardwareID sets the "hardware_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableHardwareID(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetHardwareID(*s)
	}
	return uuo
}

// ClearHardwareID clears the value of the "hardware_id" field.
func (uuo *UserUpdateOne) ClearHardwareID() *UserUpdateOne {
	uuo.mutation.ClearHardwareID()
	return uuo
}

// SetAccessLevel sets the "access_level" field.
func (uuo *UserUpdateOne) SetAccessLevel(all access_level.AccessLevel) *UserUpdateOne {
	uuo.mutation.SetAccessLevel(all)
	return uuo
}

// SetNillableAccessLevel sets the "access_level" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAccessLevel(all *access_level.AccessLevel) *UserUpdateOne {
	if all != nil {
		uuo.SetAccessLevel(*all)
	}
	return uuo
}

// SetGenshinUID sets the "genshin_uid" field.
func (uuo *UserUpdateOne) SetGenshinUID(s string) *UserUpdateOne {
	uuo.mutation.SetGenshinUID(s)
	return uuo
}

// SetNillableGenshinUID sets the "genshin_uid" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableGenshinUID(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetGenshinUID(*s)
	}
	return uuo
}

// ClearGenshinUID clears the value of the "genshin_uid" field.
func (uuo *UserUpdateOne) ClearGenshinUID() *UserUpdateOne {
	uuo.mutation.ClearGenshinUID()
	return uuo
}

// SetHoyolabLogin sets the "hoyolab_login" field.
func (uuo *UserUpdateOne) SetHoyolabLogin(s string) *UserUpdateOne {
	uuo.mutation.SetHoyolabLogin(s)
	return uuo
}

// SetNillableHoyolabLogin sets the "hoyolab_login" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableHoyolabLogin(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetHoyolabLogin(*s)
	}
	return uuo
}

// ClearHoyolabLogin clears the value of the "hoyolab_login" field.
func (uuo *UserUpdateOne) ClearHoyolabLogin() *UserUpdateOne {
	uuo.mutation.ClearHoyolabLogin()
	return uuo
}

// SetCurrentMatchID sets the "current_match_id" field.
func (uuo *UserUpdateOne) SetCurrentMatchID(i int) *UserUpdateOne {
	uuo.mutation.SetCurrentMatchID(i)
	return uuo
}

// SetNillableCurrentMatchID sets the "current_match_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCurrentMatchID(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetCurrentMatchID(*i)
	}
	return uuo
}

// ClearCurrentMatchID clears the value of the "current_match_id" field.
func (uuo *UserUpdateOne) ClearCurrentMatchID() *UserUpdateOne {
	uuo.mutation.ClearCurrentMatchID()
	return uuo
}

// SetCurrentItemInProfileID sets the "current_item_in_profile_id" field.
func (uuo *UserUpdateOne) SetCurrentItemInProfileID(i int) *UserUpdateOne {
	uuo.mutation.SetCurrentItemInProfileID(i)
	return uuo
}

// SetNillableCurrentItemInProfileID sets the "current_item_in_profile_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCurrentItemInProfileID(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetCurrentItemInProfileID(*i)
	}
	return uuo
}

// ClearCurrentItemInProfileID clears the value of the "current_item_in_profile_id" field.
func (uuo *UserUpdateOne) ClearCurrentItemInProfileID() *UserUpdateOne {
	uuo.mutation.ClearCurrentItemInProfileID()
	return uuo
}

// SetAvatarURL sets the "avatar_url" field.
func (uuo *UserUpdateOne) SetAvatarURL(s string) *UserUpdateOne {
	uuo.mutation.SetAvatarURL(s)
	return uuo
}

// SetNillableAvatarURL sets the "avatar_url" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAvatarURL(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetAvatarURL(*s)
	}
	return uuo
}

// ClearAvatarURL clears the value of the "avatar_url" field.
func (uuo *UserUpdateOne) ClearAvatarURL() *UserUpdateOne {
	uuo.mutation.ClearAvatarURL()
	return uuo
}

// SetInvitesEnabled sets the "invites_enabled" field.
func (uuo *UserUpdateOne) SetInvitesEnabled(b bool) *UserUpdateOne {
	uuo.mutation.SetInvitesEnabled(b)
	return uuo
}

// SetNillableInvitesEnabled sets the "invites_enabled" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableInvitesEnabled(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetInvitesEnabled(*b)
	}
	return uuo
}

// SetLoginAt sets the "login_at" field.
func (uuo *UserUpdateOne) SetLoginAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetLoginAt(t)
	return uuo
}

// SetNillableLoginAt sets the "login_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLoginAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetLoginAt(*t)
	}
	return uuo
}

// SetLoginStreak sets the "login_streak" field.
func (uuo *UserUpdateOne) SetLoginStreak(i int) *UserUpdateOne {
	uuo.mutation.ResetLoginStreak()
	uuo.mutation.SetLoginStreak(i)
	return uuo
}

// SetNillableLoginStreak sets the "login_streak" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLoginStreak(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetLoginStreak(*i)
	}
	return uuo
}

// AddLoginStreak adds i to the "login_streak" field.
func (uuo *UserUpdateOne) AddLoginStreak(i int) *UserUpdateOne {
	uuo.mutation.AddLoginStreak(i)
	return uuo
}

// SetSearchBlockedUntil sets the "search_blocked_until" field.
func (uuo *UserUpdateOne) SetSearchBlockedUntil(t time.Time) *UserUpdateOne {
	uuo.mutation.SetSearchBlockedUntil(t)
	return uuo
}

// SetNillableSearchBlockedUntil sets the "search_blocked_until" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableSearchBlockedUntil(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetSearchBlockedUntil(*t)
	}
	return uuo
}

// ClearSearchBlockedUntil clears the value of the "search_blocked_until" field.
func (uuo *UserUpdateOne) ClearSearchBlockedUntil() *UserUpdateOne {
	uuo.mutation.ClearSearchBlockedUntil()
	return uuo
}

// SetSearchBlockReason sets the "search_block_reason" field.
func (uuo *UserUpdateOne) SetSearchBlockReason(s string) *UserUpdateOne {
	uuo.mutation.SetSearchBlockReason(s)
	return uuo
}

// SetNillableSearchBlockReason sets the "search_block_reason" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableSearchBlockReason(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetSearchBlockReason(*s)
	}
	return uuo
}

// ClearSearchBlockReason clears the value of the "search_block_reason" field.
func (uuo *UserUpdateOne) ClearSearchBlockReason() *UserUpdateOne {
	uuo.mutation.ClearSearchBlockReason()
	return uuo
}

// SetSearchBlockedLevel sets the "search_blocked_level" field.
func (uuo *UserUpdateOne) SetSearchBlockedLevel(i int) *UserUpdateOne {
	uuo.mutation.ResetSearchBlockedLevel()
	uuo.mutation.SetSearchBlockedLevel(i)
	return uuo
}

// SetNillableSearchBlockedLevel sets the "search_blocked_level" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableSearchBlockedLevel(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetSearchBlockedLevel(*i)
	}
	return uuo
}

// AddSearchBlockedLevel adds i to the "search_blocked_level" field.
func (uuo *UserUpdateOne) AddSearchBlockedLevel(i int) *UserUpdateOne {
	uuo.mutation.AddSearchBlockedLevel(i)
	return uuo
}

// SetAccountBlockedUntil sets the "account_blocked_until" field.
func (uuo *UserUpdateOne) SetAccountBlockedUntil(t time.Time) *UserUpdateOne {
	uuo.mutation.SetAccountBlockedUntil(t)
	return uuo
}

// SetNillableAccountBlockedUntil sets the "account_blocked_until" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAccountBlockedUntil(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetAccountBlockedUntil(*t)
	}
	return uuo
}

// ClearAccountBlockedUntil clears the value of the "account_blocked_until" field.
func (uuo *UserUpdateOne) ClearAccountBlockedUntil() *UserUpdateOne {
	uuo.mutation.ClearAccountBlockedUntil()
	return uuo
}

// SetAccountBlockReason sets the "account_block_reason" field.
func (uuo *UserUpdateOne) SetAccountBlockReason(s string) *UserUpdateOne {
	uuo.mutation.SetAccountBlockReason(s)
	return uuo
}

// SetNillableAccountBlockReason sets the "account_block_reason" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAccountBlockReason(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetAccountBlockReason(*s)
	}
	return uuo
}

// ClearAccountBlockReason clears the value of the "account_block_reason" field.
func (uuo *UserUpdateOne) ClearAccountBlockReason() *UserUpdateOne {
	uuo.mutation.ClearAccountBlockReason()
	return uuo
}

// SetAccountBlockedLevel sets the "account_blocked_level" field.
func (uuo *UserUpdateOne) SetAccountBlockedLevel(i int) *UserUpdateOne {
	uuo.mutation.ResetAccountBlockedLevel()
	uuo.mutation.SetAccountBlockedLevel(i)
	return uuo
}

// SetNillableAccountBlockedLevel sets the "account_blocked_level" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAccountBlockedLevel(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetAccountBlockedLevel(*i)
	}
	return uuo
}

// AddAccountBlockedLevel adds i to the "account_blocked_level" field.
func (uuo *UserUpdateOne) AddAccountBlockedLevel(i int) *UserUpdateOne {
	uuo.mutation.AddAccountBlockedLevel(i)
	return uuo
}

// AddStatisticIDs adds the "statistics" edge to the Statistic entity by IDs.
func (uuo *UserUpdateOne) AddStatisticIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddStatisticIDs(ids...)
	return uuo
}

// AddStatistics adds the "statistics" edges to the Statistic entity.
func (uuo *UserUpdateOne) AddStatistics(s ...*Statistic) *UserUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.AddStatisticIDs(ids...)
}

// AddFriendIDs adds the "friends" edge to the User entity by IDs.
func (uuo *UserUpdateOne) AddFriendIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddFriendIDs(ids...)
	return uuo
}

// AddFriends adds the "friends" edges to the User entity.
func (uuo *UserUpdateOne) AddFriends(u ...*User) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddFriendIDs(ids...)
}

// AddSentFriendRequestIDs adds the "sent_friend_requests" edge to the FriendRequest entity by IDs.
func (uuo *UserUpdateOne) AddSentFriendRequestIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddSentFriendRequestIDs(ids...)
	return uuo
}

// AddSentFriendRequests adds the "sent_friend_requests" edges to the FriendRequest entity.
func (uuo *UserUpdateOne) AddSentFriendRequests(f ...*FriendRequest) *UserUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uuo.AddSentFriendRequestIDs(ids...)
}

// AddReceivedFriendRequestIDs adds the "received_friend_requests" edge to the FriendRequest entity by IDs.
func (uuo *UserUpdateOne) AddReceivedFriendRequestIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddReceivedFriendRequestIDs(ids...)
	return uuo
}

// AddReceivedFriendRequests adds the "received_friend_requests" edges to the FriendRequest entity.
func (uuo *UserUpdateOne) AddReceivedFriendRequests(f ...*FriendRequest) *UserUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uuo.AddReceivedFriendRequestIDs(ids...)
}

// AddItemIDs adds the "items" edge to the InventoryItem entity by IDs.
func (uuo *UserUpdateOne) AddItemIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddItemIDs(ids...)
	return uuo
}

// AddItems adds the "items" edges to the InventoryItem entity.
func (uuo *UserUpdateOne) AddItems(i ...*InventoryItem) *UserUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uuo.AddItemIDs(ids...)
}

// SetCurrentItemID sets the "current_item" edge to the InventoryItem entity by ID.
func (uuo *UserUpdateOne) SetCurrentItemID(id int) *UserUpdateOne {
	uuo.mutation.SetCurrentItemID(id)
	return uuo
}

// SetNillableCurrentItemID sets the "current_item" edge to the InventoryItem entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCurrentItemID(id *int) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetCurrentItemID(*id)
	}
	return uuo
}

// SetCurrentItem sets the "current_item" edge to the InventoryItem entity.
func (uuo *UserUpdateOne) SetCurrentItem(i *InventoryItem) *UserUpdateOne {
	return uuo.SetCurrentItemID(i.ID)
}

// SetCurrentMatch sets the "current_match" edge to the Match entity.
func (uuo *UserUpdateOne) SetCurrentMatch(m *Match) *UserUpdateOne {
	return uuo.SetCurrentMatchID(m.ID)
}

// SetBalanceID sets the "balance" edge to the UserBalance entity by ID.
func (uuo *UserUpdateOne) SetBalanceID(id int) *UserUpdateOne {
	uuo.mutation.SetBalanceID(id)
	return uuo
}

// SetNillableBalanceID sets the "balance" edge to the UserBalance entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBalanceID(id *int) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetBalanceID(*id)
	}
	return uuo
}

// SetBalance sets the "balance" edge to the UserBalance entity.
func (uuo *UserUpdateOne) SetBalance(u *UserBalance) *UserUpdateOne {
	return uuo.SetBalanceID(u.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearStatistics clears all "statistics" edges to the Statistic entity.
func (uuo *UserUpdateOne) ClearStatistics() *UserUpdateOne {
	uuo.mutation.ClearStatistics()
	return uuo
}

// RemoveStatisticIDs removes the "statistics" edge to Statistic entities by IDs.
func (uuo *UserUpdateOne) RemoveStatisticIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveStatisticIDs(ids...)
	return uuo
}

// RemoveStatistics removes "statistics" edges to Statistic entities.
func (uuo *UserUpdateOne) RemoveStatistics(s ...*Statistic) *UserUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.RemoveStatisticIDs(ids...)
}

// ClearFriends clears all "friends" edges to the User entity.
func (uuo *UserUpdateOne) ClearFriends() *UserUpdateOne {
	uuo.mutation.ClearFriends()
	return uuo
}

// RemoveFriendIDs removes the "friends" edge to User entities by IDs.
func (uuo *UserUpdateOne) RemoveFriendIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveFriendIDs(ids...)
	return uuo
}

// RemoveFriends removes "friends" edges to User entities.
func (uuo *UserUpdateOne) RemoveFriends(u ...*User) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveFriendIDs(ids...)
}

// ClearSentFriendRequests clears all "sent_friend_requests" edges to the FriendRequest entity.
func (uuo *UserUpdateOne) ClearSentFriendRequests() *UserUpdateOne {
	uuo.mutation.ClearSentFriendRequests()
	return uuo
}

// RemoveSentFriendRequestIDs removes the "sent_friend_requests" edge to FriendRequest entities by IDs.
func (uuo *UserUpdateOne) RemoveSentFriendRequestIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveSentFriendRequestIDs(ids...)
	return uuo
}

// RemoveSentFriendRequests removes "sent_friend_requests" edges to FriendRequest entities.
func (uuo *UserUpdateOne) RemoveSentFriendRequests(f ...*FriendRequest) *UserUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uuo.RemoveSentFriendRequestIDs(ids...)
}

// ClearReceivedFriendRequests clears all "received_friend_requests" edges to the FriendRequest entity.
func (uuo *UserUpdateOne) ClearReceivedFriendRequests() *UserUpdateOne {
	uuo.mutation.ClearReceivedFriendRequests()
	return uuo
}

// RemoveReceivedFriendRequestIDs removes the "received_friend_requests" edge to FriendRequest entities by IDs.
func (uuo *UserUpdateOne) RemoveReceivedFriendRequestIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveReceivedFriendRequestIDs(ids...)
	return uuo
}

// RemoveReceivedFriendRequests removes "received_friend_requests" edges to FriendRequest entities.
func (uuo *UserUpdateOne) RemoveReceivedFriendRequests(f ...*FriendRequest) *UserUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uuo.RemoveReceivedFriendRequestIDs(ids...)
}

// ClearItems clears all "items" edges to the InventoryItem entity.
func (uuo *UserUpdateOne) ClearItems() *UserUpdateOne {
	uuo.mutation.ClearItems()
	return uuo
}

// RemoveItemIDs removes the "items" edge to InventoryItem entities by IDs.
func (uuo *UserUpdateOne) RemoveItemIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveItemIDs(ids...)
	return uuo
}

// RemoveItems removes "items" edges to InventoryItem entities.
func (uuo *UserUpdateOne) RemoveItems(i ...*InventoryItem) *UserUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uuo.RemoveItemIDs(ids...)
}

// ClearCurrentItem clears the "current_item" edge to the InventoryItem entity.
func (uuo *UserUpdateOne) ClearCurrentItem() *UserUpdateOne {
	uuo.mutation.ClearCurrentItem()
	return uuo
}

// ClearCurrentMatch clears the "current_match" edge to the Match entity.
func (uuo *UserUpdateOne) ClearCurrentMatch() *UserUpdateOne {
	uuo.mutation.ClearCurrentMatch()
	return uuo
}

// ClearBalance clears the "balance" edge to the UserBalance entity.
func (uuo *UserUpdateOne) ClearBalance() *UserUpdateOne {
	uuo.mutation.ClearBalance()
	return uuo
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.Username(); ok {
		if err := user.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "User.username": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.LowerUsername(); ok {
		if err := user.LowerUsernameValidator(v); err != nil {
			return &ValidationError{Name: "lower_username", err: fmt.Errorf(`ent: validator failed for field "User.lower_username": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Password(); ok {
		if err := user.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "User.password": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.SearchBlockedLevel(); ok {
		if err := user.SearchBlockedLevelValidator(v); err != nil {
			return &ValidationError{Name: "search_blocked_level", err: fmt.Errorf(`ent: validator failed for field "User.search_blocked_level": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.AccountBlockedLevel(); ok {
		if err := user.AccountBlockedLevelValidator(v); err != nil {
			return &ValidationError{Name: "account_blocked_level", err: fmt.Errorf(`ent: validator failed for field "User.account_blocked_level": %w`, err)}
		}
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := uuo.mutation.LowerUsername(); ok {
		_spec.SetField(user.FieldLowerUsername, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if uuo.mutation.EmailCleared() {
		_spec.ClearField(user.FieldEmail, field.TypeString)
	}
	if value, ok := uuo.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if value, ok := uuo.mutation.HardwareID(); ok {
		_spec.SetField(user.FieldHardwareID, field.TypeString, value)
	}
	if uuo.mutation.HardwareIDCleared() {
		_spec.ClearField(user.FieldHardwareID, field.TypeString)
	}
	if value, ok := uuo.mutation.AccessLevel(); ok {
		_spec.SetField(user.FieldAccessLevel, field.TypeString, value)
	}
	if value, ok := uuo.mutation.GenshinUID(); ok {
		_spec.SetField(user.FieldGenshinUID, field.TypeString, value)
	}
	if uuo.mutation.GenshinUIDCleared() {
		_spec.ClearField(user.FieldGenshinUID, field.TypeString)
	}
	if value, ok := uuo.mutation.HoyolabLogin(); ok {
		_spec.SetField(user.FieldHoyolabLogin, field.TypeString, value)
	}
	if uuo.mutation.HoyolabLoginCleared() {
		_spec.ClearField(user.FieldHoyolabLogin, field.TypeString)
	}
	if value, ok := uuo.mutation.AvatarURL(); ok {
		_spec.SetField(user.FieldAvatarURL, field.TypeString, value)
	}
	if uuo.mutation.AvatarURLCleared() {
		_spec.ClearField(user.FieldAvatarURL, field.TypeString)
	}
	if value, ok := uuo.mutation.InvitesEnabled(); ok {
		_spec.SetField(user.FieldInvitesEnabled, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.LoginAt(); ok {
		_spec.SetField(user.FieldLoginAt, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.LoginStreak(); ok {
		_spec.SetField(user.FieldLoginStreak, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.AddedLoginStreak(); ok {
		_spec.AddField(user.FieldLoginStreak, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.SearchBlockedUntil(); ok {
		_spec.SetField(user.FieldSearchBlockedUntil, field.TypeTime, value)
	}
	if uuo.mutation.SearchBlockedUntilCleared() {
		_spec.ClearField(user.FieldSearchBlockedUntil, field.TypeTime)
	}
	if value, ok := uuo.mutation.SearchBlockReason(); ok {
		_spec.SetField(user.FieldSearchBlockReason, field.TypeString, value)
	}
	if uuo.mutation.SearchBlockReasonCleared() {
		_spec.ClearField(user.FieldSearchBlockReason, field.TypeString)
	}
	if value, ok := uuo.mutation.SearchBlockedLevel(); ok {
		_spec.SetField(user.FieldSearchBlockedLevel, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.AddedSearchBlockedLevel(); ok {
		_spec.AddField(user.FieldSearchBlockedLevel, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.AccountBlockedUntil(); ok {
		_spec.SetField(user.FieldAccountBlockedUntil, field.TypeTime, value)
	}
	if uuo.mutation.AccountBlockedUntilCleared() {
		_spec.ClearField(user.FieldAccountBlockedUntil, field.TypeTime)
	}
	if value, ok := uuo.mutation.AccountBlockReason(); ok {
		_spec.SetField(user.FieldAccountBlockReason, field.TypeString, value)
	}
	if uuo.mutation.AccountBlockReasonCleared() {
		_spec.ClearField(user.FieldAccountBlockReason, field.TypeString)
	}
	if value, ok := uuo.mutation.AccountBlockedLevel(); ok {
		_spec.SetField(user.FieldAccountBlockedLevel, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.AddedAccountBlockedLevel(); ok {
		_spec.AddField(user.FieldAccountBlockedLevel, field.TypeInt, value)
	}
	if uuo.mutation.StatisticsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.StatisticsTable,
			Columns: []string{user.StatisticsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statistic.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedStatisticsIDs(); len(nodes) > 0 && !uuo.mutation.StatisticsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.StatisticsTable,
			Columns: []string{user.StatisticsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statistic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.StatisticsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.StatisticsTable,
			Columns: []string{user.StatisticsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statistic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.FriendsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FriendsTable,
			Columns: user.FriendsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedFriendsIDs(); len(nodes) > 0 && !uuo.mutation.FriendsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FriendsTable,
			Columns: user.FriendsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.FriendsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FriendsTable,
			Columns: user.FriendsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.SentFriendRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SentFriendRequestsTable,
			Columns: []string{user.SentFriendRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(friendrequest.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedSentFriendRequestsIDs(); len(nodes) > 0 && !uuo.mutation.SentFriendRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SentFriendRequestsTable,
			Columns: []string{user.SentFriendRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(friendrequest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.SentFriendRequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SentFriendRequestsTable,
			Columns: []string{user.SentFriendRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(friendrequest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ReceivedFriendRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ReceivedFriendRequestsTable,
			Columns: []string{user.ReceivedFriendRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(friendrequest.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedReceivedFriendRequestsIDs(); len(nodes) > 0 && !uuo.mutation.ReceivedFriendRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ReceivedFriendRequestsTable,
			Columns: []string{user.ReceivedFriendRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(friendrequest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ReceivedFriendRequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ReceivedFriendRequestsTable,
			Columns: []string{user.ReceivedFriendRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(friendrequest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ItemsTable,
			Columns: []string{user.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventoryitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedItemsIDs(); len(nodes) > 0 && !uuo.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ItemsTable,
			Columns: []string{user.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventoryitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ItemsTable,
			Columns: []string{user.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventoryitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.CurrentItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.CurrentItemTable,
			Columns: []string{user.CurrentItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventoryitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CurrentItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.CurrentItemTable,
			Columns: []string{user.CurrentItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventoryitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.CurrentMatchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.CurrentMatchTable,
			Columns: []string{user.CurrentMatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(match.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CurrentMatchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.CurrentMatchTable,
			Columns: []string{user.CurrentMatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(match.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.BalanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.BalanceTable,
			Columns: []string{user.BalanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbalance.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.BalanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.BalanceTable,
			Columns: []string{user.BalanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbalance.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
