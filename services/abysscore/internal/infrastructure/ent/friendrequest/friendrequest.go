// Code generated by ent, DO NOT EDIT.

package friendrequest

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the friendrequest type in the database.
	Label = "friend_request"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFromUserID holds the string denoting the from_user_id field in the database.
	FieldFromUserID = "from_user_id"
	// FieldToUserID holds the string denoting the to_user_id field in the database.
	FieldToUserID = "to_user_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeFromUser holds the string denoting the from_user edge name in mutations.
	EdgeFromUser = "from_user"
	// EdgeToUser holds the string denoting the to_user edge name in mutations.
	EdgeToUser = "to_user"
	// Table holds the table name of the friendrequest in the database.
	Table = "friend_requests"
	// FromUserTable is the table that holds the from_user relation/edge.
	FromUserTable = "friend_requests"
	// FromUserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	FromUserInverseTable = "users"
	// FromUserColumn is the table column denoting the from_user relation/edge.
	FromUserColumn = "from_user_id"
	// ToUserTable is the table that holds the to_user relation/edge.
	ToUserTable = "friend_requests"
	// ToUserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	ToUserInverseTable = "users"
	// ToUserColumn is the table column denoting the to_user relation/edge.
	ToUserColumn = "to_user_id"
)

// Columns holds all SQL columns for friendrequest fields.
var Columns = []string{
	FieldID,
	FieldFromUserID,
	FieldToUserID,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the FriendRequest queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFromUserID orders the results by the from_user_id field.
func ByFromUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFromUserID, opts...).ToFunc()
}

// ByToUserID orders the results by the to_user_id field.
func ByToUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToUserID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByFromUserField orders the results by from_user field.
func ByFromUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFromUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByToUserField orders the results by to_user field.
func ByToUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newToUserStep(), sql.OrderByField(field, opts...))
	}
}
func newFromUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FromUserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, FromUserTable, FromUserColumn),
	)
}
func newToUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ToUserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ToUserTable, ToUserColumn),
	)
}
