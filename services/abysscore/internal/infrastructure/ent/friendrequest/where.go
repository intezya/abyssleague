// Code generated by ent, DO NOT EDIT.

package friendrequest

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/intezya/abyssleague/services/abysscore/internal/infrastructure/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldLTE(FieldID, id))
}

// FromUserID applies equality check predicate on the "from_user_id" field. It's identical to FromUserIDEQ.
func FromUserID(v int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldEQ(FieldFromUserID, v))
}

// ToUserID applies equality check predicate on the "to_user_id" field. It's identical to ToUserIDEQ.
func ToUserID(v int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldEQ(FieldToUserID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldEQ(FieldCreatedAt, v))
}

// FromUserIDEQ applies the EQ predicate on the "from_user_id" field.
func FromUserIDEQ(v int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldEQ(FieldFromUserID, v))
}

// FromUserIDNEQ applies the NEQ predicate on the "from_user_id" field.
func FromUserIDNEQ(v int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldNEQ(FieldFromUserID, v))
}

// FromUserIDIn applies the In predicate on the "from_user_id" field.
func FromUserIDIn(vs ...int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldIn(FieldFromUserID, vs...))
}

// FromUserIDNotIn applies the NotIn predicate on the "from_user_id" field.
func FromUserIDNotIn(vs ...int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldNotIn(FieldFromUserID, vs...))
}

// ToUserIDEQ applies the EQ predicate on the "to_user_id" field.
func ToUserIDEQ(v int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldEQ(FieldToUserID, v))
}

// ToUserIDNEQ applies the NEQ predicate on the "to_user_id" field.
func ToUserIDNEQ(v int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldNEQ(FieldToUserID, v))
}

// ToUserIDIn applies the In predicate on the "to_user_id" field.
func ToUserIDIn(vs ...int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldIn(FieldToUserID, vs...))
}

// ToUserIDNotIn applies the NotIn predicate on the "to_user_id" field.
func ToUserIDNotIn(vs ...int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldNotIn(FieldToUserID, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldLTE(FieldCreatedAt, v))
}

// HasFromUser applies the HasEdge predicate on the "from_user" edge.
func HasFromUser() predicate.FriendRequest {
	return predicate.FriendRequest(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FromUserTable, FromUserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFromUserWith applies the HasEdge predicate on the "from_user" edge with a given conditions (other predicates).
func HasFromUserWith(preds ...predicate.User) predicate.FriendRequest {
	return predicate.FriendRequest(func(s *sql.Selector) {
		step := newFromUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasToUser applies the HasEdge predicate on the "to_user" edge.
func HasToUser() predicate.FriendRequest {
	return predicate.FriendRequest(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ToUserTable, ToUserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasToUserWith applies the HasEdge predicate on the "to_user" edge with a given conditions (other predicates).
func HasToUserWith(preds ...predicate.User) predicate.FriendRequest {
	return predicate.FriendRequest(func(s *sql.Selector) {
		step := newToUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.FriendRequest) predicate.FriendRequest {
	return predicate.FriendRequest(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.FriendRequest) predicate.FriendRequest {
	return predicate.FriendRequest(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.FriendRequest) predicate.FriendRequest {
	return predicate.FriendRequest(sql.NotPredicates(p))
}
