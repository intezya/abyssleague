// Code generated by ent, DO NOT EDIT.

package ent

import (
	"abysscore/internal/infrastructure/ent/gameitem"
	"abysscore/internal/infrastructure/ent/inventoryitem"
	"abysscore/internal/infrastructure/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// InventoryItem is the model entity for the InventoryItem schema.
type InventoryItem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// ItemID holds the value of the "item_id" field.
	ItemID int `json:"item_id,omitempty"`
	// ReceivedFromID holds the value of the "received_from_id" field.
	ReceivedFromID *int `json:"received_from_id,omitempty"`
	// ObtainedAt holds the value of the "obtained_at" field.
	ObtainedAt time.Time `json:"obtained_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InventoryItemQuery when eager-loading is set.
	Edges        InventoryItemEdges `json:"edges"`
	selectValues sql.SelectValues
}

// InventoryItemEdges holds the relations/edges for other nodes in the graph.
type InventoryItemEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Item holds the value of the item edge.
	Item *GameItem `json:"item,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InventoryItemEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// ItemOrErr returns the Item value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InventoryItemEdges) ItemOrErr() (*GameItem, error) {
	if e.Item != nil {
		return e.Item, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: gameitem.Label}
	}
	return nil, &NotLoadedError{edge: "item"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*InventoryItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case inventoryitem.FieldID, inventoryitem.FieldUserID, inventoryitem.FieldItemID, inventoryitem.FieldReceivedFromID:
			values[i] = new(sql.NullInt64)
		case inventoryitem.FieldObtainedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the InventoryItem fields.
func (ii *InventoryItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case inventoryitem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ii.ID = int(value.Int64)
		case inventoryitem.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ii.UserID = int(value.Int64)
			}
		case inventoryitem.FieldItemID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field item_id", values[i])
			} else if value.Valid {
				ii.ItemID = int(value.Int64)
			}
		case inventoryitem.FieldReceivedFromID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field received_from_id", values[i])
			} else if value.Valid {
				ii.ReceivedFromID = new(int)
				*ii.ReceivedFromID = int(value.Int64)
			}
		case inventoryitem.FieldObtainedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field obtained_at", values[i])
			} else if value.Valid {
				ii.ObtainedAt = value.Time
			}
		default:
			ii.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the InventoryItem.
// This includes values selected through modifiers, order, etc.
func (ii *InventoryItem) Value(name string) (ent.Value, error) {
	return ii.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the InventoryItem entity.
func (ii *InventoryItem) QueryUser() *UserQuery {
	return NewInventoryItemClient(ii.config).QueryUser(ii)
}

// QueryItem queries the "item" edge of the InventoryItem entity.
func (ii *InventoryItem) QueryItem() *GameItemQuery {
	return NewInventoryItemClient(ii.config).QueryItem(ii)
}

// Update returns a builder for updating this InventoryItem.
// Note that you need to call InventoryItem.Unwrap() before calling this method if this InventoryItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (ii *InventoryItem) Update() *InventoryItemUpdateOne {
	return NewInventoryItemClient(ii.config).UpdateOne(ii)
}

// Unwrap unwraps the InventoryItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ii *InventoryItem) Unwrap() *InventoryItem {
	_tx, ok := ii.config.driver.(*txDriver)
	if !ok {
		panic("ent: InventoryItem is not a transactional entity")
	}
	ii.config.driver = _tx.drv
	return ii
}

// String implements the fmt.Stringer.
func (ii *InventoryItem) String() string {
	var builder strings.Builder
	builder.WriteString("InventoryItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ii.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ii.UserID))
	builder.WriteString(", ")
	builder.WriteString("item_id=")
	builder.WriteString(fmt.Sprintf("%v", ii.ItemID))
	builder.WriteString(", ")
	if v := ii.ReceivedFromID; v != nil {
		builder.WriteString("received_from_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("obtained_at=")
	builder.WriteString(ii.ObtainedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// InventoryItems is a parsable slice of InventoryItem.
type InventoryItems []*InventoryItem
