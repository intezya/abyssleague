// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/intezya/abyssleague/services/abysscore/internal/infrastructure/ent/gameitem"
	"github.com/intezya/abyssleague/services/abysscore/internal/infrastructure/ent/inventoryitem"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GameItemCreate is the builder for creating a GameItem entity.
type GameItemCreate struct {
	config
	mutation *GameItemMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (gic *GameItemCreate) SetName(s string) *GameItemCreate {
	gic.mutation.SetName(s)
	return gic
}

// SetCollection sets the "collection" field.
func (gic *GameItemCreate) SetCollection(s string) *GameItemCreate {
	gic.mutation.SetCollection(s)
	return gic
}

// SetType sets the "type" field.
func (gic *GameItemCreate) SetType(i int) *GameItemCreate {
	gic.mutation.SetType(i)
	return gic
}

// SetRarity sets the "rarity" field.
func (gic *GameItemCreate) SetRarity(i int) *GameItemCreate {
	gic.mutation.SetRarity(i)
	return gic
}

// SetCreatedAt sets the "created_at" field.
func (gic *GameItemCreate) SetCreatedAt(t time.Time) *GameItemCreate {
	gic.mutation.SetCreatedAt(t)
	return gic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gic *GameItemCreate) SetNillableCreatedAt(t *time.Time) *GameItemCreate {
	if t != nil {
		gic.SetCreatedAt(*t)
	}
	return gic
}

// SetID sets the "id" field.
func (gic *GameItemCreate) SetID(i int) *GameItemCreate {
	gic.mutation.SetID(i)
	return gic
}

// AddInventoryItemIDs adds the "inventory_items" edge to the InventoryItem entity by IDs.
func (gic *GameItemCreate) AddInventoryItemIDs(ids ...int) *GameItemCreate {
	gic.mutation.AddInventoryItemIDs(ids...)
	return gic
}

// AddInventoryItems adds the "inventory_items" edges to the InventoryItem entity.
func (gic *GameItemCreate) AddInventoryItems(i ...*InventoryItem) *GameItemCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return gic.AddInventoryItemIDs(ids...)
}

// Mutation returns the GameItemMutation object of the builder.
func (gic *GameItemCreate) Mutation() *GameItemMutation {
	return gic.mutation
}

// Save creates the GameItem in the database.
func (gic *GameItemCreate) Save(ctx context.Context) (*GameItem, error) {
	gic.defaults()
	return withHooks(ctx, gic.sqlSave, gic.mutation, gic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gic *GameItemCreate) SaveX(ctx context.Context) *GameItem {
	v, err := gic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gic *GameItemCreate) Exec(ctx context.Context) error {
	_, err := gic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gic *GameItemCreate) ExecX(ctx context.Context) {
	if err := gic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gic *GameItemCreate) defaults() {
	if _, ok := gic.mutation.CreatedAt(); !ok {
		v := gameitem.DefaultCreatedAt()
		gic.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gic *GameItemCreate) check() error {
	if _, ok := gic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "GameItem.name"`)}
	}
	if v, ok := gic.mutation.Name(); ok {
		if err := gameitem.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "GameItem.name": %w`, err)}
		}
	}
	if _, ok := gic.mutation.Collection(); !ok {
		return &ValidationError{Name: "collection", err: errors.New(`ent: missing required field "GameItem.collection"`)}
	}
	if v, ok := gic.mutation.Collection(); ok {
		if err := gameitem.CollectionValidator(v); err != nil {
			return &ValidationError{Name: "collection", err: fmt.Errorf(`ent: validator failed for field "GameItem.collection": %w`, err)}
		}
	}
	if _, ok := gic.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "GameItem.type"`)}
	}
	if v, ok := gic.mutation.GetType(); ok {
		if err := gameitem.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "GameItem.type": %w`, err)}
		}
	}
	if _, ok := gic.mutation.Rarity(); !ok {
		return &ValidationError{Name: "rarity", err: errors.New(`ent: missing required field "GameItem.rarity"`)}
	}
	if v, ok := gic.mutation.Rarity(); ok {
		if err := gameitem.RarityValidator(v); err != nil {
			return &ValidationError{Name: "rarity", err: fmt.Errorf(`ent: validator failed for field "GameItem.rarity": %w`, err)}
		}
	}
	if _, ok := gic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "GameItem.created_at"`)}
	}
	return nil
}

func (gic *GameItemCreate) sqlSave(ctx context.Context) (*GameItem, error) {
	if err := gic.check(); err != nil {
		return nil, err
	}
	_node, _spec := gic.createSpec()
	if err := sqlgraph.CreateNode(ctx, gic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	gic.mutation.id = &_node.ID
	gic.mutation.done = true
	return _node, nil
}

func (gic *GameItemCreate) createSpec() (*GameItem, *sqlgraph.CreateSpec) {
	var (
		_node = &GameItem{config: gic.config}
		_spec = sqlgraph.NewCreateSpec(gameitem.Table, sqlgraph.NewFieldSpec(gameitem.FieldID, field.TypeInt))
	)
	if id, ok := gic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := gic.mutation.Name(); ok {
		_spec.SetField(gameitem.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := gic.mutation.Collection(); ok {
		_spec.SetField(gameitem.FieldCollection, field.TypeString, value)
		_node.Collection = value
	}
	if value, ok := gic.mutation.GetType(); ok {
		_spec.SetField(gameitem.FieldType, field.TypeInt, value)
		_node.Type = value
	}
	if value, ok := gic.mutation.Rarity(); ok {
		_spec.SetField(gameitem.FieldRarity, field.TypeInt, value)
		_node.Rarity = value
	}
	if value, ok := gic.mutation.CreatedAt(); ok {
		_spec.SetField(gameitem.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := gic.mutation.InventoryItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gameitem.InventoryItemsTable,
			Columns: []string{gameitem.InventoryItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventoryitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GameItemCreateBulk is the builder for creating many GameItem entities in bulk.
type GameItemCreateBulk struct {
	config
	err      error
	builders []*GameItemCreate
}

// Save creates the GameItem entities in the database.
func (gicb *GameItemCreateBulk) Save(ctx context.Context) ([]*GameItem, error) {
	if gicb.err != nil {
		return nil, gicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gicb.builders))
	nodes := make([]*GameItem, len(gicb.builders))
	mutators := make([]Mutator, len(gicb.builders))
	for i := range gicb.builders {
		func(i int, root context.Context) {
			builder := gicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GameItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gicb *GameItemCreateBulk) SaveX(ctx context.Context) []*GameItem {
	v, err := gicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gicb *GameItemCreateBulk) Exec(ctx context.Context) error {
	_, err := gicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gicb *GameItemCreateBulk) ExecX(ctx context.Context) {
	if err := gicb.Exec(ctx); err != nil {
		panic(err)
	}
}
