// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/intezya/abyssleague/services/abysscore/internal/infrastructure/ent/bannedhardwareid"
)

// BannedHardwareIDCreate is the builder for creating a BannedHardwareID entity.
type BannedHardwareIDCreate struct {
	config
	mutation *BannedHardwareIDMutation
	hooks    []Hook
}

// SetHardwareID sets the "hardware_id" field.
func (bhic *BannedHardwareIDCreate) SetHardwareID(s string) *BannedHardwareIDCreate {
	bhic.mutation.SetHardwareID(s)
	return bhic
}

// SetCreatedAt sets the "created_at" field.
func (bhic *BannedHardwareIDCreate) SetCreatedAt(t time.Time) *BannedHardwareIDCreate {
	bhic.mutation.SetCreatedAt(t)
	return bhic
}

// SetBanReason sets the "ban_reason" field.
func (bhic *BannedHardwareIDCreate) SetBanReason(s string) *BannedHardwareIDCreate {
	bhic.mutation.SetBanReason(s)
	return bhic
}

// SetNillableBanReason sets the "ban_reason" field if the given value is not nil.
func (bhic *BannedHardwareIDCreate) SetNillableBanReason(s *string) *BannedHardwareIDCreate {
	if s != nil {
		bhic.SetBanReason(*s)
	}
	return bhic
}

// SetID sets the "id" field.
func (bhic *BannedHardwareIDCreate) SetID(i int) *BannedHardwareIDCreate {
	bhic.mutation.SetID(i)
	return bhic
}

// Mutation returns the BannedHardwareIDMutation object of the builder.
func (bhic *BannedHardwareIDCreate) Mutation() *BannedHardwareIDMutation {
	return bhic.mutation
}

// Save creates the BannedHardwareID in the database.
func (bhic *BannedHardwareIDCreate) Save(ctx context.Context) (*BannedHardwareID, error) {
	return withHooks(ctx, bhic.sqlSave, bhic.mutation, bhic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bhic *BannedHardwareIDCreate) SaveX(ctx context.Context) *BannedHardwareID {
	v, err := bhic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bhic *BannedHardwareIDCreate) Exec(ctx context.Context) error {
	_, err := bhic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bhic *BannedHardwareIDCreate) ExecX(ctx context.Context) {
	if err := bhic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bhic *BannedHardwareIDCreate) check() error {
	if _, ok := bhic.mutation.HardwareID(); !ok {
		return &ValidationError{Name: "hardware_id", err: errors.New(`ent: missing required field "BannedHardwareID.hardware_id"`)}
	}
	if _, ok := bhic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "BannedHardwareID.created_at"`)}
	}
	return nil
}

func (bhic *BannedHardwareIDCreate) sqlSave(ctx context.Context) (*BannedHardwareID, error) {
	if err := bhic.check(); err != nil {
		return nil, err
	}
	_node, _spec := bhic.createSpec()
	if err := sqlgraph.CreateNode(ctx, bhic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	bhic.mutation.id = &_node.ID
	bhic.mutation.done = true
	return _node, nil
}

func (bhic *BannedHardwareIDCreate) createSpec() (*BannedHardwareID, *sqlgraph.CreateSpec) {
	var (
		_node = &BannedHardwareID{config: bhic.config}
		_spec = sqlgraph.NewCreateSpec(bannedhardwareid.Table, sqlgraph.NewFieldSpec(bannedhardwareid.FieldID, field.TypeInt))
	)
	if id, ok := bhic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bhic.mutation.HardwareID(); ok {
		_spec.SetField(bannedhardwareid.FieldHardwareID, field.TypeString, value)
		_node.HardwareID = value
	}
	if value, ok := bhic.mutation.CreatedAt(); ok {
		_spec.SetField(bannedhardwareid.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bhic.mutation.BanReason(); ok {
		_spec.SetField(bannedhardwareid.FieldBanReason, field.TypeString, value)
		_node.BanReason = &value
	}
	return _node, _spec
}

// BannedHardwareIDCreateBulk is the builder for creating many BannedHardwareID entities in bulk.
type BannedHardwareIDCreateBulk struct {
	config
	err      error
	builders []*BannedHardwareIDCreate
}

// Save creates the BannedHardwareID entities in the database.
func (bhicb *BannedHardwareIDCreateBulk) Save(ctx context.Context) ([]*BannedHardwareID, error) {
	if bhicb.err != nil {
		return nil, bhicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bhicb.builders))
	nodes := make([]*BannedHardwareID, len(bhicb.builders))
	mutators := make([]Mutator, len(bhicb.builders))
	for i := range bhicb.builders {
		func(i int, root context.Context) {
			builder := bhicb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BannedHardwareIDMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bhicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bhicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bhicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bhicb *BannedHardwareIDCreateBulk) SaveX(ctx context.Context) []*BannedHardwareID {
	v, err := bhicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bhicb *BannedHardwareIDCreateBulk) Exec(ctx context.Context) error {
	_, err := bhicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bhicb *BannedHardwareIDCreateBulk) ExecX(ctx context.Context) {
	if err := bhicb.Exec(ctx); err != nil {
		panic(err)
	}
}
