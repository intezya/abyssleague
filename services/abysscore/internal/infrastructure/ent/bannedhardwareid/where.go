// Code generated by ent, DO NOT EDIT.

package bannedhardwareid

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/intezya/abyssleague/services/abysscore/internal/infrastructure/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.BannedHardwareID {
	return predicate.BannedHardwareID(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.BannedHardwareID {
	return predicate.BannedHardwareID(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.BannedHardwareID {
	return predicate.BannedHardwareID(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.BannedHardwareID {
	return predicate.BannedHardwareID(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.BannedHardwareID {
	return predicate.BannedHardwareID(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.BannedHardwareID {
	return predicate.BannedHardwareID(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.BannedHardwareID {
	return predicate.BannedHardwareID(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.BannedHardwareID {
	return predicate.BannedHardwareID(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.BannedHardwareID {
	return predicate.BannedHardwareID(sql.FieldLTE(FieldID, id))
}

// HardwareID applies equality check predicate on the "hardware_id" field. It's identical to HardwareIDEQ.
func HardwareID(v string) predicate.BannedHardwareID {
	return predicate.BannedHardwareID(sql.FieldEQ(FieldHardwareID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.BannedHardwareID {
	return predicate.BannedHardwareID(sql.FieldEQ(FieldCreatedAt, v))
}

// BanReason applies equality check predicate on the "ban_reason" field. It's identical to BanReasonEQ.
func BanReason(v string) predicate.BannedHardwareID {
	return predicate.BannedHardwareID(sql.FieldEQ(FieldBanReason, v))
}

// HardwareIDEQ applies the EQ predicate on the "hardware_id" field.
func HardwareIDEQ(v string) predicate.BannedHardwareID {
	return predicate.BannedHardwareID(sql.FieldEQ(FieldHardwareID, v))
}

// HardwareIDNEQ applies the NEQ predicate on the "hardware_id" field.
func HardwareIDNEQ(v string) predicate.BannedHardwareID {
	return predicate.BannedHardwareID(sql.FieldNEQ(FieldHardwareID, v))
}

// HardwareIDIn applies the In predicate on the "hardware_id" field.
func HardwareIDIn(vs ...string) predicate.BannedHardwareID {
	return predicate.BannedHardwareID(sql.FieldIn(FieldHardwareID, vs...))
}

// HardwareIDNotIn applies the NotIn predicate on the "hardware_id" field.
func HardwareIDNotIn(vs ...string) predicate.BannedHardwareID {
	return predicate.BannedHardwareID(sql.FieldNotIn(FieldHardwareID, vs...))
}

// HardwareIDGT applies the GT predicate on the "hardware_id" field.
func HardwareIDGT(v string) predicate.BannedHardwareID {
	return predicate.BannedHardwareID(sql.FieldGT(FieldHardwareID, v))
}

// HardwareIDGTE applies the GTE predicate on the "hardware_id" field.
func HardwareIDGTE(v string) predicate.BannedHardwareID {
	return predicate.BannedHardwareID(sql.FieldGTE(FieldHardwareID, v))
}

// HardwareIDLT applies the LT predicate on the "hardware_id" field.
func HardwareIDLT(v string) predicate.BannedHardwareID {
	return predicate.BannedHardwareID(sql.FieldLT(FieldHardwareID, v))
}

// HardwareIDLTE applies the LTE predicate on the "hardware_id" field.
func HardwareIDLTE(v string) predicate.BannedHardwareID {
	return predicate.BannedHardwareID(sql.FieldLTE(FieldHardwareID, v))
}

// HardwareIDContains applies the Contains predicate on the "hardware_id" field.
func HardwareIDContains(v string) predicate.BannedHardwareID {
	return predicate.BannedHardwareID(sql.FieldContains(FieldHardwareID, v))
}

// HardwareIDHasPrefix applies the HasPrefix predicate on the "hardware_id" field.
func HardwareIDHasPrefix(v string) predicate.BannedHardwareID {
	return predicate.BannedHardwareID(sql.FieldHasPrefix(FieldHardwareID, v))
}

// HardwareIDHasSuffix applies the HasSuffix predicate on the "hardware_id" field.
func HardwareIDHasSuffix(v string) predicate.BannedHardwareID {
	return predicate.BannedHardwareID(sql.FieldHasSuffix(FieldHardwareID, v))
}

// HardwareIDEqualFold applies the EqualFold predicate on the "hardware_id" field.
func HardwareIDEqualFold(v string) predicate.BannedHardwareID {
	return predicate.BannedHardwareID(sql.FieldEqualFold(FieldHardwareID, v))
}

// HardwareIDContainsFold applies the ContainsFold predicate on the "hardware_id" field.
func HardwareIDContainsFold(v string) predicate.BannedHardwareID {
	return predicate.BannedHardwareID(sql.FieldContainsFold(FieldHardwareID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.BannedHardwareID {
	return predicate.BannedHardwareID(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.BannedHardwareID {
	return predicate.BannedHardwareID(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.BannedHardwareID {
	return predicate.BannedHardwareID(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.BannedHardwareID {
	return predicate.BannedHardwareID(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.BannedHardwareID {
	return predicate.BannedHardwareID(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.BannedHardwareID {
	return predicate.BannedHardwareID(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.BannedHardwareID {
	return predicate.BannedHardwareID(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.BannedHardwareID {
	return predicate.BannedHardwareID(sql.FieldLTE(FieldCreatedAt, v))
}

// BanReasonEQ applies the EQ predicate on the "ban_reason" field.
func BanReasonEQ(v string) predicate.BannedHardwareID {
	return predicate.BannedHardwareID(sql.FieldEQ(FieldBanReason, v))
}

// BanReasonNEQ applies the NEQ predicate on the "ban_reason" field.
func BanReasonNEQ(v string) predicate.BannedHardwareID {
	return predicate.BannedHardwareID(sql.FieldNEQ(FieldBanReason, v))
}

// BanReasonIn applies the In predicate on the "ban_reason" field.
func BanReasonIn(vs ...string) predicate.BannedHardwareID {
	return predicate.BannedHardwareID(sql.FieldIn(FieldBanReason, vs...))
}

// BanReasonNotIn applies the NotIn predicate on the "ban_reason" field.
func BanReasonNotIn(vs ...string) predicate.BannedHardwareID {
	return predicate.BannedHardwareID(sql.FieldNotIn(FieldBanReason, vs...))
}

// BanReasonGT applies the GT predicate on the "ban_reason" field.
func BanReasonGT(v string) predicate.BannedHardwareID {
	return predicate.BannedHardwareID(sql.FieldGT(FieldBanReason, v))
}

// BanReasonGTE applies the GTE predicate on the "ban_reason" field.
func BanReasonGTE(v string) predicate.BannedHardwareID {
	return predicate.BannedHardwareID(sql.FieldGTE(FieldBanReason, v))
}

// BanReasonLT applies the LT predicate on the "ban_reason" field.
func BanReasonLT(v string) predicate.BannedHardwareID {
	return predicate.BannedHardwareID(sql.FieldLT(FieldBanReason, v))
}

// BanReasonLTE applies the LTE predicate on the "ban_reason" field.
func BanReasonLTE(v string) predicate.BannedHardwareID {
	return predicate.BannedHardwareID(sql.FieldLTE(FieldBanReason, v))
}

// BanReasonContains applies the Contains predicate on the "ban_reason" field.
func BanReasonContains(v string) predicate.BannedHardwareID {
	return predicate.BannedHardwareID(sql.FieldContains(FieldBanReason, v))
}

// BanReasonHasPrefix applies the HasPrefix predicate on the "ban_reason" field.
func BanReasonHasPrefix(v string) predicate.BannedHardwareID {
	return predicate.BannedHardwareID(sql.FieldHasPrefix(FieldBanReason, v))
}

// BanReasonHasSuffix applies the HasSuffix predicate on the "ban_reason" field.
func BanReasonHasSuffix(v string) predicate.BannedHardwareID {
	return predicate.BannedHardwareID(sql.FieldHasSuffix(FieldBanReason, v))
}

// BanReasonIsNil applies the IsNil predicate on the "ban_reason" field.
func BanReasonIsNil() predicate.BannedHardwareID {
	return predicate.BannedHardwareID(sql.FieldIsNull(FieldBanReason))
}

// BanReasonNotNil applies the NotNil predicate on the "ban_reason" field.
func BanReasonNotNil() predicate.BannedHardwareID {
	return predicate.BannedHardwareID(sql.FieldNotNull(FieldBanReason))
}

// BanReasonEqualFold applies the EqualFold predicate on the "ban_reason" field.
func BanReasonEqualFold(v string) predicate.BannedHardwareID {
	return predicate.BannedHardwareID(sql.FieldEqualFold(FieldBanReason, v))
}

// BanReasonContainsFold applies the ContainsFold predicate on the "ban_reason" field.
func BanReasonContainsFold(v string) predicate.BannedHardwareID {
	return predicate.BannedHardwareID(sql.FieldContainsFold(FieldBanReason, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BannedHardwareID) predicate.BannedHardwareID {
	return predicate.BannedHardwareID(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BannedHardwareID) predicate.BannedHardwareID {
	return predicate.BannedHardwareID(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BannedHardwareID) predicate.BannedHardwareID {
	return predicate.BannedHardwareID(sql.NotPredicates(p))
}
