// Code generated by ent, DO NOT EDIT.

package ent

import (
	"abysscore/internal/infrastructure/ent/gameitem"
	"abysscore/internal/infrastructure/ent/predicate"
	"abysscore/internal/infrastructure/ent/useritem"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GameItemUpdate is the builder for updating GameItem entities.
type GameItemUpdate struct {
	config
	hooks    []Hook
	mutation *GameItemMutation
}

// Where appends a list predicates to the GameItemUpdate builder.
func (giu *GameItemUpdate) Where(ps ...predicate.GameItem) *GameItemUpdate {
	giu.mutation.Where(ps...)
	return giu
}

// SetName sets the "name" field.
func (giu *GameItemUpdate) SetName(s string) *GameItemUpdate {
	giu.mutation.SetName(s)
	return giu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (giu *GameItemUpdate) SetNillableName(s *string) *GameItemUpdate {
	if s != nil {
		giu.SetName(*s)
	}
	return giu
}

// SetCollection sets the "collection" field.
func (giu *GameItemUpdate) SetCollection(s string) *GameItemUpdate {
	giu.mutation.SetCollection(s)
	return giu
}

// SetNillableCollection sets the "collection" field if the given value is not nil.
func (giu *GameItemUpdate) SetNillableCollection(s *string) *GameItemUpdate {
	if s != nil {
		giu.SetCollection(*s)
	}
	return giu
}

// SetType sets the "type" field.
func (giu *GameItemUpdate) SetType(i int) *GameItemUpdate {
	giu.mutation.ResetType()
	giu.mutation.SetType(i)
	return giu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (giu *GameItemUpdate) SetNillableType(i *int) *GameItemUpdate {
	if i != nil {
		giu.SetType(*i)
	}
	return giu
}

// AddType adds i to the "type" field.
func (giu *GameItemUpdate) AddType(i int) *GameItemUpdate {
	giu.mutation.AddType(i)
	return giu
}

// SetRarity sets the "rarity" field.
func (giu *GameItemUpdate) SetRarity(i int) *GameItemUpdate {
	giu.mutation.ResetRarity()
	giu.mutation.SetRarity(i)
	return giu
}

// SetNillableRarity sets the "rarity" field if the given value is not nil.
func (giu *GameItemUpdate) SetNillableRarity(i *int) *GameItemUpdate {
	if i != nil {
		giu.SetRarity(*i)
	}
	return giu
}

// AddRarity adds i to the "rarity" field.
func (giu *GameItemUpdate) AddRarity(i int) *GameItemUpdate {
	giu.mutation.AddRarity(i)
	return giu
}

// AddUserItemIDs adds the "user_items" edge to the UserItem entity by IDs.
func (giu *GameItemUpdate) AddUserItemIDs(ids ...int) *GameItemUpdate {
	giu.mutation.AddUserItemIDs(ids...)
	return giu
}

// AddUserItems adds the "user_items" edges to the UserItem entity.
func (giu *GameItemUpdate) AddUserItems(u ...*UserItem) *GameItemUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return giu.AddUserItemIDs(ids...)
}

// Mutation returns the GameItemMutation object of the builder.
func (giu *GameItemUpdate) Mutation() *GameItemMutation {
	return giu.mutation
}

// ClearUserItems clears all "user_items" edges to the UserItem entity.
func (giu *GameItemUpdate) ClearUserItems() *GameItemUpdate {
	giu.mutation.ClearUserItems()
	return giu
}

// RemoveUserItemIDs removes the "user_items" edge to UserItem entities by IDs.
func (giu *GameItemUpdate) RemoveUserItemIDs(ids ...int) *GameItemUpdate {
	giu.mutation.RemoveUserItemIDs(ids...)
	return giu
}

// RemoveUserItems removes "user_items" edges to UserItem entities.
func (giu *GameItemUpdate) RemoveUserItems(u ...*UserItem) *GameItemUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return giu.RemoveUserItemIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (giu *GameItemUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, giu.sqlSave, giu.mutation, giu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (giu *GameItemUpdate) SaveX(ctx context.Context) int {
	affected, err := giu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (giu *GameItemUpdate) Exec(ctx context.Context) error {
	_, err := giu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (giu *GameItemUpdate) ExecX(ctx context.Context) {
	if err := giu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (giu *GameItemUpdate) check() error {
	if v, ok := giu.mutation.Name(); ok {
		if err := gameitem.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "GameItem.name": %w`, err)}
		}
	}
	if v, ok := giu.mutation.Collection(); ok {
		if err := gameitem.CollectionValidator(v); err != nil {
			return &ValidationError{Name: "collection", err: fmt.Errorf(`ent: validator failed for field "GameItem.collection": %w`, err)}
		}
	}
	if v, ok := giu.mutation.GetType(); ok {
		if err := gameitem.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "GameItem.type": %w`, err)}
		}
	}
	if v, ok := giu.mutation.Rarity(); ok {
		if err := gameitem.RarityValidator(v); err != nil {
			return &ValidationError{Name: "rarity", err: fmt.Errorf(`ent: validator failed for field "GameItem.rarity": %w`, err)}
		}
	}
	return nil
}

func (giu *GameItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := giu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(gameitem.Table, gameitem.Columns, sqlgraph.NewFieldSpec(gameitem.FieldID, field.TypeInt))
	if ps := giu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := giu.mutation.Name(); ok {
		_spec.SetField(gameitem.FieldName, field.TypeString, value)
	}
	if value, ok := giu.mutation.Collection(); ok {
		_spec.SetField(gameitem.FieldCollection, field.TypeString, value)
	}
	if value, ok := giu.mutation.GetType(); ok {
		_spec.SetField(gameitem.FieldType, field.TypeInt, value)
	}
	if value, ok := giu.mutation.AddedType(); ok {
		_spec.AddField(gameitem.FieldType, field.TypeInt, value)
	}
	if value, ok := giu.mutation.Rarity(); ok {
		_spec.SetField(gameitem.FieldRarity, field.TypeInt, value)
	}
	if value, ok := giu.mutation.AddedRarity(); ok {
		_spec.AddField(gameitem.FieldRarity, field.TypeInt, value)
	}
	if giu.mutation.UserItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gameitem.UserItemsTable,
			Columns: []string{gameitem.UserItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useritem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := giu.mutation.RemovedUserItemsIDs(); len(nodes) > 0 && !giu.mutation.UserItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gameitem.UserItemsTable,
			Columns: []string{gameitem.UserItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useritem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := giu.mutation.UserItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gameitem.UserItemsTable,
			Columns: []string{gameitem.UserItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useritem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, giu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gameitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	giu.mutation.done = true
	return n, nil
}

// GameItemUpdateOne is the builder for updating a single GameItem entity.
type GameItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GameItemMutation
}

// SetName sets the "name" field.
func (giuo *GameItemUpdateOne) SetName(s string) *GameItemUpdateOne {
	giuo.mutation.SetName(s)
	return giuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (giuo *GameItemUpdateOne) SetNillableName(s *string) *GameItemUpdateOne {
	if s != nil {
		giuo.SetName(*s)
	}
	return giuo
}

// SetCollection sets the "collection" field.
func (giuo *GameItemUpdateOne) SetCollection(s string) *GameItemUpdateOne {
	giuo.mutation.SetCollection(s)
	return giuo
}

// SetNillableCollection sets the "collection" field if the given value is not nil.
func (giuo *GameItemUpdateOne) SetNillableCollection(s *string) *GameItemUpdateOne {
	if s != nil {
		giuo.SetCollection(*s)
	}
	return giuo
}

// SetType sets the "type" field.
func (giuo *GameItemUpdateOne) SetType(i int) *GameItemUpdateOne {
	giuo.mutation.ResetType()
	giuo.mutation.SetType(i)
	return giuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (giuo *GameItemUpdateOne) SetNillableType(i *int) *GameItemUpdateOne {
	if i != nil {
		giuo.SetType(*i)
	}
	return giuo
}

// AddType adds i to the "type" field.
func (giuo *GameItemUpdateOne) AddType(i int) *GameItemUpdateOne {
	giuo.mutation.AddType(i)
	return giuo
}

// SetRarity sets the "rarity" field.
func (giuo *GameItemUpdateOne) SetRarity(i int) *GameItemUpdateOne {
	giuo.mutation.ResetRarity()
	giuo.mutation.SetRarity(i)
	return giuo
}

// SetNillableRarity sets the "rarity" field if the given value is not nil.
func (giuo *GameItemUpdateOne) SetNillableRarity(i *int) *GameItemUpdateOne {
	if i != nil {
		giuo.SetRarity(*i)
	}
	return giuo
}

// AddRarity adds i to the "rarity" field.
func (giuo *GameItemUpdateOne) AddRarity(i int) *GameItemUpdateOne {
	giuo.mutation.AddRarity(i)
	return giuo
}

// AddUserItemIDs adds the "user_items" edge to the UserItem entity by IDs.
func (giuo *GameItemUpdateOne) AddUserItemIDs(ids ...int) *GameItemUpdateOne {
	giuo.mutation.AddUserItemIDs(ids...)
	return giuo
}

// AddUserItems adds the "user_items" edges to the UserItem entity.
func (giuo *GameItemUpdateOne) AddUserItems(u ...*UserItem) *GameItemUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return giuo.AddUserItemIDs(ids...)
}

// Mutation returns the GameItemMutation object of the builder.
func (giuo *GameItemUpdateOne) Mutation() *GameItemMutation {
	return giuo.mutation
}

// ClearUserItems clears all "user_items" edges to the UserItem entity.
func (giuo *GameItemUpdateOne) ClearUserItems() *GameItemUpdateOne {
	giuo.mutation.ClearUserItems()
	return giuo
}

// RemoveUserItemIDs removes the "user_items" edge to UserItem entities by IDs.
func (giuo *GameItemUpdateOne) RemoveUserItemIDs(ids ...int) *GameItemUpdateOne {
	giuo.mutation.RemoveUserItemIDs(ids...)
	return giuo
}

// RemoveUserItems removes "user_items" edges to UserItem entities.
func (giuo *GameItemUpdateOne) RemoveUserItems(u ...*UserItem) *GameItemUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return giuo.RemoveUserItemIDs(ids...)
}

// Where appends a list predicates to the GameItemUpdate builder.
func (giuo *GameItemUpdateOne) Where(ps ...predicate.GameItem) *GameItemUpdateOne {
	giuo.mutation.Where(ps...)
	return giuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (giuo *GameItemUpdateOne) Select(field string, fields ...string) *GameItemUpdateOne {
	giuo.fields = append([]string{field}, fields...)
	return giuo
}

// Save executes the query and returns the updated GameItem entity.
func (giuo *GameItemUpdateOne) Save(ctx context.Context) (*GameItem, error) {
	return withHooks(ctx, giuo.sqlSave, giuo.mutation, giuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (giuo *GameItemUpdateOne) SaveX(ctx context.Context) *GameItem {
	node, err := giuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (giuo *GameItemUpdateOne) Exec(ctx context.Context) error {
	_, err := giuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (giuo *GameItemUpdateOne) ExecX(ctx context.Context) {
	if err := giuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (giuo *GameItemUpdateOne) check() error {
	if v, ok := giuo.mutation.Name(); ok {
		if err := gameitem.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "GameItem.name": %w`, err)}
		}
	}
	if v, ok := giuo.mutation.Collection(); ok {
		if err := gameitem.CollectionValidator(v); err != nil {
			return &ValidationError{Name: "collection", err: fmt.Errorf(`ent: validator failed for field "GameItem.collection": %w`, err)}
		}
	}
	if v, ok := giuo.mutation.GetType(); ok {
		if err := gameitem.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "GameItem.type": %w`, err)}
		}
	}
	if v, ok := giuo.mutation.Rarity(); ok {
		if err := gameitem.RarityValidator(v); err != nil {
			return &ValidationError{Name: "rarity", err: fmt.Errorf(`ent: validator failed for field "GameItem.rarity": %w`, err)}
		}
	}
	return nil
}

func (giuo *GameItemUpdateOne) sqlSave(ctx context.Context) (_node *GameItem, err error) {
	if err := giuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(gameitem.Table, gameitem.Columns, sqlgraph.NewFieldSpec(gameitem.FieldID, field.TypeInt))
	id, ok := giuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GameItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := giuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, gameitem.FieldID)
		for _, f := range fields {
			if !gameitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != gameitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := giuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := giuo.mutation.Name(); ok {
		_spec.SetField(gameitem.FieldName, field.TypeString, value)
	}
	if value, ok := giuo.mutation.Collection(); ok {
		_spec.SetField(gameitem.FieldCollection, field.TypeString, value)
	}
	if value, ok := giuo.mutation.GetType(); ok {
		_spec.SetField(gameitem.FieldType, field.TypeInt, value)
	}
	if value, ok := giuo.mutation.AddedType(); ok {
		_spec.AddField(gameitem.FieldType, field.TypeInt, value)
	}
	if value, ok := giuo.mutation.Rarity(); ok {
		_spec.SetField(gameitem.FieldRarity, field.TypeInt, value)
	}
	if value, ok := giuo.mutation.AddedRarity(); ok {
		_spec.AddField(gameitem.FieldRarity, field.TypeInt, value)
	}
	if giuo.mutation.UserItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gameitem.UserItemsTable,
			Columns: []string{gameitem.UserItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useritem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := giuo.mutation.RemovedUserItemsIDs(); len(nodes) > 0 && !giuo.mutation.UserItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gameitem.UserItemsTable,
			Columns: []string{gameitem.UserItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useritem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := giuo.mutation.UserItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gameitem.UserItemsTable,
			Columns: []string{gameitem.UserItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useritem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &GameItem{config: giuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, giuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gameitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	giuo.mutation.done = true
	return _node, nil
}
