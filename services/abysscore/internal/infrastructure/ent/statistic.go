// Code generated by ent, DO NOT EDIT.

package ent

import (
	"abysscore/internal/infrastructure/ent/statistic"
	"abysscore/internal/infrastructure/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Statistic is the model entity for the Statistic schema.
type Statistic struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// Type holds the value of the "type" field.
	Type statistic.Type `json:"type,omitempty"`
	// Period holds the value of the "period" field.
	Period int `json:"period,omitempty"`
	// Xp holds the value of the "xp" field.
	Xp int `json:"xp,omitempty"`
	// MatchCount holds the value of the "match_count" field.
	MatchCount int `json:"match_count,omitempty"`
	// WinsCount holds the value of the "wins_count" field.
	WinsCount int `json:"wins_count,omitempty"`
	// LosesCount holds the value of the "loses_count" field.
	LosesCount int `json:"loses_count,omitempty"`
	// DrawsCount holds the value of the "draws_count" field.
	DrawsCount int `json:"draws_count,omitempty"`
	// ResultTime holds the value of the "result_time" field.
	ResultTime int `json:"result_time,omitempty"`
	// RetryTime holds the value of the "retry_time" field.
	RetryTime int `json:"retry_time,omitempty"`
	// RetryCount holds the value of the "retry_count" field.
	RetryCount int `json:"retry_count,omitempty"`
	// BestResultTime holds the value of the "best_result_time" field.
	BestResultTime int `json:"best_result_time,omitempty"`
	// BestRetryCount holds the value of the "best_retry_count" field.
	BestRetryCount int `json:"best_retry_count,omitempty"`
	// BestMatchTime holds the value of the "best_match_time" field.
	BestMatchTime int `json:"best_match_time,omitempty"`
	// WorstResultTime holds the value of the "worst_result_time" field.
	WorstResultTime int `json:"worst_result_time,omitempty"`
	// WorstRetryCount holds the value of the "worst_retry_count" field.
	WorstRetryCount int `json:"worst_retry_count,omitempty"`
	// WorstMatchTime holds the value of the "worst_match_time" field.
	WorstMatchTime int `json:"worst_match_time,omitempty"`
	// MaxWinStreak holds the value of the "max_win_streak" field.
	MaxWinStreak int `json:"max_win_streak,omitempty"`
	// MaxLoseStreak holds the value of the "max_lose_streak" field.
	MaxLoseStreak int `json:"max_lose_streak,omitempty"`
	// MaxLoginStreak holds the value of the "max_login_streak" field.
	MaxLoginStreak int `json:"max_login_streak,omitempty"`
	// SearchScore holds the value of the "search_score" field.
	SearchScore int `json:"search_score,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StatisticQuery when eager-loading is set.
	Edges        StatisticEdges `json:"edges"`
	selectValues sql.SelectValues
}

// StatisticEdges holds the relations/edges for other nodes in the graph.
type StatisticEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StatisticEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Statistic) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case statistic.FieldID, statistic.FieldUserID, statistic.FieldPeriod, statistic.FieldXp, statistic.FieldMatchCount, statistic.FieldWinsCount, statistic.FieldLosesCount, statistic.FieldDrawsCount, statistic.FieldResultTime, statistic.FieldRetryTime, statistic.FieldRetryCount, statistic.FieldBestResultTime, statistic.FieldBestRetryCount, statistic.FieldBestMatchTime, statistic.FieldWorstResultTime, statistic.FieldWorstRetryCount, statistic.FieldWorstMatchTime, statistic.FieldMaxWinStreak, statistic.FieldMaxLoseStreak, statistic.FieldMaxLoginStreak, statistic.FieldSearchScore:
			values[i] = new(sql.NullInt64)
		case statistic.FieldType:
			values[i] = new(sql.NullString)
		case statistic.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Statistic fields.
func (s *Statistic) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case statistic.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case statistic.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				s.UserID = int(value.Int64)
			}
		case statistic.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				s.Type = statistic.Type(value.String)
			}
		case statistic.FieldPeriod:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field period", values[i])
			} else if value.Valid {
				s.Period = int(value.Int64)
			}
		case statistic.FieldXp:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field xp", values[i])
			} else if value.Valid {
				s.Xp = int(value.Int64)
			}
		case statistic.FieldMatchCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field match_count", values[i])
			} else if value.Valid {
				s.MatchCount = int(value.Int64)
			}
		case statistic.FieldWinsCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field wins_count", values[i])
			} else if value.Valid {
				s.WinsCount = int(value.Int64)
			}
		case statistic.FieldLosesCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field loses_count", values[i])
			} else if value.Valid {
				s.LosesCount = int(value.Int64)
			}
		case statistic.FieldDrawsCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field draws_count", values[i])
			} else if value.Valid {
				s.DrawsCount = int(value.Int64)
			}
		case statistic.FieldResultTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field result_time", values[i])
			} else if value.Valid {
				s.ResultTime = int(value.Int64)
			}
		case statistic.FieldRetryTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field retry_time", values[i])
			} else if value.Valid {
				s.RetryTime = int(value.Int64)
			}
		case statistic.FieldRetryCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field retry_count", values[i])
			} else if value.Valid {
				s.RetryCount = int(value.Int64)
			}
		case statistic.FieldBestResultTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field best_result_time", values[i])
			} else if value.Valid {
				s.BestResultTime = int(value.Int64)
			}
		case statistic.FieldBestRetryCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field best_retry_count", values[i])
			} else if value.Valid {
				s.BestRetryCount = int(value.Int64)
			}
		case statistic.FieldBestMatchTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field best_match_time", values[i])
			} else if value.Valid {
				s.BestMatchTime = int(value.Int64)
			}
		case statistic.FieldWorstResultTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field worst_result_time", values[i])
			} else if value.Valid {
				s.WorstResultTime = int(value.Int64)
			}
		case statistic.FieldWorstRetryCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field worst_retry_count", values[i])
			} else if value.Valid {
				s.WorstRetryCount = int(value.Int64)
			}
		case statistic.FieldWorstMatchTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field worst_match_time", values[i])
			} else if value.Valid {
				s.WorstMatchTime = int(value.Int64)
			}
		case statistic.FieldMaxWinStreak:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_win_streak", values[i])
			} else if value.Valid {
				s.MaxWinStreak = int(value.Int64)
			}
		case statistic.FieldMaxLoseStreak:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_lose_streak", values[i])
			} else if value.Valid {
				s.MaxLoseStreak = int(value.Int64)
			}
		case statistic.FieldMaxLoginStreak:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_login_streak", values[i])
			} else if value.Valid {
				s.MaxLoginStreak = int(value.Int64)
			}
		case statistic.FieldSearchScore:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field search_score", values[i])
			} else if value.Valid {
				s.SearchScore = int(value.Int64)
			}
		case statistic.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Statistic.
// This includes values selected through modifiers, order, etc.
func (s *Statistic) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Statistic entity.
func (s *Statistic) QueryUser() *UserQuery {
	return NewStatisticClient(s.config).QueryUser(s)
}

// Update returns a builder for updating this Statistic.
// Note that you need to call Statistic.Unwrap() before calling this method if this Statistic
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Statistic) Update() *StatisticUpdateOne {
	return NewStatisticClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Statistic entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Statistic) Unwrap() *Statistic {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Statistic is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Statistic) String() string {
	var builder strings.Builder
	builder.WriteString("Statistic(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", s.UserID))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", s.Type))
	builder.WriteString(", ")
	builder.WriteString("period=")
	builder.WriteString(fmt.Sprintf("%v", s.Period))
	builder.WriteString(", ")
	builder.WriteString("xp=")
	builder.WriteString(fmt.Sprintf("%v", s.Xp))
	builder.WriteString(", ")
	builder.WriteString("match_count=")
	builder.WriteString(fmt.Sprintf("%v", s.MatchCount))
	builder.WriteString(", ")
	builder.WriteString("wins_count=")
	builder.WriteString(fmt.Sprintf("%v", s.WinsCount))
	builder.WriteString(", ")
	builder.WriteString("loses_count=")
	builder.WriteString(fmt.Sprintf("%v", s.LosesCount))
	builder.WriteString(", ")
	builder.WriteString("draws_count=")
	builder.WriteString(fmt.Sprintf("%v", s.DrawsCount))
	builder.WriteString(", ")
	builder.WriteString("result_time=")
	builder.WriteString(fmt.Sprintf("%v", s.ResultTime))
	builder.WriteString(", ")
	builder.WriteString("retry_time=")
	builder.WriteString(fmt.Sprintf("%v", s.RetryTime))
	builder.WriteString(", ")
	builder.WriteString("retry_count=")
	builder.WriteString(fmt.Sprintf("%v", s.RetryCount))
	builder.WriteString(", ")
	builder.WriteString("best_result_time=")
	builder.WriteString(fmt.Sprintf("%v", s.BestResultTime))
	builder.WriteString(", ")
	builder.WriteString("best_retry_count=")
	builder.WriteString(fmt.Sprintf("%v", s.BestRetryCount))
	builder.WriteString(", ")
	builder.WriteString("best_match_time=")
	builder.WriteString(fmt.Sprintf("%v", s.BestMatchTime))
	builder.WriteString(", ")
	builder.WriteString("worst_result_time=")
	builder.WriteString(fmt.Sprintf("%v", s.WorstResultTime))
	builder.WriteString(", ")
	builder.WriteString("worst_retry_count=")
	builder.WriteString(fmt.Sprintf("%v", s.WorstRetryCount))
	builder.WriteString(", ")
	builder.WriteString("worst_match_time=")
	builder.WriteString(fmt.Sprintf("%v", s.WorstMatchTime))
	builder.WriteString(", ")
	builder.WriteString("max_win_streak=")
	builder.WriteString(fmt.Sprintf("%v", s.MaxWinStreak))
	builder.WriteString(", ")
	builder.WriteString("max_lose_streak=")
	builder.WriteString(fmt.Sprintf("%v", s.MaxLoseStreak))
	builder.WriteString(", ")
	builder.WriteString("max_login_streak=")
	builder.WriteString(fmt.Sprintf("%v", s.MaxLoginStreak))
	builder.WriteString(", ")
	builder.WriteString("search_score=")
	builder.WriteString(fmt.Sprintf("%v", s.SearchScore))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Statistics is a parsable slice of Statistic.
type Statistics []*Statistic
