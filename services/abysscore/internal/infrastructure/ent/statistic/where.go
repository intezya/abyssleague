// Code generated by ent, DO NOT EDIT.

package statistic

import (
	"abysscore/internal/infrastructure/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Statistic {
	return predicate.Statistic(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Statistic {
	return predicate.Statistic(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Statistic {
	return predicate.Statistic(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Statistic {
	return predicate.Statistic(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Statistic {
	return predicate.Statistic(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Statistic {
	return predicate.Statistic(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Statistic {
	return predicate.Statistic(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Statistic {
	return predicate.Statistic(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Statistic {
	return predicate.Statistic(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldEQ(FieldUserID, v))
}

// Period applies equality check predicate on the "period" field. It's identical to PeriodEQ.
func Period(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldEQ(FieldPeriod, v))
}

// Xp applies equality check predicate on the "xp" field. It's identical to XpEQ.
func Xp(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldEQ(FieldXp, v))
}

// MatchCount applies equality check predicate on the "match_count" field. It's identical to MatchCountEQ.
func MatchCount(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldEQ(FieldMatchCount, v))
}

// WinsCount applies equality check predicate on the "wins_count" field. It's identical to WinsCountEQ.
func WinsCount(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldEQ(FieldWinsCount, v))
}

// LosesCount applies equality check predicate on the "loses_count" field. It's identical to LosesCountEQ.
func LosesCount(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldEQ(FieldLosesCount, v))
}

// DrawsCount applies equality check predicate on the "draws_count" field. It's identical to DrawsCountEQ.
func DrawsCount(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldEQ(FieldDrawsCount, v))
}

// ResultTime applies equality check predicate on the "result_time" field. It's identical to ResultTimeEQ.
func ResultTime(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldEQ(FieldResultTime, v))
}

// RetryTime applies equality check predicate on the "retry_time" field. It's identical to RetryTimeEQ.
func RetryTime(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldEQ(FieldRetryTime, v))
}

// RetryCount applies equality check predicate on the "retry_count" field. It's identical to RetryCountEQ.
func RetryCount(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldEQ(FieldRetryCount, v))
}

// BestResultTime applies equality check predicate on the "best_result_time" field. It's identical to BestResultTimeEQ.
func BestResultTime(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldEQ(FieldBestResultTime, v))
}

// BestRetryCount applies equality check predicate on the "best_retry_count" field. It's identical to BestRetryCountEQ.
func BestRetryCount(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldEQ(FieldBestRetryCount, v))
}

// BestMatchTime applies equality check predicate on the "best_match_time" field. It's identical to BestMatchTimeEQ.
func BestMatchTime(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldEQ(FieldBestMatchTime, v))
}

// WorstResultTime applies equality check predicate on the "worst_result_time" field. It's identical to WorstResultTimeEQ.
func WorstResultTime(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldEQ(FieldWorstResultTime, v))
}

// WorstRetryCount applies equality check predicate on the "worst_retry_count" field. It's identical to WorstRetryCountEQ.
func WorstRetryCount(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldEQ(FieldWorstRetryCount, v))
}

// WorstMatchTime applies equality check predicate on the "worst_match_time" field. It's identical to WorstMatchTimeEQ.
func WorstMatchTime(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldEQ(FieldWorstMatchTime, v))
}

// MaxWinStreak applies equality check predicate on the "max_win_streak" field. It's identical to MaxWinStreakEQ.
func MaxWinStreak(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldEQ(FieldMaxWinStreak, v))
}

// MaxLoseStreak applies equality check predicate on the "max_lose_streak" field. It's identical to MaxLoseStreakEQ.
func MaxLoseStreak(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldEQ(FieldMaxLoseStreak, v))
}

// MaxLoginStreak applies equality check predicate on the "max_login_streak" field. It's identical to MaxLoginStreakEQ.
func MaxLoginStreak(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldEQ(FieldMaxLoginStreak, v))
}

// SearchScore applies equality check predicate on the "search_score" field. It's identical to SearchScoreEQ.
func SearchScore(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldEQ(FieldSearchScore, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Statistic {
	return predicate.Statistic(sql.FieldEQ(FieldCreatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.Statistic {
	return predicate.Statistic(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.Statistic {
	return predicate.Statistic(sql.FieldNotIn(FieldUserID, vs...))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Statistic {
	return predicate.Statistic(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Statistic {
	return predicate.Statistic(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Statistic {
	return predicate.Statistic(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Statistic {
	return predicate.Statistic(sql.FieldNotIn(FieldType, vs...))
}

// PeriodEQ applies the EQ predicate on the "period" field.
func PeriodEQ(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldEQ(FieldPeriod, v))
}

// PeriodNEQ applies the NEQ predicate on the "period" field.
func PeriodNEQ(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldNEQ(FieldPeriod, v))
}

// PeriodIn applies the In predicate on the "period" field.
func PeriodIn(vs ...int) predicate.Statistic {
	return predicate.Statistic(sql.FieldIn(FieldPeriod, vs...))
}

// PeriodNotIn applies the NotIn predicate on the "period" field.
func PeriodNotIn(vs ...int) predicate.Statistic {
	return predicate.Statistic(sql.FieldNotIn(FieldPeriod, vs...))
}

// PeriodGT applies the GT predicate on the "period" field.
func PeriodGT(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldGT(FieldPeriod, v))
}

// PeriodGTE applies the GTE predicate on the "period" field.
func PeriodGTE(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldGTE(FieldPeriod, v))
}

// PeriodLT applies the LT predicate on the "period" field.
func PeriodLT(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldLT(FieldPeriod, v))
}

// PeriodLTE applies the LTE predicate on the "period" field.
func PeriodLTE(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldLTE(FieldPeriod, v))
}

// XpEQ applies the EQ predicate on the "xp" field.
func XpEQ(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldEQ(FieldXp, v))
}

// XpNEQ applies the NEQ predicate on the "xp" field.
func XpNEQ(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldNEQ(FieldXp, v))
}

// XpIn applies the In predicate on the "xp" field.
func XpIn(vs ...int) predicate.Statistic {
	return predicate.Statistic(sql.FieldIn(FieldXp, vs...))
}

// XpNotIn applies the NotIn predicate on the "xp" field.
func XpNotIn(vs ...int) predicate.Statistic {
	return predicate.Statistic(sql.FieldNotIn(FieldXp, vs...))
}

// XpGT applies the GT predicate on the "xp" field.
func XpGT(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldGT(FieldXp, v))
}

// XpGTE applies the GTE predicate on the "xp" field.
func XpGTE(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldGTE(FieldXp, v))
}

// XpLT applies the LT predicate on the "xp" field.
func XpLT(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldLT(FieldXp, v))
}

// XpLTE applies the LTE predicate on the "xp" field.
func XpLTE(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldLTE(FieldXp, v))
}

// MatchCountEQ applies the EQ predicate on the "match_count" field.
func MatchCountEQ(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldEQ(FieldMatchCount, v))
}

// MatchCountNEQ applies the NEQ predicate on the "match_count" field.
func MatchCountNEQ(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldNEQ(FieldMatchCount, v))
}

// MatchCountIn applies the In predicate on the "match_count" field.
func MatchCountIn(vs ...int) predicate.Statistic {
	return predicate.Statistic(sql.FieldIn(FieldMatchCount, vs...))
}

// MatchCountNotIn applies the NotIn predicate on the "match_count" field.
func MatchCountNotIn(vs ...int) predicate.Statistic {
	return predicate.Statistic(sql.FieldNotIn(FieldMatchCount, vs...))
}

// MatchCountGT applies the GT predicate on the "match_count" field.
func MatchCountGT(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldGT(FieldMatchCount, v))
}

// MatchCountGTE applies the GTE predicate on the "match_count" field.
func MatchCountGTE(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldGTE(FieldMatchCount, v))
}

// MatchCountLT applies the LT predicate on the "match_count" field.
func MatchCountLT(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldLT(FieldMatchCount, v))
}

// MatchCountLTE applies the LTE predicate on the "match_count" field.
func MatchCountLTE(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldLTE(FieldMatchCount, v))
}

// WinsCountEQ applies the EQ predicate on the "wins_count" field.
func WinsCountEQ(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldEQ(FieldWinsCount, v))
}

// WinsCountNEQ applies the NEQ predicate on the "wins_count" field.
func WinsCountNEQ(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldNEQ(FieldWinsCount, v))
}

// WinsCountIn applies the In predicate on the "wins_count" field.
func WinsCountIn(vs ...int) predicate.Statistic {
	return predicate.Statistic(sql.FieldIn(FieldWinsCount, vs...))
}

// WinsCountNotIn applies the NotIn predicate on the "wins_count" field.
func WinsCountNotIn(vs ...int) predicate.Statistic {
	return predicate.Statistic(sql.FieldNotIn(FieldWinsCount, vs...))
}

// WinsCountGT applies the GT predicate on the "wins_count" field.
func WinsCountGT(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldGT(FieldWinsCount, v))
}

// WinsCountGTE applies the GTE predicate on the "wins_count" field.
func WinsCountGTE(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldGTE(FieldWinsCount, v))
}

// WinsCountLT applies the LT predicate on the "wins_count" field.
func WinsCountLT(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldLT(FieldWinsCount, v))
}

// WinsCountLTE applies the LTE predicate on the "wins_count" field.
func WinsCountLTE(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldLTE(FieldWinsCount, v))
}

// LosesCountEQ applies the EQ predicate on the "loses_count" field.
func LosesCountEQ(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldEQ(FieldLosesCount, v))
}

// LosesCountNEQ applies the NEQ predicate on the "loses_count" field.
func LosesCountNEQ(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldNEQ(FieldLosesCount, v))
}

// LosesCountIn applies the In predicate on the "loses_count" field.
func LosesCountIn(vs ...int) predicate.Statistic {
	return predicate.Statistic(sql.FieldIn(FieldLosesCount, vs...))
}

// LosesCountNotIn applies the NotIn predicate on the "loses_count" field.
func LosesCountNotIn(vs ...int) predicate.Statistic {
	return predicate.Statistic(sql.FieldNotIn(FieldLosesCount, vs...))
}

// LosesCountGT applies the GT predicate on the "loses_count" field.
func LosesCountGT(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldGT(FieldLosesCount, v))
}

// LosesCountGTE applies the GTE predicate on the "loses_count" field.
func LosesCountGTE(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldGTE(FieldLosesCount, v))
}

// LosesCountLT applies the LT predicate on the "loses_count" field.
func LosesCountLT(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldLT(FieldLosesCount, v))
}

// LosesCountLTE applies the LTE predicate on the "loses_count" field.
func LosesCountLTE(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldLTE(FieldLosesCount, v))
}

// DrawsCountEQ applies the EQ predicate on the "draws_count" field.
func DrawsCountEQ(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldEQ(FieldDrawsCount, v))
}

// DrawsCountNEQ applies the NEQ predicate on the "draws_count" field.
func DrawsCountNEQ(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldNEQ(FieldDrawsCount, v))
}

// DrawsCountIn applies the In predicate on the "draws_count" field.
func DrawsCountIn(vs ...int) predicate.Statistic {
	return predicate.Statistic(sql.FieldIn(FieldDrawsCount, vs...))
}

// DrawsCountNotIn applies the NotIn predicate on the "draws_count" field.
func DrawsCountNotIn(vs ...int) predicate.Statistic {
	return predicate.Statistic(sql.FieldNotIn(FieldDrawsCount, vs...))
}

// DrawsCountGT applies the GT predicate on the "draws_count" field.
func DrawsCountGT(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldGT(FieldDrawsCount, v))
}

// DrawsCountGTE applies the GTE predicate on the "draws_count" field.
func DrawsCountGTE(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldGTE(FieldDrawsCount, v))
}

// DrawsCountLT applies the LT predicate on the "draws_count" field.
func DrawsCountLT(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldLT(FieldDrawsCount, v))
}

// DrawsCountLTE applies the LTE predicate on the "draws_count" field.
func DrawsCountLTE(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldLTE(FieldDrawsCount, v))
}

// ResultTimeEQ applies the EQ predicate on the "result_time" field.
func ResultTimeEQ(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldEQ(FieldResultTime, v))
}

// ResultTimeNEQ applies the NEQ predicate on the "result_time" field.
func ResultTimeNEQ(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldNEQ(FieldResultTime, v))
}

// ResultTimeIn applies the In predicate on the "result_time" field.
func ResultTimeIn(vs ...int) predicate.Statistic {
	return predicate.Statistic(sql.FieldIn(FieldResultTime, vs...))
}

// ResultTimeNotIn applies the NotIn predicate on the "result_time" field.
func ResultTimeNotIn(vs ...int) predicate.Statistic {
	return predicate.Statistic(sql.FieldNotIn(FieldResultTime, vs...))
}

// ResultTimeGT applies the GT predicate on the "result_time" field.
func ResultTimeGT(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldGT(FieldResultTime, v))
}

// ResultTimeGTE applies the GTE predicate on the "result_time" field.
func ResultTimeGTE(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldGTE(FieldResultTime, v))
}

// ResultTimeLT applies the LT predicate on the "result_time" field.
func ResultTimeLT(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldLT(FieldResultTime, v))
}

// ResultTimeLTE applies the LTE predicate on the "result_time" field.
func ResultTimeLTE(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldLTE(FieldResultTime, v))
}

// RetryTimeEQ applies the EQ predicate on the "retry_time" field.
func RetryTimeEQ(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldEQ(FieldRetryTime, v))
}

// RetryTimeNEQ applies the NEQ predicate on the "retry_time" field.
func RetryTimeNEQ(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldNEQ(FieldRetryTime, v))
}

// RetryTimeIn applies the In predicate on the "retry_time" field.
func RetryTimeIn(vs ...int) predicate.Statistic {
	return predicate.Statistic(sql.FieldIn(FieldRetryTime, vs...))
}

// RetryTimeNotIn applies the NotIn predicate on the "retry_time" field.
func RetryTimeNotIn(vs ...int) predicate.Statistic {
	return predicate.Statistic(sql.FieldNotIn(FieldRetryTime, vs...))
}

// RetryTimeGT applies the GT predicate on the "retry_time" field.
func RetryTimeGT(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldGT(FieldRetryTime, v))
}

// RetryTimeGTE applies the GTE predicate on the "retry_time" field.
func RetryTimeGTE(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldGTE(FieldRetryTime, v))
}

// RetryTimeLT applies the LT predicate on the "retry_time" field.
func RetryTimeLT(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldLT(FieldRetryTime, v))
}

// RetryTimeLTE applies the LTE predicate on the "retry_time" field.
func RetryTimeLTE(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldLTE(FieldRetryTime, v))
}

// RetryCountEQ applies the EQ predicate on the "retry_count" field.
func RetryCountEQ(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldEQ(FieldRetryCount, v))
}

// RetryCountNEQ applies the NEQ predicate on the "retry_count" field.
func RetryCountNEQ(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldNEQ(FieldRetryCount, v))
}

// RetryCountIn applies the In predicate on the "retry_count" field.
func RetryCountIn(vs ...int) predicate.Statistic {
	return predicate.Statistic(sql.FieldIn(FieldRetryCount, vs...))
}

// RetryCountNotIn applies the NotIn predicate on the "retry_count" field.
func RetryCountNotIn(vs ...int) predicate.Statistic {
	return predicate.Statistic(sql.FieldNotIn(FieldRetryCount, vs...))
}

// RetryCountGT applies the GT predicate on the "retry_count" field.
func RetryCountGT(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldGT(FieldRetryCount, v))
}

// RetryCountGTE applies the GTE predicate on the "retry_count" field.
func RetryCountGTE(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldGTE(FieldRetryCount, v))
}

// RetryCountLT applies the LT predicate on the "retry_count" field.
func RetryCountLT(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldLT(FieldRetryCount, v))
}

// RetryCountLTE applies the LTE predicate on the "retry_count" field.
func RetryCountLTE(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldLTE(FieldRetryCount, v))
}

// BestResultTimeEQ applies the EQ predicate on the "best_result_time" field.
func BestResultTimeEQ(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldEQ(FieldBestResultTime, v))
}

// BestResultTimeNEQ applies the NEQ predicate on the "best_result_time" field.
func BestResultTimeNEQ(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldNEQ(FieldBestResultTime, v))
}

// BestResultTimeIn applies the In predicate on the "best_result_time" field.
func BestResultTimeIn(vs ...int) predicate.Statistic {
	return predicate.Statistic(sql.FieldIn(FieldBestResultTime, vs...))
}

// BestResultTimeNotIn applies the NotIn predicate on the "best_result_time" field.
func BestResultTimeNotIn(vs ...int) predicate.Statistic {
	return predicate.Statistic(sql.FieldNotIn(FieldBestResultTime, vs...))
}

// BestResultTimeGT applies the GT predicate on the "best_result_time" field.
func BestResultTimeGT(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldGT(FieldBestResultTime, v))
}

// BestResultTimeGTE applies the GTE predicate on the "best_result_time" field.
func BestResultTimeGTE(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldGTE(FieldBestResultTime, v))
}

// BestResultTimeLT applies the LT predicate on the "best_result_time" field.
func BestResultTimeLT(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldLT(FieldBestResultTime, v))
}

// BestResultTimeLTE applies the LTE predicate on the "best_result_time" field.
func BestResultTimeLTE(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldLTE(FieldBestResultTime, v))
}

// BestRetryCountEQ applies the EQ predicate on the "best_retry_count" field.
func BestRetryCountEQ(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldEQ(FieldBestRetryCount, v))
}

// BestRetryCountNEQ applies the NEQ predicate on the "best_retry_count" field.
func BestRetryCountNEQ(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldNEQ(FieldBestRetryCount, v))
}

// BestRetryCountIn applies the In predicate on the "best_retry_count" field.
func BestRetryCountIn(vs ...int) predicate.Statistic {
	return predicate.Statistic(sql.FieldIn(FieldBestRetryCount, vs...))
}

// BestRetryCountNotIn applies the NotIn predicate on the "best_retry_count" field.
func BestRetryCountNotIn(vs ...int) predicate.Statistic {
	return predicate.Statistic(sql.FieldNotIn(FieldBestRetryCount, vs...))
}

// BestRetryCountGT applies the GT predicate on the "best_retry_count" field.
func BestRetryCountGT(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldGT(FieldBestRetryCount, v))
}

// BestRetryCountGTE applies the GTE predicate on the "best_retry_count" field.
func BestRetryCountGTE(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldGTE(FieldBestRetryCount, v))
}

// BestRetryCountLT applies the LT predicate on the "best_retry_count" field.
func BestRetryCountLT(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldLT(FieldBestRetryCount, v))
}

// BestRetryCountLTE applies the LTE predicate on the "best_retry_count" field.
func BestRetryCountLTE(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldLTE(FieldBestRetryCount, v))
}

// BestMatchTimeEQ applies the EQ predicate on the "best_match_time" field.
func BestMatchTimeEQ(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldEQ(FieldBestMatchTime, v))
}

// BestMatchTimeNEQ applies the NEQ predicate on the "best_match_time" field.
func BestMatchTimeNEQ(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldNEQ(FieldBestMatchTime, v))
}

// BestMatchTimeIn applies the In predicate on the "best_match_time" field.
func BestMatchTimeIn(vs ...int) predicate.Statistic {
	return predicate.Statistic(sql.FieldIn(FieldBestMatchTime, vs...))
}

// BestMatchTimeNotIn applies the NotIn predicate on the "best_match_time" field.
func BestMatchTimeNotIn(vs ...int) predicate.Statistic {
	return predicate.Statistic(sql.FieldNotIn(FieldBestMatchTime, vs...))
}

// BestMatchTimeGT applies the GT predicate on the "best_match_time" field.
func BestMatchTimeGT(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldGT(FieldBestMatchTime, v))
}

// BestMatchTimeGTE applies the GTE predicate on the "best_match_time" field.
func BestMatchTimeGTE(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldGTE(FieldBestMatchTime, v))
}

// BestMatchTimeLT applies the LT predicate on the "best_match_time" field.
func BestMatchTimeLT(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldLT(FieldBestMatchTime, v))
}

// BestMatchTimeLTE applies the LTE predicate on the "best_match_time" field.
func BestMatchTimeLTE(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldLTE(FieldBestMatchTime, v))
}

// WorstResultTimeEQ applies the EQ predicate on the "worst_result_time" field.
func WorstResultTimeEQ(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldEQ(FieldWorstResultTime, v))
}

// WorstResultTimeNEQ applies the NEQ predicate on the "worst_result_time" field.
func WorstResultTimeNEQ(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldNEQ(FieldWorstResultTime, v))
}

// WorstResultTimeIn applies the In predicate on the "worst_result_time" field.
func WorstResultTimeIn(vs ...int) predicate.Statistic {
	return predicate.Statistic(sql.FieldIn(FieldWorstResultTime, vs...))
}

// WorstResultTimeNotIn applies the NotIn predicate on the "worst_result_time" field.
func WorstResultTimeNotIn(vs ...int) predicate.Statistic {
	return predicate.Statistic(sql.FieldNotIn(FieldWorstResultTime, vs...))
}

// WorstResultTimeGT applies the GT predicate on the "worst_result_time" field.
func WorstResultTimeGT(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldGT(FieldWorstResultTime, v))
}

// WorstResultTimeGTE applies the GTE predicate on the "worst_result_time" field.
func WorstResultTimeGTE(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldGTE(FieldWorstResultTime, v))
}

// WorstResultTimeLT applies the LT predicate on the "worst_result_time" field.
func WorstResultTimeLT(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldLT(FieldWorstResultTime, v))
}

// WorstResultTimeLTE applies the LTE predicate on the "worst_result_time" field.
func WorstResultTimeLTE(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldLTE(FieldWorstResultTime, v))
}

// WorstRetryCountEQ applies the EQ predicate on the "worst_retry_count" field.
func WorstRetryCountEQ(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldEQ(FieldWorstRetryCount, v))
}

// WorstRetryCountNEQ applies the NEQ predicate on the "worst_retry_count" field.
func WorstRetryCountNEQ(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldNEQ(FieldWorstRetryCount, v))
}

// WorstRetryCountIn applies the In predicate on the "worst_retry_count" field.
func WorstRetryCountIn(vs ...int) predicate.Statistic {
	return predicate.Statistic(sql.FieldIn(FieldWorstRetryCount, vs...))
}

// WorstRetryCountNotIn applies the NotIn predicate on the "worst_retry_count" field.
func WorstRetryCountNotIn(vs ...int) predicate.Statistic {
	return predicate.Statistic(sql.FieldNotIn(FieldWorstRetryCount, vs...))
}

// WorstRetryCountGT applies the GT predicate on the "worst_retry_count" field.
func WorstRetryCountGT(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldGT(FieldWorstRetryCount, v))
}

// WorstRetryCountGTE applies the GTE predicate on the "worst_retry_count" field.
func WorstRetryCountGTE(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldGTE(FieldWorstRetryCount, v))
}

// WorstRetryCountLT applies the LT predicate on the "worst_retry_count" field.
func WorstRetryCountLT(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldLT(FieldWorstRetryCount, v))
}

// WorstRetryCountLTE applies the LTE predicate on the "worst_retry_count" field.
func WorstRetryCountLTE(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldLTE(FieldWorstRetryCount, v))
}

// WorstMatchTimeEQ applies the EQ predicate on the "worst_match_time" field.
func WorstMatchTimeEQ(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldEQ(FieldWorstMatchTime, v))
}

// WorstMatchTimeNEQ applies the NEQ predicate on the "worst_match_time" field.
func WorstMatchTimeNEQ(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldNEQ(FieldWorstMatchTime, v))
}

// WorstMatchTimeIn applies the In predicate on the "worst_match_time" field.
func WorstMatchTimeIn(vs ...int) predicate.Statistic {
	return predicate.Statistic(sql.FieldIn(FieldWorstMatchTime, vs...))
}

// WorstMatchTimeNotIn applies the NotIn predicate on the "worst_match_time" field.
func WorstMatchTimeNotIn(vs ...int) predicate.Statistic {
	return predicate.Statistic(sql.FieldNotIn(FieldWorstMatchTime, vs...))
}

// WorstMatchTimeGT applies the GT predicate on the "worst_match_time" field.
func WorstMatchTimeGT(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldGT(FieldWorstMatchTime, v))
}

// WorstMatchTimeGTE applies the GTE predicate on the "worst_match_time" field.
func WorstMatchTimeGTE(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldGTE(FieldWorstMatchTime, v))
}

// WorstMatchTimeLT applies the LT predicate on the "worst_match_time" field.
func WorstMatchTimeLT(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldLT(FieldWorstMatchTime, v))
}

// WorstMatchTimeLTE applies the LTE predicate on the "worst_match_time" field.
func WorstMatchTimeLTE(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldLTE(FieldWorstMatchTime, v))
}

// MaxWinStreakEQ applies the EQ predicate on the "max_win_streak" field.
func MaxWinStreakEQ(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldEQ(FieldMaxWinStreak, v))
}

// MaxWinStreakNEQ applies the NEQ predicate on the "max_win_streak" field.
func MaxWinStreakNEQ(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldNEQ(FieldMaxWinStreak, v))
}

// MaxWinStreakIn applies the In predicate on the "max_win_streak" field.
func MaxWinStreakIn(vs ...int) predicate.Statistic {
	return predicate.Statistic(sql.FieldIn(FieldMaxWinStreak, vs...))
}

// MaxWinStreakNotIn applies the NotIn predicate on the "max_win_streak" field.
func MaxWinStreakNotIn(vs ...int) predicate.Statistic {
	return predicate.Statistic(sql.FieldNotIn(FieldMaxWinStreak, vs...))
}

// MaxWinStreakGT applies the GT predicate on the "max_win_streak" field.
func MaxWinStreakGT(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldGT(FieldMaxWinStreak, v))
}

// MaxWinStreakGTE applies the GTE predicate on the "max_win_streak" field.
func MaxWinStreakGTE(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldGTE(FieldMaxWinStreak, v))
}

// MaxWinStreakLT applies the LT predicate on the "max_win_streak" field.
func MaxWinStreakLT(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldLT(FieldMaxWinStreak, v))
}

// MaxWinStreakLTE applies the LTE predicate on the "max_win_streak" field.
func MaxWinStreakLTE(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldLTE(FieldMaxWinStreak, v))
}

// MaxLoseStreakEQ applies the EQ predicate on the "max_lose_streak" field.
func MaxLoseStreakEQ(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldEQ(FieldMaxLoseStreak, v))
}

// MaxLoseStreakNEQ applies the NEQ predicate on the "max_lose_streak" field.
func MaxLoseStreakNEQ(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldNEQ(FieldMaxLoseStreak, v))
}

// MaxLoseStreakIn applies the In predicate on the "max_lose_streak" field.
func MaxLoseStreakIn(vs ...int) predicate.Statistic {
	return predicate.Statistic(sql.FieldIn(FieldMaxLoseStreak, vs...))
}

// MaxLoseStreakNotIn applies the NotIn predicate on the "max_lose_streak" field.
func MaxLoseStreakNotIn(vs ...int) predicate.Statistic {
	return predicate.Statistic(sql.FieldNotIn(FieldMaxLoseStreak, vs...))
}

// MaxLoseStreakGT applies the GT predicate on the "max_lose_streak" field.
func MaxLoseStreakGT(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldGT(FieldMaxLoseStreak, v))
}

// MaxLoseStreakGTE applies the GTE predicate on the "max_lose_streak" field.
func MaxLoseStreakGTE(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldGTE(FieldMaxLoseStreak, v))
}

// MaxLoseStreakLT applies the LT predicate on the "max_lose_streak" field.
func MaxLoseStreakLT(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldLT(FieldMaxLoseStreak, v))
}

// MaxLoseStreakLTE applies the LTE predicate on the "max_lose_streak" field.
func MaxLoseStreakLTE(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldLTE(FieldMaxLoseStreak, v))
}

// MaxLoginStreakEQ applies the EQ predicate on the "max_login_streak" field.
func MaxLoginStreakEQ(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldEQ(FieldMaxLoginStreak, v))
}

// MaxLoginStreakNEQ applies the NEQ predicate on the "max_login_streak" field.
func MaxLoginStreakNEQ(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldNEQ(FieldMaxLoginStreak, v))
}

// MaxLoginStreakIn applies the In predicate on the "max_login_streak" field.
func MaxLoginStreakIn(vs ...int) predicate.Statistic {
	return predicate.Statistic(sql.FieldIn(FieldMaxLoginStreak, vs...))
}

// MaxLoginStreakNotIn applies the NotIn predicate on the "max_login_streak" field.
func MaxLoginStreakNotIn(vs ...int) predicate.Statistic {
	return predicate.Statistic(sql.FieldNotIn(FieldMaxLoginStreak, vs...))
}

// MaxLoginStreakGT applies the GT predicate on the "max_login_streak" field.
func MaxLoginStreakGT(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldGT(FieldMaxLoginStreak, v))
}

// MaxLoginStreakGTE applies the GTE predicate on the "max_login_streak" field.
func MaxLoginStreakGTE(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldGTE(FieldMaxLoginStreak, v))
}

// MaxLoginStreakLT applies the LT predicate on the "max_login_streak" field.
func MaxLoginStreakLT(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldLT(FieldMaxLoginStreak, v))
}

// MaxLoginStreakLTE applies the LTE predicate on the "max_login_streak" field.
func MaxLoginStreakLTE(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldLTE(FieldMaxLoginStreak, v))
}

// SearchScoreEQ applies the EQ predicate on the "search_score" field.
func SearchScoreEQ(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldEQ(FieldSearchScore, v))
}

// SearchScoreNEQ applies the NEQ predicate on the "search_score" field.
func SearchScoreNEQ(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldNEQ(FieldSearchScore, v))
}

// SearchScoreIn applies the In predicate on the "search_score" field.
func SearchScoreIn(vs ...int) predicate.Statistic {
	return predicate.Statistic(sql.FieldIn(FieldSearchScore, vs...))
}

// SearchScoreNotIn applies the NotIn predicate on the "search_score" field.
func SearchScoreNotIn(vs ...int) predicate.Statistic {
	return predicate.Statistic(sql.FieldNotIn(FieldSearchScore, vs...))
}

// SearchScoreGT applies the GT predicate on the "search_score" field.
func SearchScoreGT(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldGT(FieldSearchScore, v))
}

// SearchScoreGTE applies the GTE predicate on the "search_score" field.
func SearchScoreGTE(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldGTE(FieldSearchScore, v))
}

// SearchScoreLT applies the LT predicate on the "search_score" field.
func SearchScoreLT(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldLT(FieldSearchScore, v))
}

// SearchScoreLTE applies the LTE predicate on the "search_score" field.
func SearchScoreLTE(v int) predicate.Statistic {
	return predicate.Statistic(sql.FieldLTE(FieldSearchScore, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Statistic {
	return predicate.Statistic(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Statistic {
	return predicate.Statistic(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Statistic {
	return predicate.Statistic(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Statistic {
	return predicate.Statistic(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Statistic {
	return predicate.Statistic(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Statistic {
	return predicate.Statistic(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Statistic {
	return predicate.Statistic(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Statistic {
	return predicate.Statistic(sql.FieldLTE(FieldCreatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Statistic) predicate.Statistic {
	return predicate.Statistic(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Statistic) predicate.Statistic {
	return predicate.Statistic(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Statistic) predicate.Statistic {
	return predicate.Statistic(sql.NotPredicates(p))
}
