// Code generated by ent, DO NOT EDIT.

package statistic

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the statistic type in the database.
	Label = "statistic"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldPeriod holds the string denoting the period field in the database.
	FieldPeriod = "period"
	// FieldXp holds the string denoting the xp field in the database.
	FieldXp = "xp"
	// FieldMatchCount holds the string denoting the match_count field in the database.
	FieldMatchCount = "match_count"
	// FieldWinsCount holds the string denoting the wins_count field in the database.
	FieldWinsCount = "wins_count"
	// FieldLosesCount holds the string denoting the loses_count field in the database.
	FieldLosesCount = "loses_count"
	// FieldDrawsCount holds the string denoting the draws_count field in the database.
	FieldDrawsCount = "draws_count"
	// FieldResultTime holds the string denoting the result_time field in the database.
	FieldResultTime = "result_time"
	// FieldRetryTime holds the string denoting the retry_time field in the database.
	FieldRetryTime = "retry_time"
	// FieldRetryCount holds the string denoting the retry_count field in the database.
	FieldRetryCount = "retry_count"
	// FieldBestResultTime holds the string denoting the best_result_time field in the database.
	FieldBestResultTime = "best_result_time"
	// FieldBestRetryCount holds the string denoting the best_retry_count field in the database.
	FieldBestRetryCount = "best_retry_count"
	// FieldBestMatchTime holds the string denoting the best_match_time field in the database.
	FieldBestMatchTime = "best_match_time"
	// FieldWorstResultTime holds the string denoting the worst_result_time field in the database.
	FieldWorstResultTime = "worst_result_time"
	// FieldWorstRetryCount holds the string denoting the worst_retry_count field in the database.
	FieldWorstRetryCount = "worst_retry_count"
	// FieldWorstMatchTime holds the string denoting the worst_match_time field in the database.
	FieldWorstMatchTime = "worst_match_time"
	// FieldMaxWinStreak holds the string denoting the max_win_streak field in the database.
	FieldMaxWinStreak = "max_win_streak"
	// FieldMaxLoseStreak holds the string denoting the max_lose_streak field in the database.
	FieldMaxLoseStreak = "max_lose_streak"
	// FieldMaxLoginStreak holds the string denoting the max_login_streak field in the database.
	FieldMaxLoginStreak = "max_login_streak"
	// FieldSearchScore holds the string denoting the search_score field in the database.
	FieldSearchScore = "search_score"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the statistic in the database.
	Table = "statistics"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "statistics"
	// UserInverseTable is the table name for the UserDTO entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
)

// Columns holds all SQL columns for statistic fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldType,
	FieldPeriod,
	FieldXp,
	FieldMatchCount,
	FieldWinsCount,
	FieldLosesCount,
	FieldDrawsCount,
	FieldResultTime,
	FieldRetryTime,
	FieldRetryCount,
	FieldBestResultTime,
	FieldBestRetryCount,
	FieldBestMatchTime,
	FieldWorstResultTime,
	FieldWorstRetryCount,
	FieldWorstMatchTime,
	FieldMaxWinStreak,
	FieldMaxLoseStreak,
	FieldMaxLoginStreak,
	FieldSearchScore,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultPeriod holds the default value on creation for the "period" field.
	DefaultPeriod int
	// PeriodValidator is a validator for the "period" field. It is called by the builders before save.
	PeriodValidator func(int) error
	// DefaultXp holds the default value on creation for the "xp" field.
	DefaultXp int
	// XpValidator is a validator for the "xp" field. It is called by the builders before save.
	XpValidator func(int) error
	// DefaultMatchCount holds the default value on creation for the "match_count" field.
	DefaultMatchCount int
	// MatchCountValidator is a validator for the "match_count" field. It is called by the builders before save.
	MatchCountValidator func(int) error
	// DefaultWinsCount holds the default value on creation for the "wins_count" field.
	DefaultWinsCount int
	// WinsCountValidator is a validator for the "wins_count" field. It is called by the builders before save.
	WinsCountValidator func(int) error
	// DefaultLosesCount holds the default value on creation for the "loses_count" field.
	DefaultLosesCount int
	// LosesCountValidator is a validator for the "loses_count" field. It is called by the builders before save.
	LosesCountValidator func(int) error
	// DefaultDrawsCount holds the default value on creation for the "draws_count" field.
	DefaultDrawsCount int
	// DrawsCountValidator is a validator for the "draws_count" field. It is called by the builders before save.
	DrawsCountValidator func(int) error
	// DefaultResultTime holds the default value on creation for the "result_time" field.
	DefaultResultTime int
	// ResultTimeValidator is a validator for the "result_time" field. It is called by the builders before save.
	ResultTimeValidator func(int) error
	// DefaultRetryTime holds the default value on creation for the "retry_time" field.
	DefaultRetryTime int
	// RetryTimeValidator is a validator for the "retry_time" field. It is called by the builders before save.
	RetryTimeValidator func(int) error
	// DefaultRetryCount holds the default value on creation for the "retry_count" field.
	DefaultRetryCount int
	// RetryCountValidator is a validator for the "retry_count" field. It is called by the builders before save.
	RetryCountValidator func(int) error
	// DefaultBestResultTime holds the default value on creation for the "best_result_time" field.
	DefaultBestResultTime int
	// BestResultTimeValidator is a validator for the "best_result_time" field. It is called by the builders before save.
	BestResultTimeValidator func(int) error
	// DefaultBestRetryCount holds the default value on creation for the "best_retry_count" field.
	DefaultBestRetryCount int
	// BestRetryCountValidator is a validator for the "best_retry_count" field. It is called by the builders before save.
	BestRetryCountValidator func(int) error
	// DefaultBestMatchTime holds the default value on creation for the "best_match_time" field.
	DefaultBestMatchTime int
	// BestMatchTimeValidator is a validator for the "best_match_time" field. It is called by the builders before save.
	BestMatchTimeValidator func(int) error
	// DefaultWorstResultTime holds the default value on creation for the "worst_result_time" field.
	DefaultWorstResultTime int
	// WorstResultTimeValidator is a validator for the "worst_result_time" field. It is called by the builders before save.
	WorstResultTimeValidator func(int) error
	// DefaultWorstRetryCount holds the default value on creation for the "worst_retry_count" field.
	DefaultWorstRetryCount int
	// WorstRetryCountValidator is a validator for the "worst_retry_count" field. It is called by the builders before save.
	WorstRetryCountValidator func(int) error
	// DefaultWorstMatchTime holds the default value on creation for the "worst_match_time" field.
	DefaultWorstMatchTime int
	// WorstMatchTimeValidator is a validator for the "worst_match_time" field. It is called by the builders before save.
	WorstMatchTimeValidator func(int) error
	// DefaultMaxWinStreak holds the default value on creation for the "max_win_streak" field.
	DefaultMaxWinStreak int
	// MaxWinStreakValidator is a validator for the "max_win_streak" field. It is called by the builders before save.
	MaxWinStreakValidator func(int) error
	// DefaultMaxLoseStreak holds the default value on creation for the "max_lose_streak" field.
	DefaultMaxLoseStreak int
	// MaxLoseStreakValidator is a validator for the "max_lose_streak" field. It is called by the builders before save.
	MaxLoseStreakValidator func(int) error
	// DefaultMaxLoginStreak holds the default value on creation for the "max_login_streak" field.
	DefaultMaxLoginStreak int
	// MaxLoginStreakValidator is a validator for the "max_login_streak" field. It is called by the builders before save.
	MaxLoginStreakValidator func(int) error
	// DefaultSearchScore holds the default value on creation for the "search_score" field.
	DefaultSearchScore int
	// SearchScoreValidator is a validator for the "search_score" field. It is called by the builders before save.
	SearchScoreValidator func(int) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// Type defines the type for the "type" enum field.
type Type string

// TypeGlobal is the default value of the Type enum.
const DefaultType = TypeGlobal

// Type values.
const (
	TypeGlobal Type = "global"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeGlobal:
		return nil
	default:
		return fmt.Errorf("statistic: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the Statistic queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByPeriod orders the results by the period field.
func ByPeriod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPeriod, opts...).ToFunc()
}

// ByXp orders the results by the xp field.
func ByXp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldXp, opts...).ToFunc()
}

// ByMatchCount orders the results by the match_count field.
func ByMatchCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMatchCount, opts...).ToFunc()
}

// ByWinsCount orders the results by the wins_count field.
func ByWinsCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWinsCount, opts...).ToFunc()
}

// ByLosesCount orders the results by the loses_count field.
func ByLosesCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLosesCount, opts...).ToFunc()
}

// ByDrawsCount orders the results by the draws_count field.
func ByDrawsCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDrawsCount, opts...).ToFunc()
}

// ByResultTime orders the results by the result_time field.
func ByResultTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResultTime, opts...).ToFunc()
}

// ByRetryTime orders the results by the retry_time field.
func ByRetryTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRetryTime, opts...).ToFunc()
}

// ByRetryCount orders the results by the retry_count field.
func ByRetryCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRetryCount, opts...).ToFunc()
}

// ByBestResultTime orders the results by the best_result_time field.
func ByBestResultTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBestResultTime, opts...).ToFunc()
}

// ByBestRetryCount orders the results by the best_retry_count field.
func ByBestRetryCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBestRetryCount, opts...).ToFunc()
}

// ByBestMatchTime orders the results by the best_match_time field.
func ByBestMatchTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBestMatchTime, opts...).ToFunc()
}

// ByWorstResultTime orders the results by the worst_result_time field.
func ByWorstResultTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWorstResultTime, opts...).ToFunc()
}

// ByWorstRetryCount orders the results by the worst_retry_count field.
func ByWorstRetryCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWorstRetryCount, opts...).ToFunc()
}

// ByWorstMatchTime orders the results by the worst_match_time field.
func ByWorstMatchTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWorstMatchTime, opts...).ToFunc()
}

// ByMaxWinStreak orders the results by the max_win_streak field.
func ByMaxWinStreak(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaxWinStreak, opts...).ToFunc()
}

// ByMaxLoseStreak orders the results by the max_lose_streak field.
func ByMaxLoseStreak(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaxLoseStreak, opts...).ToFunc()
}

// ByMaxLoginStreak orders the results by the max_login_streak field.
func ByMaxLoginStreak(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaxLoginStreak, opts...).ToFunc()
}

// BySearchScore orders the results by the search_score field.
func BySearchScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSearchScore, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
