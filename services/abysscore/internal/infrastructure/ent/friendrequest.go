// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"github.com/intezya/abyssleague/services/abysscore/internal/infrastructure/ent/friendrequest"
	"github.com/intezya/abyssleague/services/abysscore/internal/infrastructure/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// FriendRequest is the model entity for the FriendRequest schema.
type FriendRequest struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// FromUserID holds the value of the "from_user_id" field.
	FromUserID int `json:"from_user_id,omitempty"`
	// ToUserID holds the value of the "to_user_id" field.
	ToUserID int `json:"to_user_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FriendRequestQuery when eager-loading is set.
	Edges        FriendRequestEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FriendRequestEdges holds the relations/edges for other nodes in the graph.
type FriendRequestEdges struct {
	// FromUser holds the value of the from_user edge.
	FromUser *User `json:"from_user,omitempty"`
	// ToUser holds the value of the to_user edge.
	ToUser *User `json:"to_user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// FromUserOrErr returns the FromUser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FriendRequestEdges) FromUserOrErr() (*User, error) {
	if e.FromUser != nil {
		return e.FromUser, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "from_user"}
}

// ToUserOrErr returns the ToUser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FriendRequestEdges) ToUserOrErr() (*User, error) {
	if e.ToUser != nil {
		return e.ToUser, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "to_user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FriendRequest) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case friendrequest.FieldID, friendrequest.FieldFromUserID, friendrequest.FieldToUserID:
			values[i] = new(sql.NullInt64)
		case friendrequest.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FriendRequest fields.
func (fr *FriendRequest) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case friendrequest.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fr.ID = int(value.Int64)
		case friendrequest.FieldFromUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field from_user_id", values[i])
			} else if value.Valid {
				fr.FromUserID = int(value.Int64)
			}
		case friendrequest.FieldToUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field to_user_id", values[i])
			} else if value.Valid {
				fr.ToUserID = int(value.Int64)
			}
		case friendrequest.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				fr.CreatedAt = value.Time
			}
		default:
			fr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FriendRequest.
// This includes values selected through modifiers, order, etc.
func (fr *FriendRequest) Value(name string) (ent.Value, error) {
	return fr.selectValues.Get(name)
}

// QueryFromUser queries the "from_user" edge of the FriendRequest entity.
func (fr *FriendRequest) QueryFromUser() *UserQuery {
	return NewFriendRequestClient(fr.config).QueryFromUser(fr)
}

// QueryToUser queries the "to_user" edge of the FriendRequest entity.
func (fr *FriendRequest) QueryToUser() *UserQuery {
	return NewFriendRequestClient(fr.config).QueryToUser(fr)
}

// Update returns a builder for updating this FriendRequest.
// Note that you need to call FriendRequest.Unwrap() before calling this method if this FriendRequest
// was returned from a transaction, and the transaction was committed or rolled back.
func (fr *FriendRequest) Update() *FriendRequestUpdateOne {
	return NewFriendRequestClient(fr.config).UpdateOne(fr)
}

// Unwrap unwraps the FriendRequest entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fr *FriendRequest) Unwrap() *FriendRequest {
	_tx, ok := fr.config.driver.(*txDriver)
	if !ok {
		panic("ent: FriendRequest is not a transactional entity")
	}
	fr.config.driver = _tx.drv
	return fr
}

// String implements the fmt.Stringer.
func (fr *FriendRequest) String() string {
	var builder strings.Builder
	builder.WriteString("FriendRequest(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fr.ID))
	builder.WriteString("from_user_id=")
	builder.WriteString(fmt.Sprintf("%v", fr.FromUserID))
	builder.WriteString(", ")
	builder.WriteString("to_user_id=")
	builder.WriteString(fmt.Sprintf("%v", fr.ToUserID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fr.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// FriendRequests is a parsable slice of FriendRequest.
type FriendRequests []*FriendRequest
