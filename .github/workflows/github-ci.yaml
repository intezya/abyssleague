name: Go Microservices CI/CD

on:
  push:
    branches: [ main, master, dev ]
    paths:
      - 'protos/**'
      - 'services/**'
      - 'deployments/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main, master, dev ]
    paths:
      - 'protos/**'
      - 'services/**'
      - 'deployments/**'
      - '.github/workflows/**'

env:
  GO_VERSION: 1.24.2
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      websocket-messaging: ${{ steps.changes.outputs.websocket-messaging }}
      abysscore: ${{ steps.changes.outputs.abysscore }}
      protos: ${{ steps.changes.outputs.protos }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Detect Changes
        id: changes
        uses: dorny/paths-filter@v3.0.2
        with:
          base: 'dev'
          filters: |
            websocket-messaging:
              - 'services/websocket-messaging/**'
              - 'protos/websocket-messaging/**'
              - 'deployments/docker/go.Dockerfile'
            abysscore:
              - 'services/abysscore/**'
              - 'protos/src/**'
              - 'deployments/docker/go.Dockerfile'
            protos:
              - 'protos/**'

  #  lint:
  #    needs: detect-changes
  #    if: ${{ needs.detect-changes.outputs.websocket-messaging == 'true' || needs.detect-changes.outputs.abysscore == 'true' || needs.detect-changes.outputs.protos == 'true' }}
  #    runs-on: ubuntu-latest
  #    strategy:
  #      matrix:
  ##        directory: ['services/websocket-messaging', 'services/abysscore', ]
  #        directory: [ 'services/abysscore' ]
  #
  #    steps:
  #      - uses: actions/checkout@v4.2.2
  #
  #      - name: Set up Go
  #        uses: actions/setup-go@v5.4.0
  #        with:
  #          go-version: ${{ env.GO_VERSION }}
  #
  #      - name: Lint
  #        uses: golangci/golangci-lint-action@v7
  #        with:
  #          version: latest
  #          working-directory: ${{ matrix.directory }}
  #          args: --timeout=5m

  #  security-scan:
  #    needs: [detect-changes]
  #    if: ${{ needs.detect-changes.outputs.websocket-messaging == 'true' || needs.detect-changes.outputs.abysscore == 'true' }}
  #    runs-on: ubuntu-latest
  #    steps:
  #      - uses: actions/checkout@v4.2.2
  #
  #      - name: Set up Go
  #        uses: actions/setup-go@v5.4.0
  #        with:
  #          go-version: ${{ env.GO_VERSION }}
  #
  #      - name: Run Gosec Security Scanner for websocket-messaging
  #        if: ${{ needs.detect-changes.outputs.websocket-messaging == 'true' }}
  #        uses: securego/gosec@master
  #        with:
  #          args: ./services/websocket-messaging/...
  #
  #      - name: Run Gosec Security Scanner for AbyssCore
  #        if: ${{ needs.detect-changes.outputs.abysscore == 'true' }}
  #        uses: securego/gosec@master
  #        with:
  #          args: ./services/abysscore/...

  test:
    needs: [ detect-changes, ] # lint
    if: ${{ needs.detect-changes.outputs.websocket-messaging == 'true' || needs.detect-changes.outputs.abysscore == 'true' }}
    runs-on: ubuntu-latest

    #    services:
    #      postgres:
    #        image: postgres:14.5-alpine
    #        env:
    #          POSTGRES_USER: postgres
    #          POSTGRES_PASSWORD: postgres
    #          POSTGRES_DB: testdb
    #        ports:
    #          - 5432:5432
    #        options: >-
    #          --health-cmd pg_isready
    #          --health-interval 10s
    #          --health-timeout 5s
    #          --health-retries 5
    #
    #      redis:
    #        image: redis:alpine
    #        ports:
    #          - 6379:6379
    #        options: >-
    #          --health-cmd "redis-cli ping"
    #          --health-interval 10s
    #          --health-timeout 5s
    #          --health-retries 5

    steps:
      - uses: actions/checkout@v4.2.2

      - name: Set up Go
        uses: actions/setup-go@v5.4.0
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Test websocket-messaging with Coverage
        if: ${{ needs.detect-changes.outputs.websocket-messaging == 'true' }}
        run: |
          cd services/websocket-messaging
          go test -race -coverprofile=coverage.txt -covermode=atomic ./...
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: testdb
          REDIS_ADDR: localhost:6379

      - name: Test AbyssCore with Coverage
        if: ${{ needs.detect-changes.outputs.abysscore == 'true' }}
        run: |
          cd services/abysscore
          go test -race -coverprofile=coverage.txt -covermode=atomic ./...
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: testdb
          REDIS_ADDR: localhost:6379

  #      - name: Upload coverage to Codecov
  #        uses: codecov/codecov-action@v5.4.2
  #        with:
  #          files: ./services/websocket-messaging/coverage.txt,./services/abysscore/coverage.txt

  build-and-push:
    needs: [ detect-changes, test, ] # security-scan
    if: ${{ success() && (needs.detect-changes.outputs.websocket-messaging == 'true' || needs.detect-changes.outputs.abysscore == 'true') && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev') }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Generate semantic version
        id: semver
        uses: paulhatch/semantic-version@v5.4.0
        with:
          major_pattern: "major:"
          minor_pattern: "feat:"
          patch_pattern: "fix:"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.10.0

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.4.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get branch name
        id: branch_name
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ] || [ "${{ github.ref }}" = "refs/heads/master" ]; then
            echo "BRANCH_TAG=latest" >> $GITHUB_OUTPUT
          else
            echo "BRANCH_TAG=$(echo ${{ github.ref }} | sed 's/refs\/heads\///')" >> $GITHUB_OUTPUT
          fi

      - name: Build and push websocket-messaging image
        if: ${{ needs.detect-changes.outputs.websocket-messaging == 'true' }}
        uses: docker/build-push-action@v6.0.0
        with:
          context: .
          file: ./deployments/docker/websocket-messaging.Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/websocket-messaging:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/websocket-messaging:${{ steps.branch_name.outputs.BRANCH_TAG }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/websocket-messaging:${{ steps.semver.outputs.version }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/websocket-messaging:${{ steps.branch_name.outputs.BRANCH_TAG }}
          cache-to: type=inline
          build-args: |
            SERVICE_NAME=websocket-messaging
            OUTPUT_BINARY_NAME=websocket-messaging-api-gateway
            VERSION=${{ steps.semver.outputs.version }}

      - name: Build and push AbyssCore image
        if: ${{ needs.detect-changes.outputs.abysscore == 'true' }}
        uses: docker/build-push-action@v6.0.0
        with:
          context: .
          file: ./deployments/docker/abysscore.Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/abysscore:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/abysscore:${{ steps.branch_name.outputs.BRANCH_TAG }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/abysscore:${{ steps.semver.outputs.version }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/abysscore:${{ steps.branch_name.outputs.BRANCH_TAG }}
          cache-to: type=inline
          build-args: |
            SERVICE_NAME=abysscore
            OUTPUT_BINARY_NAME=abysscore
            VERSION=${{ steps.semver.outputs.version }}

  deploy:
    needs: [ build-and-push ]
    if: ${{ success() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') }}
    runs-on: ubuntu-latest
    concurrency:
      group: deploy-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2.7.0
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}

      - name: Setup Docker auth on server
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
            mkdir -p ~/.docker
          
            if [ ! -f ~/.docker/config.json ] || ! grep -q \"${{ env.REGISTRY }}\" ~/.docker/config.json; then
              echo '{\"auths\":{\"${{ env.REGISTRY }}\":{\"auth\":\"'$(echo -n \"${{ github.repository_owner }}:${{ secrets.GHCR_PAT }}\" | base64)'\"}}}' > ~/.docker/config.json
              chmod 600 ~/.docker/config.json
              echo 'Docker auth configured successfully'
            else
              echo 'Docker auth already configured'
            fi
          "

      - name: Deploy to server
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
            if [ ! -d ${{ secrets.DEPLOY_PATH }} ]; then
              echo 'Directory does not exist, creating it...'
              mkdir -p ${{ secrets.DEPLOY_PATH }}
            fi
          
            cd ${{ secrets.DEPLOY_PATH }}
          
            echo 'Pulling latest images...'
            docker compose pull websocket-messaging-api-gateway abysscore
          
            echo 'Restarting services...'
            docker compose up -d
          
            echo 'Cleaning up old images...'
            docker image prune -af --filter 'until=24h'
          "
